import{_ as n,c as s,e,o as t}from"./app-DO9Fsueg.js";const l={};function i(p,a){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="spring-cloud-gateway-core" tabindex="-1"><a class="header-anchor" href="#spring-cloud-gateway-core"><span>spring-cloud-gateway-core</span></a></h1><h2 id="自动配置" tabindex="-1"><a class="header-anchor" href="#自动配置"><span>自动配置</span></a></h2><p>spring-cloud-gateway-server：</p><div class="language-facotries line-numbers-mode" data-highlighter="prismjs" data-ext="facotries" data-title="facotries"><pre><code><span class="line"># Auto Configure</span>
<span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span>
<span class="line">org.springframework.cloud.gateway.config.GatewayClassPathWarningAutoConfiguration,\\</span>
<span class="line">org.springframework.cloud.gateway.config.GatewayAutoConfiguration,\\</span>
<span class="line">org.springframework.cloud.gateway.config.GatewayResilience4JCircuitBreakerAutoConfiguration,\\</span>
<span class="line">org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration,\\</span>
<span class="line">org.springframework.cloud.gateway.config.GatewayMetricsAutoConfiguration,\\</span>
<span class="line">org.springframework.cloud.gateway.config.GatewayRedisAutoConfiguration,\\</span>
<span class="line">org.springframework.cloud.gateway.discovery.GatewayDiscoveryClientAutoConfiguration,\\</span>
<span class="line">org.springframework.cloud.gateway.config.SimpleUrlHandlerMappingGlobalCorsAutoConfiguration,\\</span>
<span class="line">org.springframework.cloud.gateway.config.GatewayReactiveLoadBalancerClientAutoConfiguration,\\</span>
<span class="line">org.springframework.cloud.gateway.config.GatewayReactiveOAuth2AutoConfiguration</span>
<span class="line"></span>
<span class="line">org.springframework.boot.env.EnvironmentPostProcessor=\\</span>
<span class="line">org.springframework.cloud.gateway.config.GatewayEnvironmentPostProcessor</span>
<span class="line"></span>
<span class="line"># 自定义的错误解析器</span>
<span class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\\</span>
<span class="line">org.springframework.cloud.gateway.support.MvcFoundOnClasspathFailureAnalyzer</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gatewayclasspathwarningautoconfiguration" tabindex="-1"><a class="header-anchor" href="#gatewayclasspathwarningautoconfiguration"><span>GatewayClassPathWarningAutoConfiguration</span></a></h3><p><strong>spring.cloud.gateway.enabled=false则这里不匹配。</strong></p><figure><img src="http://47.101.155.205/image-20250417151908220.png" alt="image-20250417151908220" tabindex="0" loading="lazy"><figcaption>image-20250417151908220</figcaption></figure><h3 id="gatewayautoconfiguration" tabindex="-1"><a class="header-anchor" href="#gatewayautoconfiguration"><span>GatewayAutoConfiguration</span></a></h3><p><strong>ConditionalOnEnabledGlobalFilter注解value可以用来指定过滤器的class，多处一起使用，可以满足同时配置或配置。ConditionalOnEnabledPredicate注解效果相同。</strong></p><ol><li><p>gateway自定义的默认过滤器配置(HttpHeadersFilter)：</p><ol><li><code>spring.cloud.gateway.forwarded.enabled=false</code>可以取消配置<code>ForwardedHeadersFilter</code>，默认开启。</li><li><code>RemoveHopByHopHeadersFilter</code>，<code>spring.cloud.gateway.filter.remove-hop-by-hop</code>配置自定义要删除的请求头。</li><li><code>spring.cloud.gateway.x-forwarded.enabled=false</code>取消<code>XForwardedHeadersFilter</code>过滤器，默认开启。</li><li><code>server.http2.enabled=false</code>取消<code>GRPCRequestHeadersFilter</code>过滤器，默认开启。</li><li><code>server.http2.enabled=false</code>取消<code>GRPCResponseHeadersFilter</code>，默认开启。</li><li><code>TransferEncodingNormalizationHeadersFilter</code></li></ol></li><li><p>全局过滤器(<code>GlobalFilter</code>)配置，可以通过spring.cloud.gateway.global-filter.过滤器名称.enabled=false关闭默认过滤器，过滤器名称等于<code>AdaptCachedBodyGlobalFilter=adapt-cache-body</code>。</p><ol><li>AdaptCachedBodyGlobalFilter</li><li>RemoveCachedBodyFilter</li><li>RouteToRequestUrlFilter</li><li>ForwardRoutingFilter</li><li>ForwardPathFilter</li><li>WebsocketRoutingFilter</li><li>WeightCalculatorWebFilter</li><li>NettyRoutingFilter：netty客户端才配置</li><li>NettyWriteResponseFilter</li></ol></li><li><p>路由断言<code>RoutePredicateFactory</code>工厂配置。通过spring.cloud.gateway.predicate.断言器民初.enabled=false关闭默认过滤器，过滤器名称等于<code>AfterRoutePredicateFactory=adapt-cache-body</code>。</p><ol><li>AfterRoutePredicateFactory：在断言配置时间之后才匹配。</li><li>BeforeRoutePredicateFactory：在断言配置时间之前才匹配。</li><li>BetweenRoutePredicateFactory：在断言配置时间之间才匹配。</li><li>CookieRoutePredicateFactory：配置的cookie的key对应的value是否匹配正则表达式。</li><li>HeaderRoutePredicateFactory：配置的请求头的key对应的valueList任意匹配正则表达式。正则表达式为空默认匹配。</li><li>HostRoutePredicateFactory：对请求Host进行正则匹配，在当前请求属性进行缓存操作。</li><li>MethodRoutePredicateFactory：配置允许的请求方式。</li><li>PathRoutePredicateFactory：有加同步代码。请求uri匹配，对请求属性进行某些操作。</li><li>QueryRoutePredicateFactory：对请求参数查询做一个配置判断。</li><li>ReadBodyRoutePredicateFactory：将请求体解析成配置类型对象，再使用内置配置<code>Predicate</code>断言该对象。</li><li>RemoteAddrRoutePredicateFactory：对请求的连接地址做校验。</li><li>WeightRoutePredicateFactory：结合过滤器WeightCalculatorWebFilter使用。</li><li>CloudFoundryRouteServiceRoutePredicateFactory：是否包含某些特定的请求头。</li></ol></li><li><p><code>WebFilter</code>过滤器配置。</p><ol><li>WeightCalculatorWebFilter，需要<code>WeightRoutePredicateFactory</code>配置才生效。</li></ol></li><li><p>配置GatewayFilterFactory过滤器工厂，spring.cloud.gateway.filter.add-request-header.enable=false表示关闭AddRequestHeaderGatewayFilterFactory工厂。</p><ol><li>AddRequestHeaderGatewayFilterFactory：</li><li>MapRequestHeaderGatewayFilterFactory：</li><li>AddRequestParameterGatewayFilterFactory：</li><li>AddResponseHeaderGatewayFilterFactory：</li><li>ModifyRequestBodyGatewayFilterFactory：</li><li>DedupeResponseHeaderGatewayFilterFactory：</li><li>ModifyResponseBodyGatewayFilterFactory</li><li>CacheRequestBodyGatewayFilterFactory</li><li>PrefixPathGatewayFilterFactory</li><li>PreserveHostHeaderGatewayFilterFactory</li><li>RedirectToGatewayFilterFactory</li><li>RemoveRequestHeaderGatewayFilterFactory</li><li>RemoveRequestParameterGatewayFilterFactory</li><li>RemoveResponseHeaderGatewayFilterFactory</li><li>RequestRateLimiterGatewayFilterFactory</li><li>RewritePathGatewayFilterFactory</li><li>RetryGatewayFilterFactory</li><li>SetPathGatewayFilterFactory</li><li>SecureHeadersGatewayFilterFactory</li><li>SetRequestHeaderGatewayFilterFactory</li><li>SetRequestHostHeaderGatewayFilterFactory</li><li>SetResponseHeaderGatewayFilterFactory</li><li>RewriteResponseHeaderGatewayFilterFactory</li><li>RewriteLocationResponseHeaderGatewayFilterFactory</li><li>SetStatusGatewayFilterFactory</li><li>SaveSessionGatewayFilterFactory</li><li>StripPrefixGatewayFilterFactory</li><li>RequestHeaderToRequestUriGatewayFilterFactory</li><li>RequestSizeGatewayFilterFactory</li><li>RequestHeaderSizeGatewayFilterFactory</li><li>TokenRelayGatewayFilterFactory</li></ol></li><li><p>gzip消息解析器GzipMessageBodyResolver</p></li><li><p>netty配置：</p><ol><li>服务端配置：spring.cloud.gateway.httpserver.wiretap配置是否记录请求头和请求体。</li><li>配置netty的<code>HttpClient</code>。配置类前缀spring.cloud.gateway.httpclient。</li><li>NettyRoutingFilter存在则配置NettyWriteResponseFilter过滤器</li><li>配置过滤器WebsocketRoutingFilter的一些配置。</li></ol></li><li><p>配置springboot的actuator，暴露端点api(GatewayControllerEndpoint、GatewayLegacyControllerEndpoint)。</p></li><li><p>存在oautch，配置TokenRelayGatewayFilterFactory过滤器工厂。</p></li></ol><h3 id="gatewayresilience4jcircuitbreakerautoconfiguration" tabindex="-1"><a class="header-anchor" href="#gatewayresilience4jcircuitbreakerautoconfiguration"><span>GatewayResilience4JCircuitBreakerAutoConfiguration</span></a></h3><p>存在相关依赖才会生效</p><div class="language-xml" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-circuitbreaker-reactor-resilience4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><code>@ConditionalOnEnabledFilter</code>注解默认判断类或方法(返回类型)的GatewayFilterFactory实现是否关闭配置，是否激活配置类或Bean。</p><p>SpringCloudCircuitBreakerFilterFactory子类实现配置spring.cloud.gateway.filter.circuit-breaker.enabled。其它则为驼峰命名转换为<code>-</code>分割格式。</p><p>AddRequestHeaderGatewayFilterFactory格式spring.cloud.gateway.filter.add-request-header.enabled。</p><p>断路器自动配置：</p><figure><img src="http://47.101.155.205/image-20250511171029987.png" alt="ReactiveResilience4JAutoConfiguration" tabindex="0" loading="lazy"><figcaption>ReactiveResilience4JAutoConfiguration</figcaption></figure><p>gateway断路器自动配置：</p><figure><img src="http://47.101.155.205/image-20250511170815524.png" alt="image-20250511170815524" tabindex="0" loading="lazy"><figcaption>image-20250511170815524</figcaption></figure><h3 id="gatewaynoloadbalancerclientautoconfiguration" tabindex="-1"><a class="header-anchor" href="#gatewaynoloadbalancerclientautoconfiguration"><span>GatewayNoLoadBalancerClientAutoConfiguration</span></a></h3><p>当没有<code>org.springframework.cloud.loadbalancer.core.ReactorLoadBalancer</code>类时，添加NoLoadBalancerClientFilter过滤器，将<code>lb</code>请求拦截。</p><figure><img src="http://47.101.155.205/image-20250511204840047.png" alt="image-20250511204840047" tabindex="0" loading="lazy"><figcaption>image-20250511204840047</figcaption></figure><h3 id="gatewaymetricsautoconfiguration" tabindex="-1"><a class="header-anchor" href="#gatewaymetricsautoconfiguration"><span>GatewayMetricsAutoConfiguration</span></a></h3><figure><img src="http://47.101.155.205/image-20250511205811026.png" alt="image-20250511205811026" tabindex="0" loading="lazy"><figcaption>image-20250511205811026</figcaption></figure><ol><li>3个GatewayTagsProvider配置；</li><li>依据spring.cloud.gateway.metrics.tags配置PropertiesTagsProvider；</li><li>GatewayMetricsFilter过滤器，监控请求指标；</li><li>RouteDefinitionMetrics处理RefreshRoutesEvent事件。</li></ol><h3 id="gatewayredisautoconfiguration" tabindex="-1"><a class="header-anchor" href="#gatewayredisautoconfiguration"><span>GatewayRedisAutoConfiguration</span></a></h3><p><strong>Redis Lua脚本实现了令牌桶算法：</strong></p><p>key参数说明：</p><ol><li>tokens_key：存储当前令牌数量的键，格式request_rate_limiter.{id}.tokens。</li><li>timestamp_key：存储上次令牌刷新时间的键，格式request_rate_limiter.{id}.timestamp。</li></ol><p>argv参数说明：</p><ol><li>rate：令牌填充速率(单位：令牌/秒)，</li><li>capacity：令牌桶的最大容量。</li><li>默认空字符串。</li><li>requested：当前请求需要的令牌数。</li></ol><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- Redis Lua脚本中，默认情况下命令是随机复制的，使用这个函数可以确保命令确定性地复制，特别是在涉及时间或随机数时，避免不一致的情况。</span></span>
<span class="line">redis<span class="token punctuation">.</span><span class="token function">replicate_commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> tokens_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">local</span> timestamp_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> rate <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> capacity <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> now <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;TIME&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">local</span> requested <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 容量/速率 表示填满整个桶所需的时间</span></span>
<span class="line"><span class="token keyword">local</span> fill_time <span class="token operator">=</span> capacity<span class="token operator">/</span>rate</span>
<span class="line"><span class="token comment">-- 设置过期时间为2倍所需时间</span></span>
<span class="line"><span class="token keyword">local</span> ttl <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>fill_time<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 获取当前key的令牌数量</span></span>
<span class="line"><span class="token keyword">local</span> last_tokens <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> last_tokens <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">  <span class="token comment">-- 不存在则默认当前桶容量为剩余数量</span></span>
<span class="line">  last_tokens <span class="token operator">=</span> capacity</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 获取上次key刷新时间</span></span>
<span class="line"><span class="token keyword">local</span> last_refreshed <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> last_refreshed <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">  <span class="token comment">-- 没有则默认0</span></span>
<span class="line">  last_refreshed <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 计算与上次key刷新时间差</span></span>
<span class="line"><span class="token keyword">local</span> delta <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> now<span class="token operator">-</span>last_refreshed<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- last_tokens+(delta*rate) 根据时间差补充令牌，但是不能超过最大容量</span></span>
<span class="line"><span class="token keyword">local</span> filled_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> last_tokens<span class="token operator">+</span><span class="token punctuation">(</span>delta<span class="token operator">*</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 可用令牌大于此次消耗令牌数量</span></span>
<span class="line"><span class="token keyword">local</span> allowed <span class="token operator">=</span> filled_tokens <span class="token operator">&gt;=</span> requested</span>
<span class="line"><span class="token keyword">local</span> new_tokens <span class="token operator">=</span> filled_tokens</span>
<span class="line"><span class="token keyword">local</span> allowed_num <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">if</span> allowed <span class="token keyword">then</span></span>
<span class="line">  new_tokens <span class="token operator">=</span> filled_tokens <span class="token operator">-</span> requested</span>
<span class="line">  allowed_num <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> ttl <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">then</span></span>
<span class="line">  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;setex&quot;</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> new_tokens<span class="token punctuation">)</span></span>
<span class="line">  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;setex&quot;</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> now<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- return { allowed_num, new_tokens, capacity, filled_tokens, requested, new_tokens }</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token punctuation">{</span> allowed_num<span class="token punctuation">,</span> new_tokens <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动配置作用：</p><ol><li>供RequestRateLimiterGatewayFilterFactory过滤器作请求拦截；</li><li>通过redis配置路由。</li></ol><h3 id="gatewaydiscoveryclientautoconfiguration" tabindex="-1"><a class="header-anchor" href="#gatewaydiscoveryclientautoconfiguration"><span>GatewayDiscoveryClientAutoConfiguration</span></a></h3><p>DiscoveryClient发现客户端注册。</p><figure><img src="http://47.101.155.205/image-20250512095402164.png" alt="image-20250512095402164" tabindex="0" loading="lazy"><figcaption>image-20250512095402164</figcaption></figure><h3 id="simpleurlhandlermappingglobalcorsautoconfiguration" tabindex="-1"><a class="header-anchor" href="#simpleurlhandlermappingglobalcorsautoconfiguration"><span>SimpleUrlHandlerMappingGlobalCorsAutoConfiguration</span></a></h3><p>通过配置解决跨域。</p><figure><img src="http://47.101.155.205/image-20250512105801474.png" alt="image-20250512105801474" tabindex="0" loading="lazy"><figcaption>image-20250512105801474</figcaption></figure><h3 id="gatewayreactiveloadbalancerclientautoconfiguration" tabindex="-1"><a class="header-anchor" href="#gatewayreactiveloadbalancerclientautoconfiguration"><span>GatewayReactiveLoadBalancerClientAutoConfiguration</span></a></h3><p>添加依赖：</p><div class="language-xml" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250513110706667.png" alt="image-20250513110706667" tabindex="0" loading="lazy"><figcaption>image-20250513110706667</figcaption></figure><p>根据配置的<code>LoadBalancerClientFactory</code>客户端负载均衡工厂创建<code>ReactiveLoadBalancerClientFilter</code>、<code>LoadBalancerServiceInstanceCookieFilter</code>过滤器。</p><h3 id="gatewayreactiveoauth2autoconfiguration" tabindex="-1"><a class="header-anchor" href="#gatewayreactiveoauth2autoconfiguration"><span>GatewayReactiveOAuth2AutoConfiguration</span></a></h3><p>添加依赖：</p><div class="language-xml" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-oauth2-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250513111202600.png" alt="image-20250513111202600" tabindex="0" loading="lazy"><figcaption>image-20250513111202600</figcaption></figure><p>Oauth自动配置。</p><h2 id="记录请求情况" tabindex="-1"><a class="header-anchor" href="#记录请求情况"><span>记录请求情况</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElapsedFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ElapsedFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;ElapsedFilter start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;ElapsedFilter end, time {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250513202022446.png" alt="image-20250513202022446" tabindex="0" loading="lazy"><figcaption>image-20250513202022446</figcaption></figure><h3 id="解决方式" tabindex="-1"><a class="header-anchor" href="#解决方式"><span>解决方式</span></a></h3><p>使用doFinally API。</p><figure><img src="http://47.101.155.205/image-20250513203534907.png" alt="image-20250513203534907" tabindex="0" loading="lazy"><figcaption>image-20250513203534907</figcaption></figure><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElapsedFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ElapsedFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;ElapsedFilter start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doFinally</span><span class="token punctuation">(</span>signalType <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;singleType: {}&quot;</span><span class="token punctuation">,</span> signalType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;ElapsedFilter end, time {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;then&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58)]))}const c=n(l,[["render",i],["__file","spring-cloud-gateway-core.html.vue"]]),r=JSON.parse('{"path":"/springcloud/gateway/spring-cloud-gateway-core.html","title":"spring-cloud-gateway-core","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"自动配置","slug":"自动配置","link":"#自动配置","children":[{"level":3,"title":"GatewayClassPathWarningAutoConfiguration","slug":"gatewayclasspathwarningautoconfiguration","link":"#gatewayclasspathwarningautoconfiguration","children":[]},{"level":3,"title":"GatewayAutoConfiguration","slug":"gatewayautoconfiguration","link":"#gatewayautoconfiguration","children":[]},{"level":3,"title":"GatewayResilience4JCircuitBreakerAutoConfiguration","slug":"gatewayresilience4jcircuitbreakerautoconfiguration","link":"#gatewayresilience4jcircuitbreakerautoconfiguration","children":[]},{"level":3,"title":"GatewayNoLoadBalancerClientAutoConfiguration","slug":"gatewaynoloadbalancerclientautoconfiguration","link":"#gatewaynoloadbalancerclientautoconfiguration","children":[]},{"level":3,"title":"GatewayMetricsAutoConfiguration","slug":"gatewaymetricsautoconfiguration","link":"#gatewaymetricsautoconfiguration","children":[]},{"level":3,"title":"GatewayRedisAutoConfiguration","slug":"gatewayredisautoconfiguration","link":"#gatewayredisautoconfiguration","children":[]},{"level":3,"title":"GatewayDiscoveryClientAutoConfiguration","slug":"gatewaydiscoveryclientautoconfiguration","link":"#gatewaydiscoveryclientautoconfiguration","children":[]},{"level":3,"title":"SimpleUrlHandlerMappingGlobalCorsAutoConfiguration","slug":"simpleurlhandlermappingglobalcorsautoconfiguration","link":"#simpleurlhandlermappingglobalcorsautoconfiguration","children":[]},{"level":3,"title":"GatewayReactiveLoadBalancerClientAutoConfiguration","slug":"gatewayreactiveloadbalancerclientautoconfiguration","link":"#gatewayreactiveloadbalancerclientautoconfiguration","children":[]},{"level":3,"title":"GatewayReactiveOAuth2AutoConfiguration","slug":"gatewayreactiveoauth2autoconfiguration","link":"#gatewayreactiveoauth2autoconfiguration","children":[]}]},{"level":2,"title":"记录请求情况","slug":"记录请求情况","link":"#记录请求情况","children":[{"level":3,"title":"解决方式","slug":"解决方式","link":"#解决方式","children":[]}]}],"git":{"updatedTime":1747141006000,"contributors":[{"name":"ouyangcm","username":"ouyangcm","email":"mingorg@163.com","commits":4,"url":"https://github.com/ouyangcm"},{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":2,"url":"https://github.com/oycm"}]},"filePathRelative":"springcloud/gateway/spring-cloud-gateway-core.md"}');export{c as comp,r as data};
