import{_ as s,c as a,e as p,o as t}from"./app-DO9Fsueg.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h2 id="分治算法概念" tabindex="-1"><a class="header-anchor" href="#分治算法概念"><span>分治算法概念</span></a></h2><p>分治算法就是一个具有递归结构的算法，其基本思想是把一个问题分解成若干个子问题(这些子问题与原问题相似，但问题规模小)，然后递归地解决子问题，最后把子问题的解组合成原问题的解。</p><p>求解步骤：</p><ol><li>把一个问题分解成若干个子问题；</li><li>通过递归地解决子问题来解决原问题。如果子问题的规模小到可以用直接的方法求出解，就停止递归。</li><li>把这些子问题的解组合成原问题的解。</li></ol><h2 id="分治算法应用" tabindex="-1"><a class="header-anchor" href="#分治算法应用"><span>分治算法应用</span></a></h2><h3 id="_1-合并排序" tabindex="-1"><a class="header-anchor" href="#_1-合并排序"><span>1.合并排序</span></a></h3><p>合并排序(Merge Sort)，时间复杂度nlgn。</p><p>步骤：</p><ol><li>将包含n个元素的数组均分成各自包含n/2个元素的子序列。</li><li>对两个子序列递归划分。</li><li>把两个已经排序的子序列合并成一个有序序列。</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">MergeSort</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> p <span class="token operator">&lt;</span> r then</span>
<span class="line">        q <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    	<span class="token class-name">MergeSort</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    	<span class="token class-name">MergeSort</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    	<span class="token class-name">Merge</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">Merge</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    n1 <span class="token operator">=</span> q <span class="token operator">-</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    n2 <span class="token operator">=</span> r <span class="token operator">-</span> q<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">L</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>p<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">R</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>q<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">L</span><span class="token punctuation">[</span>n1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">R</span><span class="token punctuation">[</span>n2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">;</span></span>
<span class="line">    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">A</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">A</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            j<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-快速排序" tabindex="-1"><a class="header-anchor" href="#_2-快速排序"><span>2.快速排序</span></a></h3><p>快速排序(QuickSort)，最好的时间复杂度是nlgn，最坏的情况n^2，大规模排序，效果比合并排序好。</p><p>随机选择支点的效果更好。</p><p>把待排序的数组用A[1,n]表示，现在考虑一般问题A[p..r]的分治求解过程：</p><ol><li>把问题A[p..r]分解成两个子问题A[p..q-1]和A[q+1..r]，并且满足A[p..q-1]中的每个元素都小于等于A[q]，而A[q+1..r]中的元素都比A[q]大，其中A[q]作为支点。计算索引q的过程就是划分子问题的过程。</li><li>对A[p..q-1]，A[q+1..r]这两个子问题分别调用QuickSort进行递归求解。</li></ol><p>当每个子问题都已经解决，数组就已经排号序了，每个元素都在正确的位置，因此没有必要把子问题的解组合在一起，分治算法的第三步对于快速排序没有必要。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">QuickSort</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> p <span class="token operator">&lt;</span> r <span class="token punctuation">{</span></span>
<span class="line">        q <span class="token operator">=</span> <span class="token class-name">Partition</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">QuickSort</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">QuickSort</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">Partition</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    x <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    i <span class="token operator">=</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> p<span class="token punctuation">,</span> p <span class="token operator">&lt;</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token class-name">A</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token class-name">A</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-大整数乘法" tabindex="-1"><a class="header-anchor" href="#_3-大整数乘法"><span>3.大整数乘法</span></a></h3><p>u和v分别用n位二进制表示，每个整数可分解成高位和低位两部分，每部分为n/2位。假设整数部分u分成w和x两部分，整数v分成y和z两部分。</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">u = w2^n/2 + x</span>
<span class="line">v = y2^n/2 + z</span>
<span class="line"></span>
<span class="line">uv = (w2^n/2 + x)(y2^n/2 + z)</span>
<span class="line">uv = wy2^n + (wz + xy)2^n/2 + xz</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>这样原问题转化成了位数更少的两个整数相乘的问题。</p><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">wz + xy = (w + x)(y + z) - wy - xz</span>
<span class="line">令</span>
<span class="line">A1 = wy</span>
<span class="line">A2 = xz</span>
<span class="line">A3 = (w + x)(y + z)</span>
<span class="line">则</span>
<span class="line">uv = A1*2^n + (A3 - A1 - A2)2^n/2 + A2</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>变成了只需要计算3次乘法运算，时间复杂度为n^lg3。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Multiply2Int</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        retrun uv<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token constant">A1</span> <span class="token operator">=</span> <span class="token class-name">Mulitiply2Int</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token constant">A2</span> <span class="token operator">=</span> <span class="token class-name">Mulitiply2Int</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token constant">A3</span> <span class="token operator">=</span> <span class="token class-name">Mulitiply2Int</span><span class="token punctuation">(</span>w<span class="token operator">+</span>x<span class="token punctuation">,</span> y<span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token constant">A1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span>n <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token constant">A3</span> <span class="token operator">-</span> <span class="token constant">A1</span> <span class="token operator">-</span> <span class="token constant">A2</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">^</span>n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token constant">A2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-矩阵乘法" tabindex="-1"><a class="header-anchor" href="#_4-矩阵乘法"><span>4.矩阵乘法</span></a></h3><h3 id="_5-残缺棋盘游戏" tabindex="-1"><a class="header-anchor" href="#_5-残缺棋盘游戏"><span>5.残缺棋盘游戏</span></a></h3><h3 id="_6-快速傅里叶变换-fft" tabindex="-1"><a class="header-anchor" href="#_6-快速傅里叶变换-fft"><span>6.快速傅里叶变换(FFT)</span></a></h3><h3 id="_7-迭代实现合并排序" tabindex="-1"><a class="header-anchor" href="#_7-迭代实现合并排序"><span>7.迭代实现合并排序</span></a></h3>`,28)]))}const i=s(e,[["render",l],["__file","divideAndConquer.html.vue"]]),u=JSON.parse('{"path":"/algorithmStrategy/divideAndConquer.html","title":"分治","lang":"zh-CN","frontmatter":{"permalink":"/algorithmStrategy/divideAndConquer.html","title":"分治"},"headers":[{"level":2,"title":"分治算法概念","slug":"分治算法概念","link":"#分治算法概念","children":[]},{"level":2,"title":"分治算法应用","slug":"分治算法应用","link":"#分治算法应用","children":[{"level":3,"title":"1.合并排序","slug":"_1-合并排序","link":"#_1-合并排序","children":[]},{"level":3,"title":"2.快速排序","slug":"_2-快速排序","link":"#_2-快速排序","children":[]},{"level":3,"title":"3.大整数乘法","slug":"_3-大整数乘法","link":"#_3-大整数乘法","children":[]},{"level":3,"title":"4.矩阵乘法","slug":"_4-矩阵乘法","link":"#_4-矩阵乘法","children":[]},{"level":3,"title":"5.残缺棋盘游戏","slug":"_5-残缺棋盘游戏","link":"#_5-残缺棋盘游戏","children":[]},{"level":3,"title":"6.快速傅里叶变换(FFT)","slug":"_6-快速傅里叶变换-fft","link":"#_6-快速傅里叶变换-fft","children":[]},{"level":3,"title":"7.迭代实现合并排序","slug":"_7-迭代实现合并排序","link":"#_7-迭代实现合并排序","children":[]}]}],"git":{"updatedTime":1729521320000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":1,"url":"https://github.com/oycm"}]},"filePathRelative":"algorithmStrategy/2.分治算法.md"}');export{i as comp,u as data};
