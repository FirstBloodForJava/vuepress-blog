import{_ as i,c as u,e as l,b as o,d as e,r as k,o as r,f as s,a as n}from"./app-DO9Fsueg.js";const d={};function m(v,a){const c=k("Tabs");return r(),u("div",null,[a[10]||(a[10]=l(`<h1 id="netty" tabindex="-1"><a class="header-anchor" href="#netty"><span>Netty</span></a></h1><p>Netty官网：https://netty.io/index.html</p><p>Github地址：https://github.com/netty/netty</p><p>使用Netty的相关项目：https://netty.io/wiki/related-projects.html</p><p>Netty是一个异步事件驱动的网络应用程序框架，可快速开发维护的高性能协议服务器和客户端。</p><p>Netty是一个NIO客户端服务器框架，可以快速轻松地开发网络应用程序，如协议服务器和客户端。它极大地简化了TCP和UDP socket server网络编程。</p><p>“快速和简单”并不意味着最终的应用程序将遭受可维护性或性能问题。Netty是根据实现许多协议，如FTP、SMTP、HTTP和<code>various binary and text-based legacy protocols</code>所获得的经验精心设计的。因此，Netty成功地找到了一种方法，在不妥协的情况下实现易于开发、性能、稳定性和灵活性。</p><p><strong>设计：</strong></p><ul><li>用于各种传输类型的统一API，BIO或NIO，协议。</li><li>基于灵活且可扩展的事件模型，允许清晰地分离关注点。</li><li>高度可定制的线程模型：单个线程，一个或多个线程池，如SEDA。</li><li>真正的无连接数据报套接字支持（自3.1起）。</li></ul><p><strong>性能：</strong></p><ul><li>更好的吞吐量，更低的延迟</li><li>减少资源消耗</li><li>最小化不必要的内存拷贝</li></ul><p><strong>安全：完整的SSL/TLS和StartTLS加密传输支持支持。</strong></p><h2 id="使用指南" tabindex="-1"><a class="header-anchor" href="#使用指南"><span>使用指南</span></a></h2><p>netty依赖：</p><div class="language-xml" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/io.netty/netty-all --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.119.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="discard-服务端" tabindex="-1"><a class="header-anchor" href="#discard-服务端"><span>Discard 服务端</span></a></h3><p>Discard协议，会丢弃任何接收到的数据，而不会产生任何响应。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span></span><span class="token class-name">ByteBuf</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInboundHandlerAdapter</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ReferenceCountUtil</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 继承 ChannelInboundHandlerAdapter,它是 ChannelInboundHandler 实现，提供了各种事件的处理方法</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiscardServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 这里接收到的消息类型是 ByteBuf, 调用 release() 方法丢弃消息</span></span>
<span class="line">        <span class="token comment">// ((ByteBuf) msg).release();</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">ByteBuf</span> in <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 使用 telnet localhost 8080 就能看到这里打印的数据</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;释放数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">ReferenceCountUtil</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 打印捕获到的异常堆栈信息</span></span>
<span class="line">        cause<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span></span><span class="token class-name">ServerBootstrap</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelFuture</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInitializer</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelOption</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioEventLoopGroup</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">SocketChannel</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioServerSocketChannel</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiscardServer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">DiscardServer</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// NioEventLoopGroup是一个处理I/O操作的多线程事件循环。Netty为不同类型的传输提供了各种EventLoopGroup实现。</span></span>
<span class="line">        <span class="token comment">// 在本例中，我们将实现一个服务器端应用程序，因此将使用两个NioEventLoopGroup。</span></span>
<span class="line">        <span class="token comment">// 第一个通常被称为 boss ，它接受传入的连接。</span></span>
<span class="line">        <span class="token comment">// 第二个通常称为 worker ，一旦boss接受连接并将接受的连接注册到worker，它将处理已接受连接的流量。</span></span>
<span class="line">        <span class="token comment">// 使用多少线程以及如何将它们映射到创建的通道取决于EventLoopGroup实现，甚至可以通过构造函数进行配置。</span></span>
<span class="line">        <span class="token class-name">NioEventLoopGroup</span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">NioEventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// ServerBootstrap是一个设置服务器的助手类。您可以直接使用Channel设置服务器。但是，请注意，这是一个繁琐的过程，在大多数情况下不需要这样做。</span></span>
<span class="line">            <span class="token class-name">ServerBootstrap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 在这里，指定使用 NioServerSocketChannel，该类用于实例化一个新 Channel 以接受传入的连接。</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 这里指定的处理程序将始终由新接受的通道计算。</span></span>
<span class="line">                        <span class="token comment">// ChannelInitializer 是一个特殊的处理程序，用于帮助用户配置新通道。</span></span>
<span class="line">                        <span class="token annotation punctuation">@Override</span></span>
<span class="line">                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">                            <span class="token comment">// 继承 ChannelInboundHandlerAdapter 的新类</span></span>
<span class="line">                            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EchoServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                        <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_BACKLOG</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token comment">// 您还可以设置特定于Channel实现的参数。我们正在编写一个TCP/IP服务器，所以我们可以设置套接字选项，如tcpNoDelay和keepAlive。</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// option()用于 NioServerSocketChannel，它接受传入的连接。childOption()用于父ServerChannel接受的通道</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Bind and start to accept incoming connections.</span></span>
<span class="line">            <span class="token comment">// 绑定端口</span></span>
<span class="line">            <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Wait until the server socket is closed.</span></span>
<span class="line">            f<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            port <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">DiscardServer</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">telnet localhost <span class="token number">8080</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="echo-服务端" tabindex="-1"><a class="header-anchor" href="#echo-服务端"><span>Echo 服务端</span></a></h3><p>继承DiscardServerHandler，重写channelRead方法，服务端创建的通道使用EchoServerHandler。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EchoServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">DiscardServerHandler</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//</span></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//</span></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">telnet localhost <span class="token number">8080</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="time-server" tabindex="-1"><a class="header-anchor" href="#time-server"><span>Time Server</span></a></h3><p>建立连接后立即发送消息，并在发送消息后关闭连接。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 重写事件方法</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">ctx</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 定义缓冲区</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> time <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        time<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000L</span> <span class="token operator">+</span> <span class="token number">2208988800L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 发送消息 因为异步，所有不能直接调用 ctx.close()方法</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        f<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 消息发送完毕后注册回调</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> future<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">assert</span> f <span class="token operator">==</span> future<span class="token punctuation">;</span></span>
<span class="line">                ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cause<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>linux测试命令：</strong></p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">rdate <span class="token parameter variable">-o</span> <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>host<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="time-client" tabindex="-1"><a class="header-anchor" href="#time-client"><span>Time Client</span></a></h3><p>ChannelInboundHandlerAdapter 继承</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span></span><span class="token class-name">ByteBuf</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInboundHandlerAdapter</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">ByteBuf</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">long</span> currentTimeMillis <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">readUnsignedInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2208988800L</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>currentTimeMillis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            m<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cause<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span></span><span class="token class-name">Bootstrap</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelFuture</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInitializer</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelOption</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">EventLoopGroup</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioEventLoopGroup</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">SocketChannel</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioSocketChannel</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeClient</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> host <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">EventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Bootstrap 类似于 ServerBootstrap ，不同之处在于它适用于非服务器通道，如客户端或无连接通道。</span></span>
<span class="line">            <span class="token class-name">Bootstrap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 只指定一个EventLoopGroup，它将同时用作 boss组和 worker 组。boss组在客户端不使用</span></span>
<span class="line">            b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>workerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// NioSocketChannel 被用来创建客户端通道，而不是NioServerSocketChannel(服务端)</span></span>
<span class="line">            b<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 注意，这里我们没有像使用ServerBootstrap那样使用childOption()，因为客户端SocketChannel没有父类。</span></span>
<span class="line">            b<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            b<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token annotation punctuation">@Override</span></span>
<span class="line">                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">                    ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 连接服务端</span></span>
<span class="line">            <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Wait until the connection is closed.</span></span>
<span class="line">            f<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理基于流的传输" tabindex="-1"><a class="header-anchor" href="#处理基于流的传输"><span>处理基于流的传输</span></a></h3><p>在基于流的传输（如TCP/IP）中，接收到的数据存储在套接字接收缓冲区中。不幸的是，基于流的传输的缓冲区不是数据包队列，而是<code>字节队列</code>。这意味着，即使您将两个消息作为两个独立的数据包发送，操作系统也不会将它们视为两个消息，而只是将它们视为一堆字节。因此，不能保证您所读的内容就是远程对等体所写的内容。例如，让我们假设操作系统的TCP/IP栈收到了三个数据包：</p><figure><img src="http://47.101.155.205/image-20250331204041306.png" alt="image-20250331204041306" tabindex="0" loading="lazy"><figcaption>image-20250331204041306</figcaption></figure><p>由于基于流的协议的这个通用属性，在应用程序中很有可能以以下碎片形式读取它们：</p><figure><img src="http://47.101.155.205/image-20250331204049138.png" alt="image-20250331204049138" tabindex="0" loading="lazy"><figcaption>image-20250331204049138</figcaption></figure><p>因此，接收部分，无论是服务器端还是客户端，都应该将接收到的数据整理成一个或多个有意义的帧，这些帧可以被应用程序逻辑轻松理解。在上面的例子中，接收到的数据应该像下面这样：</p><figure><img src="http://47.101.155.205/image-20250331204041306.png" alt="image-20250331204041306" tabindex="0" loading="lazy"><figcaption>image-20250331204041306</figcaption></figure><p>现在让我们回到Time Client示例。我们这里也有同样的问题。32位Bit 是一个非常小的数据量，它不太可能经常被分片。然而，问题是它可能是碎片化的，并且碎片化的可能性会随着流量的增加而增加。</p><p>最简单的解决方案是创建一个内部 cumulative buffer 并等待所有 4 个字节都被接收到内部 buffer 中。</p><h4 id="方式一" tabindex="-1"><a class="header-anchor" href="#方式一"><span>方式一</span></a></h4><p>创建固定大小的数据缓冲区</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span></span><span class="token class-name">ByteBuf</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeClientSecondHandler</span> <span class="token keyword">extends</span> <span class="token class-name">TimeClientHandler</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">ByteBuf</span> buf<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建缓冲区</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerAdded</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        buf <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 情况缓冲区</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerRemoved</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        buf<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        buf <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ByteBuf</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span></span>
<span class="line">        buf<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        m<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 数据够了才使用</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">long</span> currentTimeMillis <span class="token operator">=</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">readUnsignedInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2208988800L</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>currentTimeMillis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方式二" tabindex="-1"><a class="header-anchor" href="#方式二"><span>方式二</span></a></h4><p>添加多个<code>ChannelHandler</code>，功能拆分。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * ByteToMessageDecoder 是 ChannelInboundHandler 的一个实现，它可以很容易地处理碎片问题</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeDecoder</span> <span class="token keyword">extends</span> <span class="token class-name">ByteToMessageDecoder</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 每当接收到新数据时，ByteToMessageDecoder 使用内部维护的累积缓冲区调用 decode() 方法。</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> in<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 当累积缓冲区中没有足够的数据时，decode() 可以决定不向out添加任何数据。ByteToMessageDecoder将在接收到更多数据时再次调用 decode()</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 如果 decode() 向out添加一个对象，则表示解码器成功解码了一条消息</span></span>
<span class="line">        <span class="token comment">// ByteToMessageDecoder 将丢弃累积缓冲区的读部分</span></span>
<span class="line">        out<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250331205747986.png" alt="image-20250331205747986" tabindex="0" loading="lazy"><figcaption>image-20250331205747986</figcaption></figure><h3 id="使用对象而不是bytebuf" tabindex="-1"><a class="header-anchor" href="#使用对象而不是bytebuf"><span>使用对象而不是ByteBuf</span></a></h3><p>在<code>ChannelHandlers</code>中使用<code>POJO</code>的优势是显而易见的；通过将从<code>ByteBuf</code>中提取信息的代码从处理程序中分离出来，处理程序变得更易于维护和可重用。在Time Client和Time Server示例中，我们只读取一个32bit整数，因此直接使用ByteBuf不是主要问题。但是，您会发现在实现实际协议时进行分离是必要的。</p><p>首先，让我们定义一个名为UnixTime的新类型。</p><figure><img src="http://47.101.155.205/image-20250331211735408.png" alt="image-20250331211735408" tabindex="0" loading="lazy"><figcaption>image-20250331211735408</figcaption></figure>`,54)),o(c,{id:"171",data:[{id:"Pojo Decoder"},{id:"ChannelInboundHandler 实现"}]},{title0:e(({value:t,isActive:p})=>a[0]||(a[0]=[s("Pojo Decoder")])),title1:e(({value:t,isActive:p})=>a[1]||(a[1]=[s("ChannelInboundHandler 实现")])),tab0:e(({value:t,isActive:p})=>a[2]||(a[2]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"TimePojoDecoder"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"ByteToMessageDecoder"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"decode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ChannelHandlerContext"),s(" ctx"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"ByteBuf"),s(" in"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),s(" out"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("in"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readableBytes"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"UnixTime"),n("span",{class:"token punctuation"},"("),s("in"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readUnsignedInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,null,-1)])),tab1:e(({value:t,isActive:p})=>a[3]||(a[3]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"TimeClientPojoHandler"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"TimeClientHandler"),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"channelRead"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ChannelHandlerContext"),s(" ctx"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),s(" msg"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"UnixTime"),s(" m "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"UnixTime"),n("span",{class:"token punctuation"},")"),s(" msg"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("msg"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'": "'),s(),n("span",{class:"token operator"},"+"),s(" m"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,null,-1)])),_:1}),a[11]||(a[11]=l(`<h4 id="服务端使用对象" tabindex="-1"><a class="header-anchor" href="#服务端使用对象"><span>服务端使用对象</span></a></h4><p>Server写UnixTime对象：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnixTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    f<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">.</span><span class="token constant">CLOSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>将对象的属性编码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeEncoder</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelOutboundHandlerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">UnixTime</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UnixTime</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">ByteBuf</span> encoded <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        encoded<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="底层设计" tabindex="-1"><a class="header-anchor" href="#底层设计"><span>底层设计</span></a></h2><h3 id="丰富的buffer数据结构" tabindex="-1"><a class="header-anchor" href="#丰富的buffer数据结构"><span>丰富的Buffer数据结构</span></a></h3><p>Netty使用自己的缓冲区API而不是<code>NIO ByteBuffer</code>来表示字节序列。这种方法比使用ByteBuffer有显著的优势。Netty的新缓冲区类型<a href="https://netty.io/3.5/api/org/jboss/netty/buffer/ChannelBuffer.html" target="_blank" rel="noopener noreferrer">ChannelBuffer</a>从头开始设计，以解决ByteBuffer的问题，并满足网络应用程序开发人员的日常需求。列出一些很酷的功能：</p><ul><li>如有必要，可以定义自己的缓冲区类型。</li><li>透明零拷贝是通过内置的复合缓冲区类型实现的。</li><li>提供了开箱即用的动态缓冲区类型，其容量可根据需要扩展，例如：StringBuffer。</li><li>不需要调用flip()方法。</li><li>通常比ByteBuffer快。</li></ul><p>org.jboss.netty.buffer包功能描述：https://netty.io/3.5/api/org/jboss/netty/buffer/package-summary.html#package_description</p><h4 id="combining-and-slicing-channelbuffers" tabindex="-1"><a class="header-anchor" href="#combining-and-slicing-channelbuffers"><span>Combining and Slicing ChannelBuffers</span></a></h4><p>在通信层之间传输数据时，通常需要对数据进行组合或切片。例如，如果一个有效负载被分割成多个包，通常需要将其组合起来进行解码。</p><p>传统上，来自多个包的数据通过将它们复制到一个新的字节缓冲区来组合。</p><p>Netty支持零拷贝方法，其中ChannelBuffer“指向”所需的缓冲区，从而消除了执行复制的需要。</p><figure><img src="http://47.101.155.205/image-20250401194201507.png" alt="image-20250401194201507" tabindex="0" loading="lazy"><figcaption>image-20250401194201507</figcaption></figure><h3 id="通用异步i-o-api" tabindex="-1"><a class="header-anchor" href="#通用异步i-o-api"><span>通用异步I/O API</span></a></h3><p>Java中的传统I/O api为不同的传输类型提供了不同的类型和方法。例如，<code>java.net.Socket</code>和<code>java.net.DatagramSocket</code>没有任何共同的超类型，因此它们有非常不同的方式来执行 Socket I/O。</p><p>这种不匹配使得将网络应用程序从一种传输方式移植到另一种传输方式既繁琐又困难。当您需要支持额外的传输时，传输之间缺乏可移植性就会成为一个问题，因为这通常需要重写应用程序的网络层。从逻辑上讲，许多协议可以在多个传输上运行，如TCP/IP、UDP/IP、SCTP和serial port communication。</p><p>更糟糕的是，Java的New I/O (NIO) API引入了与旧的阻塞I/O (OIO)API的不兼容性，并将在下一个版本NIO.2 (AIO)中继续这样做。由于所有这些API在设计和性能特征上彼此不同，因此甚至在开始实现阶段之前，您常常被迫确定应用程序将依赖哪个API。</p><p>例如，您可能希望从OIO开始，因为您要服务的客户机数量非常少，并且使用OIO编写套接字服务器比使用NIO容易得多。然而，当您的业务呈指数级增长并且您的服务器需要同时为成千上万的客户端提供服务时，您将遇到麻烦。您可以从NIO开始，但是由于NIO Selector API的复杂性，这样做可能会大大增加开发时间，从而阻碍快速开发。</p><p>Netty有一个称为<code>Channel</code>的通用异步I/O接口，它抽象出点对点通信所需的所有操作。也就是说，一旦在一个Netty传输上编写了应用程序，应用程序就可以在其他Netty传输上运行。Netty通过一个通用API提供了许多基本的传输：</p><ul><li>基于NIO的TCP/IP协议(org.jboss.netty.channel.socket.nio)。</li><li>基于OIO的TCP/IP协议(org.jboss.netty.channel.socket.oio)。</li><li>基于OIO的UDP/IP协议。</li><li>本地传输(org.jboss.netty.channel.local)。</li></ul><p>从一种传输切换到另一种传输通常只需要做几行更改，例如：选择不同的<code>ChannelFactory</code>实现。</p><p>此外，您甚至可以利用尚未编写的新传输（例如串行端口通信传输），同样只需替换几行构造函数调用。此外，您可以通过扩展核心API来编写自己的传输。</p><h3 id="基于拦截链模式的事件模型" tabindex="-1"><a class="header-anchor" href="#基于拦截链模式的事件模型"><span>基于拦截链模式的事件模型</span></a></h3><p>Event Model based on the Interceptor Chain Pattern</p><p>对于事件驱动的应用程序来说，定义良好且可扩展的事件模型是必须的。Netty有一个专注于I/O的定义良好的事件模型。它还允许您在不破坏现有代码的情况下实现自己的事件类型，因为每种事件类型都通过严格的类型层次结构与其他事件类型区分开来。这是与其他框架的另一个区别。许多NIO框架没有或非常有限的事件模型概念。如果它们提供扩展，那么当您尝试添加自定义事件类型时，它们通常会破坏现有代码。</p><p><code>ChannelEvent</code>由<code>ChannelPipeline</code>中的<code>ChannelHandlers</code>列表处理。管道实现了<code>拦截过滤器模式</code>的高级形式，使用户可以完全控制如何处理事件以及管道中的处理程序如何相互交互。例如，你可以定义从套接字<code>读取数据messageReceived</code>时要做什么：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyReadHandler</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleChannelHandler</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">messageReceived</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">MessageEvent</span> evt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Object</span> message <span class="token operator">=</span> evt<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 接收消息时，可以定义的操作</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 转发实现到下一个 handler</span></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">sendUpstream</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以定义处理程序接收到<code>写请求(writeRequested)</code>时要做什么：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWriteHandler</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleChannelHandler</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeRequested</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">MessageEvent</span> evt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Object</span> message <span class="token operator">=</span> evt<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 接收到写请求操作</span></span>
<span class="line">        </span>
<span class="line">		<span class="token comment">// 转发实现到下一个 handler</span></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">sendDownstream</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ChannelEvent API文档：https://netty.io/3.5/api/org/jboss/netty/channel/ChannelEvent.html</p><p>ChannelPipeline API文档：http://netty.io/3.5/api/org/jboss/netty/channel/ChannelPipeline.html</p><h3 id="其它组件" tabindex="-1"><a class="header-anchor" href="#其它组件"><span>其它组件</span></a></h3><h4 id="codec-framework" tabindex="-1"><a class="header-anchor" href="#codec-framework"><span>Codec framework</span></a></h4><p>一个好的网络应用程序框架应该提供一个可扩展的、可重用的、可单元测试的和多层的编解码器框架，以生成可维护的用户编解码器。</p><p>Netty提供了许多基本的和高级的编解码器来解决您在编写协议编解码器时遇到的大多数问题，无论它是简单的还是不简单的，是二进制的还是文本的-简单的都可以。</p><h4 id="ssl-tls-support" tabindex="-1"><a class="header-anchor" href="#ssl-tls-support"><span>SSL / TLS Support</span></a></h4><p>与以前的阻塞I/O不同，在NIO中支持SSL是一项非常重要的任务。您不能简单地包装流来加密或解密数据，而是必须使用<code>javax.net.ssl.SSLEngine</code>。SSLEngine是一种与SSL本身一样复杂的状态机。你必须管理所有可能的状态，例如密码套件和加密密钥协商（或重新协商）、证书交换和验证。此外，SSLEngine甚至不是完全线程安全的，正如人们所期望的那样。</p><p>在Netty中，<a href="http://netty.io/3.5/api/org/jboss/netty/handler/ssl/SslHandler.html" target="_blank" rel="noopener noreferrer">SslHandler</a>负责SSLEngine的所有血腥细节和陷阱。你需要做的就是配置<code>SslHandler</code>并将其插入到<code>ChannelPipeline</code>中。它还允许您非常轻松地实现像<a href="https://en.wikipedia.org/wiki/Starttls" target="_blank" rel="noopener noreferrer">StartTLS</a>这样的高级功能。</p><h4 id="http实现" tabindex="-1"><a class="header-anchor" href="#http实现"><span>HTTP实现</span></a></h4><p>HTTP无疑是互联网上最流行的协议。已经有许多HTTP实现，比如Servlet容器。那么为什么Netty在其核心之上有HTTP呢？</p><p>Netty的HTTP支持与现有的HTTP库非常不同。它使您能够完全控制HTTP消息在底层的交换方式。因为它基本上是HTTP编解码器和HTTP消息类的组合，所以没有诸如强制<code>线程模型</code>之类的限制。也就是说，您可以编写自己的HTTP客户机或服务器，使其完全按照您想要的方式工作。您可以完全控制HTTP规范中的所有内容，包括线程模型、连接生命周期和分块编码。</p><p>由于其高度可定制的特性，您可以编写一个非常高效的HTTP服务器，例如：</p><ul><li>需要持久连接和服务器推送技术的聊天服务器，例如Comet。</li><li>媒体流服务器，需要保持连接打开，直到整个媒体流结束，例如2小时的视频。</li><li>允许上传大文件而没有内存压力的文件服务器，例如每个请求上传1GB。</li><li>可扩展的混搭客户端，可以异步连接到成千上万的第三方web服务</li></ul><h4 id="websokcets实现" tabindex="-1"><a class="header-anchor" href="#websokcets实现"><span>WebSokcets实现</span></a></h4><p>WebSockets允许在单个传输控制协议（TCP）套接字上实现双向、全双工的通信通道。它被设计成允许在web浏览器和web服务器之间传输数据流。</p><p>WebSocket协议已经被IETF标准化为<a href="http://tools.ietf.org/html/rfc6455" target="_blank" rel="noopener noreferrer">RFC 6455</a>。</p><p>Netty实现了RFC 6455和该规范的许多旧版本。请参考<a href="http://netty.io/3.5/api/org/jboss/netty/handler/codec/http/websocketx/package-summary#package_description" target="_blank" rel="noopener noreferrer">org.jboss.netty.handler.codec.http.websocketx</a>包和相关<a href="http://netty.io/3.5/xref/org/jboss/netty/example/http/websocketx/server/package-summary.html" target="_blank" rel="noopener noreferrer">示例</a>。</p><h3 id="google-protocol-buffer-integration" tabindex="-1"><a class="header-anchor" href="#google-protocol-buffer-integration"><span>Google Protocol Buffer Integration</span></a></h3><p><a href="https://code.google.com/apis/protocolbuffers/docs/overview.html" target="_blank" rel="noopener noreferrer">谷歌协议缓冲区</a>是快速实现随时间发展的高效二进制协议的理想解决方案。使用<a href="http://netty.io/3.5/api/org/jboss/netty/handler/codec/protobuf/ProtobufEncoder.html" target="_blank" rel="noopener noreferrer">ProtobufEncoder</a>和<a href="http://netty.io/3.5/api/org/jboss/netty/handler/codec/protobuf/ProtobufDecoder.html" target="_blank" rel="noopener noreferrer">ProtobufDecoder</a>，您可以将谷歌协议缓冲区编译器（protoc）生成的消息类转换为Netty编解码器。请查看<a href="http://netty.io/3.5/xref/org/jboss/netty/example/localtime/package-summary.html" target="_blank" rel="noopener noreferrer">LocalTime</a>示例，该示例展示了如何轻松地从示例协议定义创建高性能二进制协议客户端和服务器。</p><h2 id="http" tabindex="-1"><a class="header-anchor" href="#http"><span>http</span></a></h2><h3 id="http服务端" tabindex="-1"><a class="header-anchor" href="#http服务端"><span>http服务端</span></a></h3><p>开发步骤：</p><ol><li>ServerBootstrap注册bossGroup、workerGroup两个事件循环组；</li><li>将Channel指定为<code>NioServerSocketChannel</code>类型，并关联自定义的初始化器<code>ChannelInitializer</code>。 <ol><li>重写<code>initChannel()</code>自定义注册处理器，这里使用<code>SimpleChannelInboundHandler</code>抽象类，<code>channelRead0()</code>方法可以接收客户端的所有请求。</li></ol></li></ol>`,55)),o(c,{id:"424",data:[{id:"自定义处理器"},{id:"初始化器"},{id:"main"}]},{title0:e(({value:t,isActive:p})=>a[4]||(a[4]=[s("自定义处理器")])),title1:e(({value:t,isActive:p})=>a[5]||(a[5]=[s("初始化器")])),title2:e(({value:t,isActive:p})=>a[6]||(a[6]=[s("main")])),tab0:e(({value:t,isActive:p})=>a[7]||(a[7]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("buffer"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ByteBuf")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("buffer"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Unpooled")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ChannelHandlerContext")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"SimpleChannelInboundHandler")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("handler"),n("span",{class:"token punctuation"},"."),s("codec"),n("span",{class:"token punctuation"},"."),s("http"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token operator"},"*")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"CharsetUtil")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("net"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"URI")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"NettyServerHandler01"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"SimpleChannelInboundHandler"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"HttpObject"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"//channelRead0()方法：接收客户端请求，并且作出响应；类似于 Servlet 中的 doGet()、doPost() 等方法")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"channelRead0"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ChannelHandlerContext"),s(" ctx"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"HttpObject"),s(" msg"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("msg "),n("span",{class:"token keyword"},"instanceof"),s(),n("span",{class:"token class-name"},"HttpRequest"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token class-name"},"HttpRequest"),s(" httpRequest "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HttpRequest"),n("span",{class:"token punctuation"},")"),s("msg"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token class-name"},"URI"),s(" uri "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"URI"),n("span",{class:"token punctuation"},"("),s("httpRequest"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"uri"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),n("span",{class:"token string"},'"/favicon.ico"'),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"equals"),n("span",{class:"token punctuation"},"("),s(" uri"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"channelRead0 invoke..."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token comment"},"// ByteBuf对象: 定义响应的内容")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token class-name"},"ByteBuf"),s(" content "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Unpooled"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"copiedBuffer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hello World Netty"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"CharsetUtil"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"UTF_8"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token comment"},"// FullHttpResponse对象：响应对象，定义响应的具体信息")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token class-name"},"FullHttpResponse"),s(" response "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DefaultFullHttpResponse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HttpVersion"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"HTTP_1_1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"HttpResponseStatus"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"OK"),n("span",{class:"token punctuation"},","),s(" content"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                response"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"headers"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HttpHeaderNames"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"CONTENT_TYPE"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"text/plain"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token comment"},"// content.readableBytes() 设置响应头响应内容长度")]),s(`
`),n("span",{class:"line"},[s("                response"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"headers"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HttpHeaderNames"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"CONTENT_LENGTH"),n("span",{class:"token punctuation"},","),s(" content"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readableBytes"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token comment"},"//将响应 返回给客户端")]),s(`
`),n("span",{class:"line"},[s("                ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeAndFlush"),n("span",{class:"token punctuation"},"("),s("response"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// 当增加新的处理器时，触发此方法")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"handlerAdded"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ChannelHandlerContext"),s(" ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"1.handlerAdded(),增加了新的处理器..."'),s(),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"handlerAdded"),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// 当通道被注册到一个事件循环组EventLoop上时，执行此方法")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"channelRegistered"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ChannelHandlerContext"),s(" ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"2.channelRegistered(),通道被注册..."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channelRegistered"),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// 当通道处于活跃状态（连接到某个远端，可以收发数据）时，执行此方法")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"channelActive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ChannelHandlerContext"),s(" ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"3.channelActive(),通道连接到了远端，处于活跃状态..."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channelActive"),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// 当通道处于非活跃状态（与远端断开了连接）时，执行此方法")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"channelInactive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ChannelHandlerContext"),s(" ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"4.channelInactive(),通道远端断开了连接，处于非活跃状态... "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channelInactive"),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// 当通道被取消注册时，执行此方法")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"channelUnregistered"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ChannelHandlerContext"),s(" ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"5.channelUnregistered(),通道被取消了注册..."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channelUnregistered"),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// 当程序发生异常时，执行此方法")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"exceptionCaught"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ChannelHandlerContext"),s(" ctx"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Throwable"),s(" cause"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        cause"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"printStackTrace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,null,-1)])),tab1:e(({value:t,isActive:p})=>a[8]||(a[8]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"NettyServerInitializer01"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"ChannelInitializer"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"SocketChannel"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"initChannel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"SocketChannel"),s(" sc"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"ChannelPipeline"),s(" pipeline "),n("span",{class:"token operator"},"="),s(" sc"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pipeline"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 加入netty提供的处理器。语法：pipeline.addLast(定义处理器的名字,处理器);")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// HttpServerCodec: 对请求和响应进行编码、解码")]),s(`
`),n("span",{class:"line"},[s("        pipeline"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addLast"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"HttpServerCodec"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"HttpServerCodec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 增加自定义处理器 NettyServerHandler ，用于实际处理请求，并给出响应")]),s(`
`),n("span",{class:"line"},[s("        pipeline"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addLast"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"NettyServerHandler01"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"NettyServerHandler01"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,null,-1)])),tab2:e(({value:t,isActive:p})=>a[9]||(a[9]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"NettyServer01"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 1.初始化事件循环组")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"EventLoopGroup"),s(" bossGroup "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"NioEventLoopGroup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"EventLoopGroup"),s(" workerGroup "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"NioEventLoopGroup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token class-name"},"ServerBootstrap"),s(" serverBootstrap "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ServerBootstrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// 将bossGroup和workerGroup注册到服务端的Channel上，并注册一个服务端的初始化器NettyServerInitializer")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// 该初始化器中的initChannel()方法，会在连接被注册后立刻执行；最后将端口号绑定到8080")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token class-name"},"ChannelFuture"),s(" channelFuture "),n("span",{class:"token operator"},"="),s(" serverBootstrap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"group"),n("span",{class:"token punctuation"},"("),s("bossGroup"),n("span",{class:"token punctuation"},","),s(" workerGroup"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("                    "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"NioServerSocketChannel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"childHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"NettyServerInitializer01"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("                    "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"bind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"8080"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sync"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            channelFuture"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"closeFuture"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sync"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Exception"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            e"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"printStackTrace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"finally"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            bossGroup"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shutdownGracefully"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            workerGroup"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shutdownGracefully"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,null,-1)])),_:1}),a[12]||(a[12]=l('<h3 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h3><p>服务端与客户端</p><h3 id="文件传输" tabindex="-1"><a class="header-anchor" href="#文件传输"><span>文件传输</span></a></h3><h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket"><span>socket</span></a></h2>',4))])}const h=i(d,[["render",m],["__file","Netty.html.vue"]]),y=JSON.parse('{"path":"/JavaEE/Netty.html","title":"Netty","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"使用指南","slug":"使用指南","link":"#使用指南","children":[{"level":3,"title":"Discard 服务端","slug":"discard-服务端","link":"#discard-服务端","children":[]},{"level":3,"title":"Echo 服务端","slug":"echo-服务端","link":"#echo-服务端","children":[]},{"level":3,"title":"Time Server","slug":"time-server","link":"#time-server","children":[]},{"level":3,"title":"Time Client","slug":"time-client","link":"#time-client","children":[]},{"level":3,"title":"处理基于流的传输","slug":"处理基于流的传输","link":"#处理基于流的传输","children":[]},{"level":3,"title":"使用对象而不是ByteBuf","slug":"使用对象而不是bytebuf","link":"#使用对象而不是bytebuf","children":[]}]},{"level":2,"title":"底层设计","slug":"底层设计","link":"#底层设计","children":[{"level":3,"title":"丰富的Buffer数据结构","slug":"丰富的buffer数据结构","link":"#丰富的buffer数据结构","children":[]},{"level":3,"title":"通用异步I/O API","slug":"通用异步i-o-api","link":"#通用异步i-o-api","children":[]},{"level":3,"title":"基于拦截链模式的事件模型","slug":"基于拦截链模式的事件模型","link":"#基于拦截链模式的事件模型","children":[]},{"level":3,"title":"其它组件","slug":"其它组件","link":"#其它组件","children":[]},{"level":3,"title":"Google Protocol Buffer Integration","slug":"google-protocol-buffer-integration","link":"#google-protocol-buffer-integration","children":[]}]},{"level":2,"title":"http","slug":"http","link":"#http","children":[{"level":3,"title":"http服务端","slug":"http服务端","link":"#http服务端","children":[]},{"level":3,"title":"chat","slug":"chat","link":"#chat","children":[]},{"level":3,"title":"文件传输","slug":"文件传输","link":"#文件传输","children":[]}]},{"level":2,"title":"socket","slug":"socket","link":"#socket","children":[]}],"git":{"updatedTime":1743515333000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":2,"url":"https://github.com/oycm"}]},"filePathRelative":"JavaEE/Netty.md"}');export{h as comp,y as data};
