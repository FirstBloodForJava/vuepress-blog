import{_ as c,c as r,e as p,b as i,d as e,a as n,f as s,r as u,o as d}from"./app-DO9Fsueg.js";const k={};function v(b,a){const o=u("Tabs");return d(),r("div",null,[a[38]||(a[38]=p('<h1 id="springwebflux" tabindex="-1"><a class="header-anchor" href="#springwebflux"><span>SpringWebFlux</span></a></h1><p>Spring框架中包含的原始web框架Spring web MVC是专门为Servlet API和Servlet容器构建的。<code>reactive-stack web框架</code>Spring WebFlux是在5.0版本中添加的。它是完全无阻塞的，支持<a href="https://www.reactive-streams.org/" target="_blank" rel="noopener noreferrer">响应式流</a>回压，并运行在诸如Netty， Undertow和Servlet 3.1+容器之类的服务器上。</p><h2 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍"><span>1.介绍</span></a></h2><p>Spring WebFlux为什么被创建？</p><p>部分答案是需要一个非阻塞的web堆栈来处理少量线程的并发性，并使用更少的硬件资源进行扩展。Servlet 3.1确实为非阻塞I/O提供了一个API。然而，使用它会远离Servlet API的其他部分，其中契约是同步的（Filter, Servlet）或阻塞的（getParameter, getPart）。这是一个新的公共API作为跨任何非阻塞运行时的基础的动机。这一点很重要，因为服务器（如Netty）在异步、非阻塞领域已经建立起来了。</p><p>答案的另一部分是函数式编程。就像在Java 5中添加注释创造了机会（比如带注释的REST控制器或单元测试）一样，在Java 8中添加lambda表达式也为Java中的函数式API创造了机会。这对于非阻塞应用程序和延续风格的api（如<code>CompletableFuture</code>和<a href="http://reactivex.io/" target="_blank" rel="noopener noreferrer">ReactiveX</a>所推广的）来说是一个福音，它们允许异步逻辑的声明性组合。在编程模型层面，Java 8使Spring WebFlux能够在带注释的控制器之外提供功能性的web端点。</p><h3 id="reactive的定义" tabindex="-1"><a class="header-anchor" href="#reactive的定义"><span>Reactive的定义</span></a></h3><p>术语<code>reactive</code>指的是围绕响应变化而构建的编程模型——网络组件响应I/O事件，UI控制器响应鼠标事件等等。从这个意义上说，非阻塞是响应性的，因为我们现在处于对操作完成或数据可用时的通知作出反应的模式，而不是被阻塞。</p><p>Spring团队还将另一个重要的机制与<code>reactive</code>联系起来，那就是非阻塞回压(non-blocking back pressure)。在同步、命令式代码中，阻塞调用作为一种自然形式的反压力，迫使调用者等待。在非阻塞代码中，控制事件的速率变得非常重要，这样快速生产者就不会压倒其目标。</p><p>响应式流是一个<a href="https://github.com/reactive-streams/reactive-streams-jvm/blob/master/README.md#specification" target="_blank" rel="noopener noreferrer">小规范</a>（也在<a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.html" target="_blank" rel="noopener noreferrer">Java 9中采用</a>），它定义了带背压的异步组件之间的交互。例如，数据存储库（充当发布者<a href="https://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Publisher.html" target="_blank" rel="noopener noreferrer">Publisher</a>）可以生成数据，然后HTTP服务器（充当订阅者<a href="https://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Subscriber.html" target="_blank" rel="noopener noreferrer">Subsciber</a>）可以将这些数据写入响应。响应式流的主要目的是让订阅者控制发布者生成数据的快慢。</p><p>如果出版商publisher不能放慢速度怎么办？</p><p><strong>响应式流的目的只是建立机制和边界。如果发布者不能减慢速度，它必须决定是缓冲、删除还是失败。</strong></p><h3 id="reactive-api" tabindex="-1"><a class="header-anchor" href="#reactive-api"><span>Reactive API</span></a></h3><p>响应式流在互操作性方面扮演着重要的角色。它对库和基础设施组件很有兴趣，但作为应用程序API用处不大，因为它太底层了。应用程序需要一个更高级、功能更丰富的API来组成异步逻辑——类似于Java 8流API，但不仅仅是用于集合。这就是响应式库所扮演的角色。</p><p><a href="https://github.com/reactor/reactor" target="_blank" rel="noopener noreferrer">Reactor</a>是Spring WebFlux首选的响应式库。它提供了<code>Mono</code>和<code>Flux</code>API类型来处理0..1的数据序列（Mono单声道）和0..N （Flux）通过一组丰富的操作符与<a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="noopener noreferrer">ReactiveX操作符词汇表</a>保持一致。反应器是一个反应流库，因此，它的所有操作符都支持非阻塞背压。Reactor非常关注服务器端Java。它是与Spring密切合作开发的。</p><p>WebFlux需要Reactor作为核心依赖项，但它可以通过Reactive Streams与其他Reactive库互操作。一般来说，WebFlux API接受一个普通的<code>Publisher</code>作为输入，在内部将其适配为一个Reactor类型，使用它，然后返回一个<code>Flux</code>或一个<code>Mono</code>作为输出。因此，您可以将任何<code>Publisher</code>作为输入传递，并且可以对输出应用操作，但是您需要调整输出以与另一个响应性库一起使用。只要可行（例如，带注释的控制器），WebFlux就会透明地适应RxJava或其他响应式库的使用。</p><h3 id="programming-models" tabindex="-1"><a class="header-anchor" href="#programming-models"><span>Programming Models</span></a></h3><p><code>spring-web</code>模块包含了Spring WebFlux的响应式基础，包括HTTP抽象、支持服务器的响应式流适配器adapter、编解码器，以及一个与Servlet API相当的核心<code>WebHandler</code> API，但使用了非阻塞协议。</p><p>在此基础上，Spring WebFlux提供了两种编程模型可供选择：</p><ul><li><p><strong>Annotated Controllers</strong>：与Spring MVC一致，并基于来自Spring -web模块的相同注解。Spring MVC和WebFlux控制器都支持响应式（Reactor和RxJava）返回类型，因此，区分它们并不容易。一个显著的区别是WebFlux也支持响应式的@RequestBody参数。</p></li><li><p><strong>Functional Endpoints</strong>：基于lambda的轻量级函数式编程模型。您可以将其视为一个小型库或一组实用程序，应用程序可以使用它们来路由和处理请求。带注释控制器的最大区别在于，应用程序从头到尾负责请求处理，而不是通过注释声明意图并被回调。</p></li></ul><h3 id="applicability" tabindex="-1"><a class="header-anchor" href="#applicability"><span>Applicability</span></a></h3><p>选择SpringMVC还是WebFlux？</p><p>这是一个很自然的问题，但却建立了一个不合理的二分法。实际上，两者共同努力扩大了可用选项的范围。这两者是为了彼此的连续性和一致性而设计的，它们是并排可用的，每一方的反馈对双方都有利。下图显示了两者之间的关系，它们的共同点，以及各自支持的独特之处：</p><figure><img src="http://47.101.155.205/image-20250323184854083.png" alt="image-20250323184854083" tabindex="0" loading="lazy"><figcaption>image-20250323184854083</figcaption></figure><p>建议考虑以下几点：</p><ul><li><p>如果你有一个运行良好的Spring MVC应用程序，则不需要进行更改。命令式编程是编写、理解和调试代码的最简单方法。您有最多的库选择，因为从历史上看，大多数库都是阻塞的。</p></li><li><p>如果你已经在购买一个非阻塞的web堆栈，Spring WebFlux提供了与该领域其他产品相同的执行模型优势，还提供了服务器选择（Netty、Tomcat、Jetty、Undertow和Servlet 3.1+容器）、编程模型选择（带注释的控制器和功能web端点）和响应式库选择（反应器、RxJava或其他）。</p></li><li><p>如果你对使用Java 8 lambda或Kotlin的轻量级、功能性web框架感兴趣，你可以使用Spring WebFlux功能性web端点。对于需求不太复杂的小型应用程序或微服务来说，这也是一个不错的选择，这些应用程序或微服务可以从更高的透明度和控制中受益。</p></li><li><p>在微服务架构中，你可以混合使用Spring MVC或Spring WebFlux控制器，也可以使用Spring WebFlux功能端点。在这两个框架中支持相同的基于注释的编程模型，可以更容易地重用知识，同时也可以为正确的工作选择正确的工具。</p></li><li><p>评估应用程序的一个简单方法是检查它的依赖项。如果您有阻塞持久性API（JPA、JDBC）或网络API要使用，Spring MVC至少是通用架构的最佳选择。Reactor和RxJava在单独的线程上执行阻塞调用在技术上是可行的，但是你将无法充分利用非阻塞web堆栈。</p></li><li><p>如果你有一个调用远程服务的Spring MVC应用程序，请尝试响应式WebClient。您可以直接从Spring MVC控制器方法返回响应类型（Reactor、RxJava或其他）。每个呼叫的延迟时间越长，或者呼叫之间的相互依赖性越强，好处就越显著。Spring MVC控制器也可以调用其他响应式组件。</p></li><li><p>如果您有一个大型团队，请记住，在向非阻塞、函数式和声明式编程转变的过程中，学习曲线是陡峭的。一种不需要完全切换的实用方法是使用响应式WebClient。除此之外，从小事做起，衡量收益。我们预计，对于广泛的应用来说，这种转变是不必要的。如果您不确定要寻找什么好处，可以从了解非阻塞I/O是如何工作的（例如，单线程Node.js上的并发性）及其效果开始。</p></li></ul><h3 id="servers" tabindex="-1"><a class="header-anchor" href="#servers"><span>Servers</span></a></h3><p>Spring WebFlux支持Tomcat、Jetty、Servlet 3.1+容器，以及Netty和Undertow等非Servlet运行时容器。所有服务器都适应低级的公共API，以便跨服务器支持高级编程模型。</p><p>Spring WebFlux没有内置启动或停止服务器的支持。然而，从Spring配置和WebFlux基础设施中组装一个应用程序，并通过几行代码运行它是很容易的。</p><p>Spring Boot有一个WebFlux starter可以自动执行这些步骤。默认情况下，starter使用Netty，但通过更改Maven或Gradle依赖项，很容易切换到Tomcat、Jetty或Undertow。Spring Boot默认使用Netty，因为它更广泛地用于异步、非阻塞空间，并允许客户端和服务器共享资源。</p><p>Tomcat和Jetty可以与Spring MVC和WebFlux一起使用。但是请记住，它们的使用方式是非常不同的。Spring MVC依赖于Servlet阻塞I/O，并允许应用程序在需要时直接使用Servlet API。Spring WebFlux依赖于Servlet 3.1非阻塞I/O，并使用底层适配器后面的Servlet API。它不暴露于直接使用。</p><p>对于Undertow， Spring WebFlux直接使用Undertow API，而不使用Servlet API。</p><h3 id="performance" tabindex="-1"><a class="header-anchor" href="#performance"><span>Performance</span></a></h3><p>性能有许多特点和意义。响应式和非阻塞通常不会使应用程序运行得更快。在某些情况下，它们可以（例如，如果使用WebClient并行执行远程调用）。总的来说，非阻塞方式需要更多的工作，这可能会稍微增加所需的处理时间。</p><p>响应式和非阻塞的主要预期好处是能够使用固定数量的小线程和更少的内存进行扩展。这使得应用程序在负载下更有弹性，因为它们以更可预测的方式扩展。但是，为了观察到这些好处，您需要有一定的延迟（包括缓慢和不可预测的网络I/O）。这就是响应式堆栈开始显示其优势的地方，而且差异可能是巨大的。</p><h3 id="concurrency-model" tabindex="-1"><a class="header-anchor" href="#concurrency-model"><span>Concurrency Model</span></a></h3><p>Spring MVC和Spring WebFlux都支持带注释的控制器，但是在并发模型和对阻塞和线程的默认假设上有一个关键的区别。</p><p>在Spring MVC（一般的servlet应用程序）中，假定应用程序可以<code>阻塞当前线程</code>（例如，远程调用）。出于这个原因，servlet容器使用一个大的线程池来吸收请求处理期间潜在的阻塞。</p><p>在Spring WebFlux（一般的非阻塞服务器）中，假定应用程序不会阻塞。因此，非阻塞服务器使用一个小的、固定大小的线程池（事件循环工作者）来处理请求。</p><p>“伸缩to scale”和“少量线程(small number of threads)”听起来可能是矛盾的，但从不阻塞当前线程（而是依赖回调）意味着您不需要额外的线程，因为没有阻塞调用需要吸收。</p><p><strong>调用阻塞API</strong>：如果确实需要使用阻塞库怎么办？Reactor和RxJava都提供了<code>publishOn</code>操作符，以便在不同的线程上继续处理。这意味着有一个很容易的逃生口。但是请记住，阻塞api并不适合这种并发模型。</p><p><strong>Mutable State(可变状态)</strong>：在Reactor和RxJava中，可以通过操作符声明逻辑。在运行时，将形成一个响应式管道，其中在不同的阶段按顺序处理数据。这样做的一个关键好处是，它使应用程序不必保护可变状态，因为该管道中的应用程序代码永远不会并发调用。</p><p><strong>Threading Model(线程模型)：</strong></p><ul><li><p>在一个“普通”的Spring WebFlux服务器上（例如，没有数据访问，也没有其他可选的依赖项），你可以期望一个线程用于服务器，其他几个线程用于处理请求（通常与CPU内核数量一样多）。然而，Servlet容器可以从更多线程开始（例如，Tomcat上有10个线程），以支持Servlet（阻塞）I/O和Servlet 3.1（非阻塞）I/O使用。</p></li><li><p>响应式WebClient以事件循环的方式运行。因此，您可以看到与此相关的少量固定数量的处理线程（例如，带有Reactor Netty连接器的<code>reactor-http-nio-</code>）。但是，如果Reactor Netty用于客户端和服务器，则两者默认共享事件循环资源。</p></li><li><p>Reactor和RxJava提供了线程池抽象（称为调度器），与用于将处理切换到不同线程池的publishOn操作符一起使用。调度器的名称暗示了特定的并发策略—例如，“并行parallel”（用于线程数量有限的cpu绑定工作）或“弹性elastic”（用于线程数量大量的I/O绑定工作）。如果看到这样的线程，则意味着某些代码正在使用特定的线程池Scheduler策略。</p></li><li><p>数据访问库和其他第三方依赖也可以创建和使用它们自己的线程。</p></li></ul><p><strong>Configuring</strong>：Spring 框架不支持启动和停止服务器。要为服务器配置线程模型，需要使用特定于服务器的配置API，或者使用Spring Boot，请检查每个服务器的Spring Boot配置选项。您可以直接配置 WebClient。</p><h2 id="_2-reactive-core" tabindex="-1"><a class="header-anchor" href="#_2-reactive-core"><span>2.Reactive Core</span></a></h2><p><strong>HttpHandler</strong>：HTTP请求处理的基本协议，包括非阻塞I/O和响应式流回压，以及反应器Netty、Undertow、Tomcat、Jetty和任何Servlet 3.1+容器的适配器。</p><p><strong>WebHandler API</strong>：用于请求处理的通用web API，在此基础上构建具体的编程模型，如带注释的控制器和功能端点。</p><p>对于客户端，有一个基本的<code>ClientHttpConnector</code>契约，用于执行具有非阻塞I/O和响应式流回压的HTTP请求，以及用于Reactor Netty和响应式Jetty HttpClient的适配器。应用程序中使用的高级WebClient建立在这个基本契约之上。</p><p>对于客户机和服务器，用于HTTP请求和响应内容的序列化和反序列化的编解码器(codecs)。</p><h3 id="httphandler" tabindex="-1"><a class="header-anchor" href="#httphandler"><span>HttpHandler</span></a></h3><p>HttpHandler是一个简单的抽象，用一个方法来处理请求和响应。它是有意最小化的，其主要和唯一的目的是对不同的HTTP服务器API进行最小的抽象。</p><table><thead><tr><th>Server name</th><th>Server API</th><th>Reactive支持</th></tr></thead><tbody><tr><td>Netty</td><td>Netty API</td><td><a href="https://github.com/reactor/reactor-netty" target="_blank" rel="noopener noreferrer">Reactor Netty</a></td></tr><tr><td>Undertow</td><td>Undertow API</td><td>spring-web: Undertow to Reactive Streams bridge</td></tr><tr><td>Tomcat</td><td>非阻塞的Servlet 3.1; Tomcat API to read and write ByteBuffers vs byte[]</td><td>spring-web: Servlet 3.1 non-blocking I/O to Reactive Streams bridge</td></tr><tr><td>Jetty</td><td>非阻塞的Servlet 3.1; Jetty API to write ByteBuffers vs byte[]</td><td>spring-web: Servlet 3.1 non-blocking I/O to Reactive Streams bridge</td></tr><tr><td>Servlet 3.1 容器</td><td>非阻塞的Servlet 3.1</td><td>spring-web: Servlet 3.1 non-blocking I/O to Reactive Streams bridge</td></tr></tbody></table><p>Server的依赖：</p><table><thead><tr><th>Server name</th><th>Group id</th><th>Artifact name</th></tr></thead><tbody><tr><td>Reactor Netty</td><td>io.projectreactor.netty</td><td>reactor-netty</td></tr><tr><td>Undertow</td><td>io.undertow</td><td>undertow-core</td></tr><tr><td>Tomcat</td><td>org.apache.tomcat.embed</td><td>tomcat-embed-core</td></tr><tr><td>Jetty</td><td>org.eclipse.jetty</td><td>jetty-server, jetty-servlet</td></tr></tbody></table><p>HttpHandler适配器和Server API的代码示例：</p>',56)),i(o,{id:"357",data:[{id:"Reactor Netty"},{id:"Undertow"},{id:"Tomcat"},{id:"Jetty"},{id:"Servlet 3.1+容器"}]},{title0:e(({value:t,isActive:l})=>a[0]||(a[0]=[s("Reactor Netty")])),title1:e(({value:t,isActive:l})=>a[1]||(a[1]=[s("Undertow")])),title2:e(({value:t,isActive:l})=>a[2]||(a[2]=[s("Tomcat")])),title3:e(({value:t,isActive:l})=>a[3]||(a[3]=[s("Jetty")])),title4:e(({value:t,isActive:l})=>a[4]||(a[4]=[s("Servlet 3.1+容器")])),tab0:e(({value:t,isActive:l})=>a[5]||(a[5]=[n("div",{class:"language-java","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"HttpHandler"),s(" handler "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},".")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"ReactorHttpHandlerAdapter"),s(" adapter "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ReactorHttpHandlerAdapter"),n("span",{class:"token punctuation"},"("),s("handler"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"HttpServer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"create"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"host"),n("span",{class:"token punctuation"},"("),s("host"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"port"),n("span",{class:"token punctuation"},"("),s("port"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),s("adapter"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"bind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"block"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>a[6]||(a[6]=[n("div",{class:"language-java","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"HttpHandler"),s(" handler "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},".")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"UndertowHttpHandlerAdapter"),s(" adapter "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"UndertowHttpHandlerAdapter"),n("span",{class:"token punctuation"},"("),s("handler"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"Undertow"),s(" server "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Undertow"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"builder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addHttpListener"),n("span",{class:"token punctuation"},"("),s("port"),n("span",{class:"token punctuation"},","),s(" host"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setHandler"),n("span",{class:"token punctuation"},"("),s("adapter"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"build"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("server"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])])],-1)])),tab2:e(({value:t,isActive:l})=>a[7]||(a[7]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"HttpHandler"),s(" handler "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},".")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"Servlet"),s(" servlet "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"TomcatHttpHandlerAdapter"),n("span",{class:"token punctuation"},"("),s("handler"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"Tomcat"),s(" server "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Tomcat"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"File"),s(" base "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"File"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getProperty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"java.io.tmpdir"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"Context"),s(" rootContext "),n("span",{class:"token operator"},"="),s(" server"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},","),s(" base"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getAbsolutePath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"Tomcat"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addServlet"),n("span",{class:"token punctuation"},"("),s("rootContext"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"main"'),n("span",{class:"token punctuation"},","),s(" servlet"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("rootContext"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addServletMappingDecoded"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"/"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"main"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("server"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setHost"),n("span",{class:"token punctuation"},"("),s("host"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("server"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setPort"),n("span",{class:"token punctuation"},"("),s("port"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("server"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab3:e(({value:t,isActive:l})=>a[8]||(a[8]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"HttpHandler"),s(" handler "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},".")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"Servlet"),s(" servlet "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"JettyHttpHandlerAdapter"),n("span",{class:"token punctuation"},"("),s("handler"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"Server"),s(" server "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Server"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"ServletContextHandler"),s(" contextHandler "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ServletContextHandler"),n("span",{class:"token punctuation"},"("),s("server"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("contextHandler"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addServlet"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ServletHolder"),n("span",{class:"token punctuation"},"("),s("servlet"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"/"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("contextHandler"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"ServerConnector"),s(" connector "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ServerConnector"),n("span",{class:"token punctuation"},"("),s("server"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("connector"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setHost"),n("span",{class:"token punctuation"},"("),s("host"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("connector"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setPort"),n("span",{class:"token punctuation"},"("),s("port"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("server"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addConnector"),n("span",{class:"token punctuation"},"("),s("connector"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("server"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab4:e(({value:t,isActive:l})=>a[9]||(a[9]=[n("p",null,"作为war包部署到Servlet3.1+容器，在WAR中扩展和包含AbstractReactiveWebInitializer。这个类用ServletHttpHandlerAdapter包装了一个HttpHandler，并将其注册为Servlet。",-1)])),_:1}),a[39]||(a[39]=p('<h3 id="webhandler-api" tabindex="-1"><a class="header-anchor" href="#webhandler-api"><span>WebHandler API</span></a></h3><p><code>org.springframework.web.server</code>包建立在<code>HttpHandler</code>抽象之上，提供一个通用的web API，通过多个<code>WebExceptionHandler</code>、多个<code>WebFilter</code>和一个<code>WebHandler</code>组件组成的链来处理请求。这个链可以通过<code>WebHttpHandlerBuilder</code>简单地指向一个自动检测组件的Spring<code>ApplicationContext</code>，通过向构建器注册组件来组合在一起。</p><p>WebHandler API旨在提供更广泛的web应用程序中常用的功能集：</p><ul><li>具有属性的用户Session。</li><li>请求属性。</li><li>解析请求的<code>Locale</code>或<code>Principal</code>。</li><li>访问已解析和缓存的表单数据。</li><li>multipart data(二进制)数据。</li><li>等</li></ul><p><code>WebHttpHandlerBuilder</code>可以在Spring<code>ApplicationContext</code>中自动检测的组件：</p><table><thead><tr><th>Bean名称</th><th>Bean类型</th><th>数量</th><th>作用</th></tr></thead><tbody><tr><td>任何</td><td>WebExceptionHandler</td><td>0-N</td><td>为来自WebFilter链和目标WebHandler异常提供处理</td></tr><tr><td>任何</td><td>WebFilter</td><td>0-N</td><td>对目标WebHandler应用拦截</td></tr><tr><td>webHandler</td><td>WebHandler</td><td>1</td><td>处理请求</td></tr><tr><td>webSessionManager</td><td>WebSessionManager</td><td>0-1</td><td>通过ServerWebExchange上的方法公开的WebSession实例的管理器。默认DefaultWebSessionManager</td></tr><tr><td>serverCodecConfigurer</td><td>ServerCodecConfigurer</td><td>0-1</td><td>为了访问HttpMessageReader实例，以解析表单数据和多部分数据，然后通过ServerWebExchange上的方法公开。默认为ServerCodecConfigurer.create()。</td></tr><tr><td>localeContextResolver</td><td>LocaleContextResolver</td><td>0-1</td><td>通过ServerWebExchange上的一个方法公开LocaleContext的解析器。默认AcceptHeaderLocaleContextResolver。</td></tr><tr><td>forwardedHeaderTransformer</td><td>ForwardedHeaderTransformer</td><td>0-1</td><td>用于处理转发的类型标头，要么提取并删除它们，要么仅删除它们。默认情况下不使用</td></tr></tbody></table>',6)),i(o,{id:"538",data:[{id:"Form Data"},{id:"Multipart Data"}]},{title0:e(({value:t,isActive:l})=>a[10]||(a[10]=[s("Form Data")])),title1:e(({value:t,isActive:l})=>a[11]||(a[11]=[s("Multipart Data")])),tab0:e(({value:t,isActive:l})=>a[12]||(a[12]=[n("div",{class:"language-java","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// ServerWebExchange 提供获取表单数据的方法")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"Mono"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"MultiValueMap"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"getFormData"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])])],-1),n("p",null,[n("code",null,"DefaultServerWebExchange"),s("使用配置的"),n("code",null,"HttpMessageReader"),s("将表单数据("),n("code",null,"application/x-www-form-urlencoded"),s(")解析为"),n("code",null,"MultiValueMap"),s("。默认情况下，将"),n("code",null,"FormHttpMessageReader"),s("配置为供"),n("code",null,"ServerCodecConfigurer"),s("bean使用。")],-1)])),tab1:e(({value:t,isActive:l})=>a[13]||(a[13]=[n("div",{class:"language-java","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// ServerWebExchange 提供获取Multipart Data的方法")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"Mono"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"MultiValueMap"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Part"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"getMultipartData"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])])],-1),n("p",null,[n("code",null,"DefaultServerWebExchange"),s("使用配置的HttpMessageReader<MultiValueMap<String, Part>>将"),n("code",null,"multipart/form-data"),s("内容解析为"),n("code",null,"MultiValueMap"),s("。目前，"),n("a",{href:"https://github.com/synchronoss/nio-multipart",target:"_blank",rel:"noopener noreferrer"},"Synchronoss NIO Multipart"),s("是唯一支持的第三方库，也是我们所知道的唯一能够对多部分请求进行非阻塞解析的库。它是通过"),n("code",null,"ServerCodecConfigurer"),s(" bean启用的。")],-1),n("p",null,[s("要以流方式解析多部分数据，你可以使用HttpMessageReader<Part>返回的Flux<Part>。例如，在带注释的控制器中，使用@RequestPart意味着通过名称对各个部分进行类似Map的访问，因此需要完整地解析多部分数据。相反，你可以使用@RequestBody将内容解码为Flux<Part>，而不需要收集到"),n("code",null,"MultiValueMap"),s("。")],-1),n("p",null,null,-1)])),_:1}),a[40]||(a[40]=p('<p>当请求通过代理（如负载平衡器）时，主机、端口和方案可能会发生变化。从客户机的角度来看，创建指向正确的主机、端口和模式的链接是一个挑战。</p><p><a href="https://tools.ietf.org/html/rfc7239" target="_blank" rel="noopener noreferrer">RFC7329</a>定义了代理可以使用原始信息的Forwarded请求头，也有其它非标准头：X-Forwarded-Host、X-Forwarded-Port、X-Forwarded-Proto、X-Forwarded-Prefix、X-Forwarded-Ssl。</p><p><code>ForwardedHeaderTransformer</code>是一个组件，它根据转发的请求头修改请求的主机、端口和方案，然后删除这些报头。如果将其声明为名称为<code>forwardedHeaderTransformer</code>的bean，它将被检测并使用。</p><p>对于转发的标头有一些安全方面的考虑，因为应用程序无法知道标头是由代理添加的，还是由恶意客户端添加的。这就是为什么应该将信任边界上的代理配置为删除来自外部的不受信任的转发流量。可以配置<code>ForwardedHeaderTransformer</code>的<code>removeOnly=true</code>，在这种情况下，它会删除但不使用标头。</p><p><strong>在5.1中，<code>ForwardedHeaderFilter</code>已弃用，并被<code>ForwardedHeaderTransformer</code>所取代，因此可以在创建交换之前更早地处理转发的报头。如果无论如何都配置了过滤器，则将其从过滤器列表中取出，而使用ForwardedHeaderTransformer。</strong></p><h3 id="filters" tabindex="-1"><a class="header-anchor" href="#filters"><span>Filters</span></a></h3><p>在<code>WebHandler API</code>中，可以使用<code>WebFilter</code>在过滤器和目标WebHandler处理链的其余部分之前和之后应用拦截式逻辑。当使用WebFlux配置时，注册WebFilter很简单，只需将其声明为Spring bean，并（可选地）通过在bean声明中使用<code>@Order</code>或实现<code>Ordered</code>来表示优先级。</p><p>CORS过滤器与Spring Security一起使用时，必须在Spring Security的过滤器链之前生效。</p><h3 id="exceptions" tabindex="-1"><a class="header-anchor" href="#exceptions"><span>Exceptions</span></a></h3><p>在WebHandler API中，可以使用<code>WebExceptionHandler</code>来处理来自WebFilter实例链和目标WebHandler的异常。当使用WebFlux配置时，注册一个WebExceptionHandler非常简单，只需将其声明为一个Spring bean，并（可选地）通过在bean声明中使用<code>@Order</code>或实现<code>Ordered</code>来表示优先级。</p><table><thead><tr><th>WebExceptionHandler</th><th>作用</th></tr></thead><tbody><tr><td>ResponseStatusExceptionHandler</td><td>通过设置对异常的HTTP状态码的响应，提供对ResponseStatusException类型异常的处理。</td></tr><tr><td>WebFluxResponseStatusExceptionHandler</td><td>ResponseStatusExceptionHandler的扩展，也可以确定任何异常上的@ResponseStatus注释的HTTP状态代码。</td></tr></tbody></table><h3 id="codecs" tabindex="-1"><a class="header-anchor" href="#codecs"><span>Codecs</span></a></h3><p><code>spring-web</code>和<code>spring-core</code>模块支持通过无阻塞的I/O和响应式流回压(Reactive Streams back pressure.)，将字节内容序列化(serializing)和反序列化(deserializing)到更高级别的对象。下面描述了这种支持：</p><ul><li>Encoder(org.springframework.core.codec)和Decoder是独立于HTTP对内容进行编码和解码的低级抽象。</li><li>HttpMessageReader和HttpMessageWriter是编码和解码HTTP消息内容的抽象。</li><li>Encoder可以用<code>EncoderHttpMessageWriter</code>包装以适应它在web应用程序中的使用，而Decoder可以用<code>DecoderHttpMessageReader</code>包装。</li><li><code>DataBuffer</code>抽象了不同的字节缓冲区表示(例如Netty <code>ByteBuf</code>， <code>java.nio.ByteBuffer</code>等)，是所有编解码器的工作原理。</li></ul><p>https://docs.spring.io/spring-framework/docs/5.2.6.RELEASE/spring-framework-reference/core.html#databuffers</p><p><code>spring-core</code>模块提供了<code>byte[]</code>、<code>ByteBuffer</code>、<code>DataBuffer</code>、<code>Resource</code>和<code>String</code>编码器和解码器实现。<code>spring-web</code>模块提供<code>Jackson JSON</code>、<code>Jackson Smile</code>、<code>JAXB2</code>、<code>Protocol Buffers</code>和其他编码器和解码器，以及用于表单数据、多部分内容、服务器发送事件等的web-only HTTP消息读取器和写入器实现。</p><p><code>ClientCodecConfigurer</code>和<code>ServerCodecConfigurer</code>通常用于配置和定制要在应用程序中使用的编解码器。</p>',17)),i(o,{id:"655",data:[{id:"Jackson JSON"},{id:"Form Data"},{id:"Multipart"},{id:"Limits"},{id:"Streaming"},{id:"DataBuffer"}]},{title0:e(({value:t,isActive:l})=>a[14]||(a[14]=[s("Jackson JSON")])),title1:e(({value:t,isActive:l})=>a[15]||(a[15]=[s("Form Data")])),title2:e(({value:t,isActive:l})=>a[16]||(a[16]=[s("Multipart")])),title3:e(({value:t,isActive:l})=>a[17]||(a[17]=[s("Limits")])),title4:e(({value:t,isActive:l})=>a[18]||(a[18]=[s("Streaming")])),title5:e(({value:t,isActive:l})=>a[19]||(a[19]=[s("DataBuffer")])),tab0:e(({value:t,isActive:l})=>a[20]||(a[20]=[n("p",null,"当Jackson库存在时，JSON和二进制JSON(Smile)都被支持。",-1),n("p",null,[n("strong",null,"Jackson2Decoder的工作原理如下：")],-1),n("ul",null,[n("li",null,[n("p",null,[s("Jackson的异步、非阻塞解析器用于将字节块流聚合到"),n("code",null,"TokenBuffer"),s("中，每个字节块表示一个JSON对象。")])]),n("li",null,[n("p",null,[s("每个"),n("code",null,"TokenBuffer"),s("被传递给Jackson的"),n("code",null,"ObjectMapper"),s("来创建一个更高级的对象。")])]),n("li",null,[n("p",null,"当解码到单值(single-value)发布者(例如Mono)时，有一个TokenBuffer。")]),n("li",null,[n("p",null,[s("当解码到多值(multi-value)发布者(例如Flux)时，只要接收到足够的字节，每个TokenBuffer就会传递给"),n("code",null,"ObjectMapper"),s("。输入内容可以是JSON数组，如果内容类型是application/stream+ JSON，也可以是"),n("a",{href:"https://en.wikipedia.org/wiki/JSON_streaming",target:"_blank",rel:"noopener noreferrer"},"行分隔的JSON"),s("。")])])],-1),n("p",null,[n("strong",null,"Jackson2Encoder的工作原理如下：")],-1),n("ul",null,[n("li",null,[n("p",null,"对于单值发布者（例如Mono），只需通过ObjectMapper序列化它。")]),n("li",null,[n("p",null,"对于使用application/json的多值(multi-value)发布者，默认情况下使用Flux.collectToList()收集值，然后序列化结果集合。")]),n("li",null,[n("p",null,[s("对于具有流媒体类型(如"),n("code",null,"application/stream+json"),s("或"),n("code",null,"application/stream+x-jackson-smile"),s(")的多值发布者，使用行分隔的json格式分别对每个值进行编码、写入和刷新。")])]),n("li",null,[n("p",null,[s("对于SSE，每个事件调用"),n("code",null,"Jackson2Encoder"),s("，并刷新输出以确保无延迟地交付。")])])],-1),n("p",null,[s("默认情况下，"),n("code",null,"Jackson2Encoder"),s("和"),n("code",null,"Jackson2Decoder"),s("都不支持String类型的元素。相反，默认假设是字符串或字符串序列表示序列化的JSON内容，由"),n("code",null,"CharSequenceEncoder"),s("呈现。如果你需要从Flux<String>呈现一个JSON数组，使用Flux.collectToList()并编码一个Mono<List<String>>。")],-1),n("p",null,null,-1)])),tab1:e(({value:t,isActive:l})=>a[21]||(a[21]=[n("p",null,[n("code",null,"FormHttpMessageReader"),s("和"),n("code",null,"FormHttpMessageWriter"),s("支持解码和编码"),n("code",null,"application/x-www-form-urlencoded"),s("内容。")],-1),n("p",null,[s("在服务器端，表单内容经常需要从多个地方访问，"),n("code",null,"ServerWebExchange"),s("提供了一个专用的"),n("code",null,"getFormData()"),s("方法，该方法通过"),n("code",null,"FormHttpMessageReader"),s("解析内容，然后缓存结果以供重复访问。")],-1),n("p",null,[s("一旦使用了"),n("code",null,"getFormData()"),s("，就不能再从请求体中读取原始内容。出于这个原因，应用程序应该一致地通过"),n("code",null,"ServerWebExchange"),s("访问缓存的表单数据，而不是从原始请求体中读取。")],-1),n("p",null,null,-1)])),tab2:e(({value:t,isActive:l})=>a[22]||(a[22]=[n("p",null,[n("code",null,"MultipartHttpMessageReader"),s("和"),n("code",null,"MultipartHttpMessageWriter"),s("支持解码和编码"),n("code",null,"multipart/form-data"),s("内容。反过来，"),n("code",null,"MultipartHttpMessageReader"),s("将实际解析委托给另一个"),n("code",null,"HttpMessageReader"),s("到Flux<Part>，然后简单地将这些部分收集到"),n("code",null,"MultiValueMap"),s("中。目前实际的解析使用的是"),n("a",{href:"https://github.com/synchronoss/nio-multipart",target:"_blank",rel:"noopener noreferrer"},"Synchronoss NIO Multipart"),s("。")],-1),n("p",null,[s("在可能需要从多个地方访问多部分表单内容的服务器端，"),n("code",null,"ServerWebExchange"),s("提供了一个专用的"),n("code",null,"getMultipartData()"),s("方法，该方法通过"),n("code",null,"MultipartHttpMessageReader"),s("解析内容，然后缓存结果以供重复访问。")],-1),n("p",null,[s("一旦使用了"),n("code",null,"getMultipartData()"),s("，就不能再从请求体中读取原始内容。出于这个原因，应用程序必须始终如一地使用"),n("code",null,"getMultipartData()"),s("来重复地、类似于映射的访问部件，或者依赖于"),n("code",null,"SynchronossPartHttpMessageReader"),s("来一次性访问Flux<Part>。")],-1),n("p",null,null,-1)])),tab3:e(({value:t,isActive:l})=>a[23]||(a[23]=[n("p",null,[s("可以对缓冲部分或全部输入流的"),n("code",null,"Decoder"),s("和"),n("code",null,"HttpMessageReader"),s("实现进行配置，限制要在"),n("code",null,"内存中缓冲的最大字节数"),s("。在某些情况下，发生缓冲是因为输入被聚合并表示为单个对象—例如，具有"),n("code",null,"@RequestBody"),s("的控制器方法 "),n("code",null,"byte[]"),s("、"),n("code",null,"x-www-form-urlencoded"),s("数据等。在分割输入流，例如，分隔的文本、JSON对象流等时，流也可以发生缓冲。对于这些流情况，限制适用于流中与一个对象相关联的字节数。")],-1),n("p",null,[s("要配置缓冲区大小，您可以检查给定的"),n("code",null,"Decoder"),s("或"),n("code",null,"HttpMessageReader"),s("是否公开了"),n("code",null,"maxInMemorySize"),s("属性，如果是，则Javadoc将具有有关默认值的详细信息。在服务器端，"),n("code",null,"ServerCodecConfigurer"),s("提供了一个设置所有编解码器的地方，请参阅HTTP消息编解码器。在客户端，可以在"),n("code",null,"WebClient.Builder"),s("中更改所有编解码器的限制。")],-1),n("p",null,[s("对于多部分解析，"),n("code",null,"maxInMemorySize"),s("属性限制了非文件部分的大小。对于文件部分，它决定了该部分写入磁盘的阈值。对于写入磁盘的文件部分，有一个额外的"),n("code",null,"maxDiskUsagePerPart"),s("属性来限制每个部分的磁盘空间量。还有一个"),n("code",null,"maxParts"),s("属性用于限制多部件请求中的部件总数。要在WebFlux中配置这三个，需要向"),n("code",null,"ServerCodecConfigurer"),s("提供一个预先配置好的"),n("code",null,"MultipartHttpMessageReader"),s("实例。")],-1),n("p",null,null,-1)])),tab4:e(({value:t,isActive:l})=>a[24]||(a[24]=[n("p",null,[s("当流式传输到HTTP响应时(例如，"),n("code",null,"text/event-stream"),s(", "),n("code",null,"application/stream+json"),s(")，定期发送数据是很重要的，以便可靠地检测断开连接的客户端，越早越好。这样的发送可以是一个注释，空SSE事件或任何其他“无操作”数据，可以有效地充当心跳。")],-1),n("p",null,null,-1)])),tab5:e(({value:t,isActive:l})=>a[25]||(a[25]=[n("p",null,[n("code",null,"DataBuffer"),s("是WebFlux中字节缓冲区的表示形式。要理解的关键点是，在一些服务器(如Netty)上，字节缓冲区是池化的，并对引用进行计数，并且必须在使用后释放，以避免内存泄漏。")],-1),n("p",null,"WebFlux应用程序通常不需要关心这些问题，除非它们直接使用或产生数据缓冲区，而不是依赖于编解码器来与更高级的对象进行转换，或者除非它们选择创建自定义编解码器。对于这种情况，请Spring-core数据缓冲区和编解码器中的信息，特别是关于使用数据缓冲区的部分。",-1)])),_:1}),a[41]||(a[41]=n("h3",{id:"logging",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#logging"},[n("span",null,"Logging")])],-1)),a[42]||(a[42]=n("p",null,[s("在Spring WebFlux中，"),n("code",null,"DEBUG"),s("级别的日志被设计成紧凑、最小和可阅读的。它侧重于反复有用的高价值信息，而不是仅在调试特定问题时有用的其他信息。")],-1)),a[43]||(a[43]=n("p",null,[n("code",null,"TRACE"),s("级别的日志记录通常遵循与"),n("code",null,"DEBUG"),s("相同的原则，但可以用于调试任何问题。此外，一些日志消息可能在TRACE和DEBUG中显示不同级别的详细信息。")],-1)),a[44]||(a[44]=n("p",null,"良好的日志记录来自使用日志的经验。",-1)),i(o,{id:"788",data:[{id:"Log Id"},{id:"Sensitive Data"},{id:"Custom codecs"}]},{title0:e(({value:t,isActive:l})=>a[26]||(a[26]=[s("Log Id")])),title1:e(({value:t,isActive:l})=>a[27]||(a[27]=[s("Sensitive Data")])),title2:e(({value:t,isActive:l})=>a[28]||(a[28]=[s("Custom codecs")])),tab0:e(({value:t,isActive:l})=>a[29]||(a[29]=[n("p",null,[s("在WebFlux中，"),n("code",null,"单个请求"),s("可以在"),n("code",null,"多个线程"),s("中执行，线程ID对于关联属于特定请求的日志消息是没有用的。这就是为什么WebFlux日志消息在默认情况下会以特定于请求的ID作为前缀。")],-1),n("p",null,[s("在服务器端，日志ID存储在"),n("code",null,"ServerWebExchange"),s("属性"),n("code",null,"LOG_ID_ATTRIBUTE"),s("中，而基于该ID的完全格式化的前缀可以从"),n("code",null,"ServerWebExchange.getLogPrefix()"),s("中获得。在"),n("code",null,"WebClient"),s("端，日志ID存储在"),n("code",null,"ClientRequest"),s("属性"),n("code",null,"LOG_ID_ATTRIBUTE"),s("中，而一个完全格式化的前缀可以从"),n("code",null,"ClientRequest.logPrefix()"),s("中获得。")],-1),n("p",null,null,-1)])),tab1:e(({value:t,isActive:l})=>a[30]||(a[30]=[n("p",null,"DEBUG和TRACE日志记录可以记录敏感信息。这就是为什么表单参数和头在默认情况下是屏蔽的，必须显式地完全启用它们的日志记录。",-1),n("p",null,[n("strong",null,"服务端如何配置记录详情：")],-1),n("div",{class:"language-java","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@Configuration")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@EnableWebFlux")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyConfig"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"WebFluxConfigurer"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"configureHttpMessageCodecs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ServerCodecConfigurer"),s(" configurer"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        configurer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"defaultCodecs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"enableLoggingRequestDetails"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])])],-1),n("p",null,[n("strong",null,"客户端如何配置记录详情：")],-1),n("div",{class:"language-java","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"Consumer"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"ClientCodecConfigurer"),n("span",{class:"token punctuation"},">")]),s(" consumer "),n("span",{class:"token operator"},"="),s(" configurer "),n("span",{class:"token operator"},"->")]),s(`
`),n("span",{class:"line"},[s("        configurer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"defaultCodecs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"enableLoggingRequestDetails"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"WebClient"),s(" webClient "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"WebClient"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"builder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"exchangeStrategies"),n("span",{class:"token punctuation"},"("),s("strategies "),n("span",{class:"token operator"},"->"),s(" strategies"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"codecs"),n("span",{class:"token punctuation"},"("),s("consumer"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"build"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])])],-1),n("p",null,null,-1)])),tab2:e(({value:t,isActive:l})=>a[31]||(a[31]=[n("p",null,"应用程序可以注册自定义编解码器，以支持额外的媒体类型，或者默认编解码器不支持的特定行为。",-1),n("p",null,"配置一些选项在默认编解码器上强制执行。自定义编解码器可能希望有机会与这些首选项保持一致，例如强制缓冲限制或记录敏感数据。",-1),n("div",{class:"language-java","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"WebClient"),s(" webClient "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"WebClient"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"builder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"codecs"),n("span",{class:"token punctuation"},"("),s("configurer "),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token class-name"},"CustomDecoder"),s(" decoder "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"CustomDecoder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                configurer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"customCodecs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"registerWithDefaultConfig"),n("span",{class:"token punctuation"},"("),s("decoder"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"build"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])])],-1),n("p",null,null,-1)])),_:1}),a[45]||(a[45]=p(`<h2 id="_3-dispatcherhandler" tabindex="-1"><a class="header-anchor" href="#_3-dispatcherhandler"><span>3.DispatcherHandler</span></a></h2><p>与Spring MVC类似，Spring WebFlux是围绕<code>前端控制器模式</code>设计的，其中中央<code>WebHandler</code> 、<code>DispatcherHandler</code>为请求处理提供共享算法，而实际工作则由可配置的委托组件执行。这个模型是灵活的，并且支持不同的工作流。</p><p><code>DispatcherHandler</code>从Spring配置中发现它需要的委托组件。它本身也被设计成一个Spring bean，并实现了<code>ApplicationContextAware</code>来访问它运行的上下文。如果<code>DispatcherHandler</code>是用<code>webHandler</code>的bean名称声明的，那么它又会被<code>WebHttpHandlerBuilder</code>发现，后者将请求处理链组合在一起，如WebHandler API中所述。</p><p>WebFlux应用中的Spring配置通常包括：</p><ul><li><p>bean名为<code>webHandler</code>的<code>DispatcherHandler</code>。</p></li><li><p><code>WebFilter</code>和<code>WebExceptionHandler</code> bean</p></li><li><p>DispatcherHandler特殊bean</p></li><li><p>其它配置</p></li></ul><p>WebHttpHandlerBuilder构建HttpHandler(可以和Server适配器一起使用)：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token class-name">HttpHandler</span> handler <span class="token operator">=</span> <span class="token class-name">WebHttpHandlerBuilder</span><span class="token punctuation">.</span><span class="token function">applicationContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="special-bean-types" tabindex="-1"><a class="header-anchor" href="#special-bean-types"><span>Special Bean Types</span></a></h3><p><code>DispatcherHandler</code>委托特殊的bean处理请求并呈现适当的响应。所谓“特殊bean”，我们指的是实现WebFlux框架抽象的spring管理对象实例。框架通常带有内置默认抽象实现，但可以自定义它们的属性、扩展它们或替换它们。</p><p>下表列出了DispatcherHandler检测到的特殊bean：</p><table><thead><tr><th>Bean类型</th><th>作用</th></tr></thead><tbody><tr><td>HandlerMapping</td><td>将请求映射到处理程序。映射基于一些标准，其细节因HandlerMapping实现而异——带注释的controller、简单的URL模式映射等。<br>HandlerMapping的主要实现是<code>RequestMappingHandlerMapping</code>，用于@RequestMapping注释方法，<code>RouterFunctionMapping</code>用于功能性端点路由，<code>SimpleUrlHandlerMapping</code>用于显式注册URI路径模式和WebHandler实例。</td></tr><tr><td>HandlerAdapter</td><td>帮助<code>DispatcherHandler</code>调用映射到请求的处理程序，而不管实际如何调用该处理程序。例如，调用带注释的controller需要解析注释。HandlerAdapter的主要目的是保护DispatcherHandler不受这些细节的影响。</td></tr><tr><td>HandlerResultHandler</td><td>处理程序调用的结果并最终确定响应。</td></tr></tbody></table><h3 id="processing" tabindex="-1"><a class="header-anchor" href="#processing"><span>Processing</span></a></h3><p>DispatcherHandler按以下方式处理请求：</p><ul><li>要求每个<code>HandlerMapping</code>找到一个匹配的处理程序，并使用第一个匹配。</li><li>如果找到处理程序，则通过适当的<code>HandlerAdapter</code>执行该处理程序，该处理程序将执行的返回值作为<code>HandlerResult</code>公开。</li><li><code>HandlerResult</code>被给定给一个适当的<code>HandlerResultHandler</code>，通过直接写入响应或使用视图来呈现来完成处理。</li></ul><h3 id="result-handling" tabindex="-1"><a class="header-anchor" href="#result-handling"><span>Result Handling</span></a></h3><p>通过<code>HandlerAdapter</code>调用处理程序的返回值被包装成<code>HandlerResult</code>以及一些额外的上下文，并传递给声明支持它的第一个<code>HandlerResultHandler</code>。下表显示了可用的<code>HandlerResultHandler</code>实现，它们都在WebFlux配置中声明：</p><table><thead><tr><th>HandlerResultHandler实现</th><th>处理之</th><th>默认Order值</th></tr></thead><tbody><tr><td>ResponseEntityResultHandler</td><td>ResponseEntity，通常来自@Controller</td><td>0</td></tr><tr><td>ServerResponseResultHandler</td><td>ServerResponse，通常来自函数式端点</td><td>0</td></tr><tr><td>ResponseBodyResultHandler</td><td>处理来自@ResponseBody方法或@RestController类的返回值</td><td>100</td></tr><tr><td>ViewResolutionResultHandler</td><td>CharSequence、View、Model、Map、Rendering或任何其他对象都被视为模型属性。</td><td>Integer.MAX_VALUE</td></tr></tbody></table><h3 id="exceptions-1" tabindex="-1"><a class="header-anchor" href="#exceptions-1"><span>Exceptions</span></a></h3><p>从<code>HandlerAdapter</code>返回的<code>HandlerResult</code>公开一个函数，用于基于某些特定于处理程序的机制进行错误处理。在下列情况下调用这个错误函数：</p><ul><li><p>处理程序调用失败，例如来自@Controller类的方法。</p></li><li><p>通过<code>HandlerResultHandler</code>处理程序返回值失败。</p></li></ul><p>只要在处理程序返回的响应类型产生任何数据项之前出现错误信号，<code>error</code>函数就可以更改响应(例如，更改错误状态码)。</p><p>这就是支持<code>@Controller</code>类中的<code>@ExceptionHandler</code>方法的方式。相比之下，在Spring MVC中对相同的支持是建立在<code>HandlerExceptionResolver</code>之上的。这通常应该无关紧要。然而，在WebFlux中，不能使用<code>@ControllerAdvice</code>来处理在确认<code>handler</code>之前发生的异常。</p><p><strong>为Controller配置全局异常方式同SpringMVC。</strong></p><h3 id="view-resolution" tabindex="-1"><a class="header-anchor" href="#view-resolution"><span>View Resolution</span></a></h3><p>视图解析支持使用HTML模板和模型向浏览器呈现，而无需将您绑定到特定的视图技术。在Spring WebFlux中，视图解析是通过一个专用的<code>HandlerResultHandler</code>来支持的，这个1HandlerResultHandler1使用ViewResolver实例来映射字符串(表示逻辑视图名称)到视图实例。然后使用View来呈现响应。</p><p><strong>处理：</strong></p><p>传递给<code>ViewResolutionResultHandler</code>的<code>HandlerResult</code>包含来自处理程序的返回值和包含在请求处理期间添加的属性的模型。返回值按以下方式处理：</p><ul><li>String，CharSequence：通过配置的ViewResolver实现列表解析为视图的逻辑视图名称。</li><li>void：根据请求路径选择默认视图名称，减去开头和结尾的斜杠，并将其解析为view。当没有提供视图名称（例如，返回模型属性）或异步返回值（例如，Mono完成为空）时也会发生同样的情况。</li><li>Rendering：用于视图解析场景的API。使用代码完成功能探索IDE中的选项。</li><li>Model、Map：要为请求添加到模型中的额外模型属性。</li><li>任何其他返回值(简单类型除外，由<code>BeanUtils.isSimpleProperty</code>决定)被视为要添加到模型中的模型属性。除非存在处理程序方法@ModelAttribute注释，否则属性名根据约定从类名派生而来。</li></ul><p>模型可以包含异步的、响应的类型（例如，来自Reactor或RxJava）。在呈现之前，<code>AbstractView</code>将这些模型属性解析为具体的值并更新模型。单值响应类型被解析为单个值或无值（如果为空），而多值响应类型（例如Flux&lt;T&gt;）被收集并解析为List&lt;T&gt;。</p><p>配置视图解析就像在Spring配置中添加<code>ViewResolutionResultHandler</code> bean一样简单。WebFlux Config为视图解析提供了一个专用的配置API。</p><p><strong>Redirecting：</strong></p><p>视图名称中的特殊<code>redirect:</code>前缀允许您执行重定向。<code>UrlBasedViewResolver</code>(及其子类)将此识别为需要重定向的指令。视图名称的其余部分是重定向URL。</p><p>最终效果与控制器返回<code>RedirectView</code>或<code>Rendering.redirectTo(&quot;abc&quot;).build()</code>相同，但现在控制器本身可以根据逻辑视图名称进行操作。视图名（如redirect:/some/resource）是相对于当前应用程序的，而<code>redirect:https://example.com/arbitrary/path</code>，重定向到绝对URL。</p><p><strong>Content Negotiation：</strong></p><p><code>ViewResolutionResultHandler</code>支持内容协商。它将请求媒体类型与每个选定视图所支持的媒体类型进行比较。使用支持所请求媒体类型的第一个视图。</p><p>为了支持像JSON和XML这样的媒体类型，Spring WebFlux提供了<code>HttpMessageWriterView</code>，这是一个通过<code>HttpMessageWriter</code>呈现的特殊视图。通常，你会通过WebFlux配置将它们配置为默认视图。如果默认视图与所请求的媒体类型匹配，则始终选择和使用默认视图。</p><h2 id="_4-annotated-controllers" tabindex="-1"><a class="header-anchor" href="#_4-annotated-controllers"><span>4.Annotated Controllers</span></a></h2><p>参考SpringMVC 注解控制</p><h2 id="_5-functional-endpoints" tabindex="-1"><a class="header-anchor" href="#_5-functional-endpoints"><span>5.Functional Endpoints</span></a></h2><p>参考SpringMVC Functional接口</p><h2 id="_6-uri-links" tabindex="-1"><a class="header-anchor" href="#_6-uri-links"><span>6.URI Links</span></a></h2><p>参考SpringMVC URL</p><h2 id="_7-cors" tabindex="-1"><a class="header-anchor" href="#_7-cors"><span>7.CORS</span></a></h2><p><strong>WebFluxConfigurer配置全局跨域</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebFlux</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/api/**&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">&quot;https://domain2.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">&quot;header1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;header2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;header3&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">exposedHeaders</span><span class="token punctuation">(</span><span class="token string">&quot;header1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;header2&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Add more mappings...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置跨域过滤器：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token class-name">CorsWebFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">CorsConfiguration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Possibly...</span></span>
<span class="line">    <span class="token comment">// config.applyPermitDefaultValues()</span></span>
<span class="line"></span>
<span class="line">    config<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    config<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">&quot;https://domain1.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    config<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    config<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsWebFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-web-security" tabindex="-1"><a class="header-anchor" href="#_8-web-security"><span>8.Web Security</span></a></h2><h2 id="_9-view-technologies" tabindex="-1"><a class="header-anchor" href="#_9-view-technologies"><span>9.View Technologies</span></a></h2><h2 id="_10-http-caching" tabindex="-1"><a class="header-anchor" href="#_10-http-caching"><span>10.HTTP Caching</span></a></h2><h2 id="_11-webflux配置" tabindex="-1"><a class="header-anchor" href="#_11-webflux配置"><span>11.WebFlux配置</span></a></h2><p>WebFlux Java配置声明了用带注释的控制器或功能端点处理请求所需的组件，并提供了一个API来定制配置。这意味着您不需要了解由Java配置创建的底层bean。然而，如果你想了解它们，你可以在<code>WebFluxConfigurationSupport</code>中看到它们。</p><h3 id="开启webflux配置" tabindex="-1"><a class="header-anchor" href="#开启webflux配置"><span>开启WebFlux配置</span></a></h3><p>@EnableWebFlux注解。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebFlux</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="webflux-api配置" tabindex="-1"><a class="header-anchor" href="#webflux-api配置"><span>WebFlux API配置</span></a></h3><p>实现<code>WebFluxConfigurer</code>自定义配置。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebFlux</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 实现的接口</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="conversion-formatting" tabindex="-1"><a class="header-anchor" href="#conversion-formatting"><span>Conversion, formatting</span></a></h3><p>默认情况下，支持各种数字和日期类型的格式化程序，并支持通过字段上的<code>@NumberFormat</code>和<code>@DateTimeFormat</code>进行自定义。</p><p>注册自定义格式化程序和转换器：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebFlux</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，Spring WebFlux在解析和格式化日期值时考虑请求的Locale。这适用于将日期表示为带有“input”表单字段的字符串的表单。然而，对于“日期”和“时间”表单字段，浏览器使用HTML规范中定义的固定格式。对于这种情况，日期和时间格式可以自定义如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebFlux</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">DateTimeFormatterRegistrar</span> registrar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTimeFormatterRegistrar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        registrar<span class="token punctuation">.</span><span class="token function">setUseIsoFormat</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        registrar<span class="token punctuation">.</span><span class="token function">registerFormatters</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="validation" tabindex="-1"><a class="header-anchor" href="#validation"><span>Validation</span></a></h3><p>默认情况下，如果类路径上存在Bean Validation(例如，Hibernate验证器)，<code>LocalValidatorFactoryBean</code>将被注册为全局验证器，以便与@Controller方法参数上的@Valid和@Validated一起使用。</p><p>在你的Java配置中，你可以自定义全局Validator实例，如下面的例子所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebFlux</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Validator</span> <span class="token function">getValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单个controller注册：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@InitBinder</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initBinder</span><span class="token punctuation">(</span><span class="token class-name">WebDataBinder</span> binder<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        binder<span class="token punctuation">.</span><span class="token function">addValidators</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FooValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="content-type-resolvers" tabindex="-1"><a class="header-anchor" href="#content-type-resolvers"><span>Content Type Resolvers</span></a></h3><p>可以配置Spring WebFlux如何从请求中为@Controller实例确定所请求的媒体类型。默认情况下，只检查<code>Accept</code>报头，但您也可以启用基于查询参数的策略。</p><p>下面的例子展示了如何定制所请求的内容类型解析：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebFlux</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureContentTypeResolver</span><span class="token punctuation">(</span><span class="token class-name">RequestedContentTypeResolverBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http-message-codecs" tabindex="-1"><a class="header-anchor" href="#http-message-codecs"><span>HTTP message codecs</span></a></h3><p>自定义读取和写入请求体和响应体的：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebFlux</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureHttpMessageCodecs</span><span class="token punctuation">(</span><span class="token class-name">ServerCodecConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        configurer<span class="token punctuation">.</span><span class="token function">defaultCodecs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxInMemorySize</span><span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ServerCodecConfigurer</code>提供了一组默认的读取器和写入器。可以使用它来添加更多的阅读器和写入器，定制默认的阅读器和写入器，或者完全替换默认的阅读器和写入器。</p><p>对于Jackson JSON和XML，可以考虑使用<code>Jackson2ObjectMapperBuilder</code>，默认使用以下属性：</p><ul><li>DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES禁用。</li><li>MapperFeature.DEFAULT_VIEW_INCLUSION禁用。</li></ul><p>classpath检测到以下依赖，自动注册：</p><table><thead><tr><th>模块名</th><th>地址</th><th>作用</th></tr></thead><tbody><tr><td>jackson-datatype-joda</td><td>https://github.com/FasterXML/jackson-datatype-joda</td><td>支持Joda-Time类型</td></tr><tr><td>jackson-datatype-jsr310</td><td>https://github.com/FasterXML/jackson-datatype-jsr310</td><td>支持Java8的Date和Time API</td></tr><tr><td>jackson-datatype-jdk8</td><td>https://github.com/FasterXML/jackson-datatype-jdk8</td><td>支持Java8的Optional</td></tr><tr><td>jackson-module-kotlin</td><td>https://github.com/FasterXML/jackson-module-kotlin</td><td>支持Kotlin类和数据类</td></tr></tbody></table><h3 id="view-resolvers" tabindex="-1"><a class="header-anchor" href="#view-resolvers"><span>View Resolvers</span></a></h3><p>配置视图解析方法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebFlux</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span><span class="token class-name">ViewResolverRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,85)),i(o,{id:"1286",data:[{id:"Freemarker"},{id:"ViewResolver实现"},{id:"视图配置 Content Negotiation"}]},{title0:e(({value:t,isActive:l})=>a[32]||(a[32]=[s("Freemarker")])),title1:e(({value:t,isActive:l})=>a[33]||(a[33]=[s("ViewResolver实现")])),title2:e(({value:t,isActive:l})=>a[34]||(a[34]=[s("视图配置 Content Negotiation")])),tab0:e(({value:t,isActive:l})=>a[35]||(a[35]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@Configuration")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@EnableWebFlux")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"WebConfig"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"WebFluxConfigurer"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"configureViewResolvers"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ViewResolverRegistry"),s(" registry"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        registry"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"freeMarker"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Configure Freemarker...")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Bean")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"FreeMarkerConfigurer"),s(),n("span",{class:"token function"},"freeMarkerConfigurer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"FreeMarkerConfigurer"),s(" configurer "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"FreeMarkerConfigurer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        configurer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setTemplateLoaderPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"classpath:/templates"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(" configurer"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,null,-1)])),tab1:e(({value:t,isActive:l})=>a[36]||(a[36]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@Configuration")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@EnableWebFlux")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"WebConfig"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"WebFluxConfigurer"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"configureViewResolvers"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ViewResolverRegistry"),s(" registry"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"ViewResolver"),s(" resolver "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        registry"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"viewResolver"),n("span",{class:"token punctuation"},"("),s("resolver"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab2:e(({value:t,isActive:l})=>a[37]||(a[37]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@Configuration")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@EnableWebFlux")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"WebConfig"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"WebFluxConfigurer"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"configureViewResolvers"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ViewResolverRegistry"),s(" registry"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        registry"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"freeMarker"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"Jackson2JsonEncoder"),s(" encoder "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Jackson2JsonEncoder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        registry"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"defaultViews"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"HttpMessageWriterView"),n("span",{class:"token punctuation"},"("),s("encoder"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// ...")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,null,-1)])),_:1}),a[46]||(a[46]=p(`<h3 id="static-resources" tabindex="-1"><a class="header-anchor" href="#static-resources"><span>Static Resources</span></a></h3><p>此选项提供了一种方便的方式，可以从基于资源的位置列表中提供静态资源。</p><p>在下一个示例中，给定一个以<code>/resources</code>开头的请求，相对路径用于查找和提供相对于类路径上的<code>/static</code>的静态资源。资源的有效期为一年，以确保最大限度地使用浏览器缓存并减少浏览器发出的HTTP请求。<code>Last-Modified</code>标头也会被求值，如果存在，则返回304状态码。示例如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebFlux</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/resources/**&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;/public&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/static/&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span><span class="token class-name">CacheControl</span><span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>资源处理程序还支持<code>ResourceResolver</code>实现链和<code>ResourceTransformer</code>实现链，这些实现链可用于创建用于处理优化资源的工具链。</p><p>您可以根据从内容、固定的应用程序版本或其他信息计算出的MD5哈希值，使用<code>VersionResourceResolver</code>来处理受版本控制的资源url。<code>ContentVersionStrategy</code> （MD5哈希）是一个很好的选择，但有一些明显的例外（例如与模块加载器一起使用的JavaScript资源）。</p><p>下面的例子展示了如何在Java配置中使用VersionResourceResolver：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebFlux</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/resources/**&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;/public/&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">resourceChain</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">addResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VersionResourceResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addContentVersionStrategy</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用<code>ResourceUrlProvider</code>重写url，并应用完整的解析器和转换器链(例如，插入版本)。WebFlux的配置提供了一个ResourceUrlProvider，这样它就可以被注入到其他配置中。</p><p>与Spring MVC不同的是，目前在WebFlux中，没有办法透明地重写静态资源url，因为没有视图技术可以利用解析器和转换器的非阻塞链。当只提供本地资源时，解决方法是直接使用ResourceUrlProvider(例如，通过自定义元素)和block。</p><p>注意，当同时使用<code>EncodedResourceResolver</code>(例如，Gzip， Brotli编码)和<code>VersionedResourceResolver</code>时，它们必须按此顺序注册，以确保基于内容的版本始终基于未编码的文件可靠地计算。</p><p>Webjar也可以通过<code>WebJarsResourceResolver</code>来支持，它会自动注册，当org.webjars:webjars-locator-core库存在。解析器可以重写url以包含jar的版本，也可以匹配没有版本的传入url——例如，从<code>/jquery/jquery.min.js</code>到<code>/jquery/1.2.0/jquery.min.js</code>。</p><h3 id="path-matching" tabindex="-1"><a class="header-anchor" href="#path-matching"><span>Path Matching</span></a></h3><p>可以自定义与路径匹配相关的选项：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebFlux</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        configurer</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">setUseCaseSensitiveMatch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">setUseTrailingSlashMatch</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">addPathPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;/api&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token class-name">HandlerTypePredicate</span><span class="token punctuation">.</span><span class="token function">forAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RestController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring WebFlux依赖于请求路径的解析表示RequestPath来访问解码后的路径段值，删除了分号内容(即路径或矩阵变量)。这意味着，与Spring MVC不同，不需要指示是否解码请求路径，也不需要指示是否为了路径匹配的目的而删除分号内容。</p><p>Spring WebFlux也不支持后缀模式匹配，不像在Spring MVC中，我们也建议不要依赖它。</p><h3 id="advanced-configuration-mode" tabindex="-1"><a class="header-anchor" href="#advanced-configuration-mode"><span>Advanced Configuration Mode</span></a></h3><p>@EnableWebFlux注解导入了DelegatingWebFluxConfiguration，作用：</p><ul><li>为WebFlux应用程序提供默认的Spring配置</li><li>检测并委托<code>WebFluxConfigurer</code>实现来定制该配置。</li></ul><p>对于高级模式，你可以删除@EnableWebFlux并直接从<code>DelegatingWebFluxConfiguration</code>扩展，而不是实现<code>WebFluxConfigurer</code>，如下例所示：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">extends</span> <span class="token class-name">DelegatingWebFluxConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>您可以在WebConfig中保留现有的方法，但是您现在也可以覆盖基类中的bean声明，并且仍然可以在类路径中使用任意数量的其他WebMvcConfigurer实现。</p>`,23))])}const g=c(k,[["render",v],["__file","SpringWebFlux.html.vue"]]),h=JSON.parse('{"path":"/spring/webReactive/SpringWebFlux.html","title":"SpringWebFlux","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1.介绍","slug":"_1-介绍","link":"#_1-介绍","children":[{"level":3,"title":"Reactive的定义","slug":"reactive的定义","link":"#reactive的定义","children":[]},{"level":3,"title":"Reactive API","slug":"reactive-api","link":"#reactive-api","children":[]},{"level":3,"title":"Programming Models","slug":"programming-models","link":"#programming-models","children":[]},{"level":3,"title":"Applicability","slug":"applicability","link":"#applicability","children":[]},{"level":3,"title":"Servers","slug":"servers","link":"#servers","children":[]},{"level":3,"title":"Performance","slug":"performance","link":"#performance","children":[]},{"level":3,"title":"Concurrency Model","slug":"concurrency-model","link":"#concurrency-model","children":[]}]},{"level":2,"title":"2.Reactive Core","slug":"_2-reactive-core","link":"#_2-reactive-core","children":[{"level":3,"title":"HttpHandler","slug":"httphandler","link":"#httphandler","children":[]},{"level":3,"title":"WebHandler API","slug":"webhandler-api","link":"#webhandler-api","children":[]},{"level":3,"title":"Filters","slug":"filters","link":"#filters","children":[]},{"level":3,"title":"Exceptions","slug":"exceptions","link":"#exceptions","children":[]},{"level":3,"title":"Codecs","slug":"codecs","link":"#codecs","children":[]},{"level":3,"title":"Logging","slug":"logging","link":"#logging","children":[]}]},{"level":2,"title":"3.DispatcherHandler","slug":"_3-dispatcherhandler","link":"#_3-dispatcherhandler","children":[{"level":3,"title":"Special Bean Types","slug":"special-bean-types","link":"#special-bean-types","children":[]},{"level":3,"title":"Processing","slug":"processing","link":"#processing","children":[]},{"level":3,"title":"Result Handling","slug":"result-handling","link":"#result-handling","children":[]},{"level":3,"title":"Exceptions","slug":"exceptions-1","link":"#exceptions-1","children":[]},{"level":3,"title":"View Resolution","slug":"view-resolution","link":"#view-resolution","children":[]}]},{"level":2,"title":"4.Annotated Controllers","slug":"_4-annotated-controllers","link":"#_4-annotated-controllers","children":[]},{"level":2,"title":"5.Functional Endpoints","slug":"_5-functional-endpoints","link":"#_5-functional-endpoints","children":[]},{"level":2,"title":"6.URI Links","slug":"_6-uri-links","link":"#_6-uri-links","children":[]},{"level":2,"title":"7.CORS","slug":"_7-cors","link":"#_7-cors","children":[]},{"level":2,"title":"8.Web Security","slug":"_8-web-security","link":"#_8-web-security","children":[]},{"level":2,"title":"9.View Technologies","slug":"_9-view-technologies","link":"#_9-view-technologies","children":[]},{"level":2,"title":"10.HTTP Caching","slug":"_10-http-caching","link":"#_10-http-caching","children":[]},{"level":2,"title":"11.WebFlux配置","slug":"_11-webflux配置","link":"#_11-webflux配置","children":[{"level":3,"title":"开启WebFlux配置","slug":"开启webflux配置","link":"#开启webflux配置","children":[]},{"level":3,"title":"WebFlux API配置","slug":"webflux-api配置","link":"#webflux-api配置","children":[]},{"level":3,"title":"Conversion, formatting","slug":"conversion-formatting","link":"#conversion-formatting","children":[]},{"level":3,"title":"Validation","slug":"validation","link":"#validation","children":[]},{"level":3,"title":"Content Type Resolvers","slug":"content-type-resolvers","link":"#content-type-resolvers","children":[]},{"level":3,"title":"HTTP message codecs","slug":"http-message-codecs","link":"#http-message-codecs","children":[]},{"level":3,"title":"View Resolvers","slug":"view-resolvers","link":"#view-resolvers","children":[]},{"level":3,"title":"Static Resources","slug":"static-resources","link":"#static-resources","children":[]},{"level":3,"title":"Path Matching","slug":"path-matching","link":"#path-matching","children":[]},{"level":3,"title":"Advanced Configuration Mode","slug":"advanced-configuration-mode","link":"#advanced-configuration-mode","children":[]}]}],"git":{"updatedTime":1760063112000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":4,"url":"https://github.com/oycm"},{"name":"ouyangcm","username":"ouyangcm","email":"mingorg@163.com","commits":1,"url":"https://github.com/ouyangcm"}]},"filePathRelative":"spring/webReactive/SpringWebFlux.md"}');export{g as comp,h as data};
