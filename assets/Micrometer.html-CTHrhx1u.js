import{_ as s,c as a,e as t,o as p}from"./app-DO9Fsueg.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="micrometer" tabindex="-1"><a class="header-anchor" href="#micrometer"><span>Micrometer</span></a></h1><p>旧官网文档：https://micrometer.io/docs/</p><p>新官网文档：https://docs.micrometer.io/micrometer/reference/</p><p>和Spring的集成介绍：https://docs.spring.io/spring-boot/reference/actuator/metrics.html#actuator.metrics</p><p>Micrometer是一个为基于JVM的应用程序设计的指标监控门面库（类似日志门面库SLF4J），提供了一套统一的 API，使开发者能够轻松集成多种监控系统（如Prometheus、Datadog、InfluxDB等）。它的核心目标是解耦应用代码与具体监控后端，增强灵活性和可维护性。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><p><strong>集成prometheus使用方式：</strong></p><div class="language-gradle" data-highlighter="prismjs" data-ext="gradle" data-title="gradle"><pre><code><span class="line"><span class="token keyword">implementation</span> <span class="token string">&#39;io.micrometer:micrometer-registry-prometheus:latest.release&#39;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-xml" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>micrometer-registry-prometheus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${micrometer.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>Micrometer包含一个带有仪表SPI的核心库和一个不向任何地方导出数据的内存实现、一系列包含各种监控系统实现的模块以及一个测试模块。</p><p>如果未决定使用监控系统，可以添加<code>micrometer-core</code>依赖，并配置<code>SimpleMeterRegistry</code>。</p><div class="language-xml" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>micrometer-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${micrometer.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>在没有使用框架的情况下，可以使用Micrometer Bom来管理依赖。</strong></p><div class="language-gradle" data-highlighter="prismjs" data-ext="gradle" data-title="gradle"><pre><code><span class="line"><span class="token keyword">implementation</span> <span class="token function">platform</span><span class="token punctuation">(</span><span class="token string">&#39;io.micrometer:micrometer-bom:1.15.0&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">implementation</span> <span class="token string">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>micrometer-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.15.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>micrometer-registry-prometheus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="micrometer抽象介绍" tabindex="-1"><a class="header-anchor" href="#micrometer抽象介绍"><span>Micrometer抽象介绍</span></a></h2><h3 id="支持的监控系统" tabindex="-1"><a class="header-anchor" href="#支持的监控系统"><span>支持的监控系统</span></a></h3><p>Micrometer包含一个带有仪表SPI的核心模块、一组包含各种监控系统实现的模块（每个都称为注册表）和一个测试套件。您需要了解监控系统的三个重要特征：</p><p><strong>维度Dimensionality</strong>：系统是否支持使用标签键值对来丰富指标名称。如果系统不是维度的，它就是分层(Hierarchical)的。</p><ul><li>Dimensionality：AppOptics, Atlas, Azure Monitor, Cloudwatch, Datadog, Datadog StatsD, Dynatrace, Elastic, Humio, Influx, KairosDB, New Relic, Prometheus, SignalFx, Sysdig StatsD, Telegraf StatsD, Wavefront</li><li>Hierarchical：Graphite, Ganglia, JMX, Etsy StatsD</li></ul><p><strong>速率聚合Rate Aggregation</strong>：指的是在规定的时间间隔内聚合一组样本。</p><ul><li>Client-side：AppOptics, Atlas, Azure Monitor, Datadog, Dynatrace, Elastic, Graphite, Ganglia, Humio, Influx, JMX, Kairos, New Relic, all StatsD flavors, SignalFx</li><li>Server-side：Prometheus, Wavefront</li></ul><p><strong>发布Publishing</strong>：有些系统在空闲时轮询应用程序以获取指标，另一些系统则定期将指标推送给它们。</p><ul><li>Client pushes：AppOptics, Atlas, Azure Monitor, Datadog, Dynatrace, Elastic, Graphite, Ganglia, Humio, Influx, JMX, Kairos, New Relic, SignalFx, Wavefront</li><li>Server polls：Prometheus, all StatsD flavors</li></ul><h3 id="meters" tabindex="-1"><a class="header-anchor" href="#meters"><span>Meters</span></a></h3><p>Meter是收集关于应用程序的一组度量的接口。</p><p>Micrometer支持一组Meter原型，包括<code>Timer</code>、<code>Counter</code>、<code>Gauge</code>、<code>DistributionSummary</code>、<code>LongTaskTimer</code>、<code>FunctionCounter</code>、<code>FunctionTimer</code>和<code>TimeGauge</code>。不同的度量类型会产生不同数量的时间序列度量。例如，虽然有一个表示Gauge的单一度量，但Timer测量计时事件的计数和所有计时事件的总时间。</p><p>记录Meter的测量值应该是一个相对便宜的操作，不应该引发任何异常。如果注册中心支持将指标发布到监视系统，那么这将在单独的线程中完成，并且不应该影响记录指标。</p><p><code>meter</code>由其名称(name)和维度(dimension)唯一标识。我们可以互换使用<code>dimension</code>和<code>tag</code>这两个术语，而Micrometer接口就是<code>tag</code>，因为它更短。作为一般规则，应该可以使用名称作为枢轴。维度(dimension)允许对特定的命名度量进行切片，以便向下钻取和推断数据。这意味着，如果只选择了名称，则可以通过使用其他维度向下钻取并推断所显示的值。</p><h3 id="registry" tabindex="-1"><a class="header-anchor" href="#registry"><span>Registry</span></a></h3><p>Micrometer中的Meter是从<code>MeterRegistry</code>创建并保存在<code>MeterRegistry</code>中的。Registry的创建方式因每种实施而异。</p><p>Micrometer包含一个<code>SimpleMeterRegistry</code>，它在内存中保存每个仪表的最新值，并且不会将数据导出到任何地方。</p><p>创建方式：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">MeterRegistry</span> registry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMeterRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="compositemeterregistry" tabindex="-1"><a class="header-anchor" href="#compositemeterregistry"><span>CompositeMeterRegistry</span></a></h4><p>CompositeMeterRegistry可以添加多个注册表，允许同时将多个指标发布到多个监控系统。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 创建组合注册表，用于统一管理多个子注册表</span></span>
<span class="line"><span class="token class-name">CompositeMeterRegistry</span> composite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeMeterRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建名为counter的计数器，此时调用计数，由于注册表中无子注册表，因此操作不会记录</span></span>
<span class="line"><span class="token class-name">Counter</span> compositeCounter <span class="token operator">=</span> composite<span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">compositeCounter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// composite添加子注册表，此时之前创建的counter自动注册到simple中，初始值为0</span></span>
<span class="line"><span class="token class-name">SimpleMeterRegistry</span> simple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMeterRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">composite<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>simple<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用计数器生效</span></span>
<span class="line">compositeCounter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="global-registry" tabindex="-1"><a class="header-anchor" href="#global-registry"><span>Global Registry</span></a></h4><p>Micrometer提供了一个名为<code>Metrics</code>的静态全局注册表和一组基于此注册表生成仪表的静态构建器。注意，全局注册表是一个复合注册表。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 将Meter实例存储在属性中</span></span>
<span class="line">    <span class="token class-name">Counter</span> featureCounter <span class="token operator">=</span> <span class="token class-name">Metrics</span><span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token string">&quot;feature&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;region&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">feature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        featureCounter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">feature2</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 查找已有的Meter实例</span></span>
<span class="line">        <span class="token class-name">Metrics</span><span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token string">&quot;feature.2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 将Meter实例添加到注册表</span></span>
<span class="line">        <span class="token class-name">Metrics</span><span class="token punctuation">.</span><span class="token function">addRegistry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleMeterRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="naming-meters" tabindex="-1"><a class="header-anchor" href="#naming-meters"><span>Naming Meters</span></a></h3><p>Micrometer采用一种命名约定，用<code>.</code>字符分割小写单词。不同的监控系统对命名约定有不同的建议，有些命名约定在系统之间可能不兼容。监控系统的每个Micrometer实现都附带一个命名约定，该约定将小写点表示法名称转换为监控系统推荐的命名约定。此外，这个命名约定实现从<code>metric names</code>和<code>tags</code>中删除了监视系统不允许的特殊字符。你可以通过实现<code>NamingConvention</code>并在注册表中设置它来覆盖注册表的默认命名约定：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">registry<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">namingConvention</span><span class="token punctuation">(</span>myCustomNamingConvention<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>下面Micrometer中注册的计时器在各个监控系统的的表示如下：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">registry<span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token string">&quot;http.server.requests&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ol><li>Prometheus：http_server_requests_duration_seconds</li><li>Atlas：httpServerRequests</li><li>Graphite：http.server.requests</li><li>InfluxDB：http_server_requests</li></ol><h4 id="tag-naming" tabindex="-1"><a class="header-anchor" href="#tag-naming"><span>Tag Naming</span></a></h4><p>建议对Tag命名时保持和Meter命名一样的约定。</p><p>下面表示测量数据库和http的访问次数：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">registry<span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token string">&quot;database.calls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;db&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span></span>
<span class="line">registry<span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token string">&quot;http.requests&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;uri&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/api/users&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>不推荐的方式：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">registry<span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token string">&quot;calls&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;class&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;database&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;db&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">registry<span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token string">&quot;calls&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;class&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;uri&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/api/users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>当统计到calls层面时，收集的是数据库和http调用的总数。还需要向下统计才能获取数据库和http的访问次数。</p><h4 id="common-tags" tabindex="-1"><a class="header-anchor" href="#common-tags"><span>Common Tags</span></a></h4><p>可以在注册表级别定义通用标签，并将其添加到报告给监控系统的每个指标中。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">registry<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commonTags</span><span class="token punctuation">(</span><span class="token string">&quot;stack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;prod&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;region&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;us-east-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 两者等价</span></span>
<span class="line">registry<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commonTags</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">Tag</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;stack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;prod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Tag</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;region&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;us-east-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>通常，必须先将常用标记添加到注册表中， 然后再添加meter Binder。</p><p>SpringBoot有两种添加方式：</p><ol><li>使用配置属性添加：https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#actuator.metrics.customizing.common-tags</li><li>注册MeterRegistryCustomizer Bean，通过代码自定义通过标签</li></ol><h4 id="tag-values" tabindex="-1"><a class="header-anchor" href="#tag-values"><span>Tag Values</span></a></h4><p>Tag的值必须是非null的。</p><p>注意来自用户提供源的标记值可能会破坏度量的基数。应该始终小心地对用户提供的输入进行规范化并添加边界。考虑用于在服务端点上记录HTTP请求的URI标记。如果我们不将404限制为NOT_FOUND这样的值，则度量的维度将随着无法找到的每个资源而增长。</p><p><strong>基数</strong>：指标下所有唯一标签组合（Tag Set）的数量。例如：一个指标有标签<code>uri=/api/user</code>和<code>status=200</code>，构成一个唯一的标签组合。如果有100 个不同的uri和5个不同的status，则基数为500。</p><p>每个唯一的标签组合都会在监控系统中生成一个新的时间序列（Time Series）。监控系统的存储、查询性能会因基数爆炸急剧下降（如 Prometheus 默认限制单指标基数为10000）。高基数指标可能导致监控系统内存/存储过载，甚至崩溃。</p><p><strong>如果标签值来自用户输入（如 URL 参数、请求头、用户 ID 等），且未做规范化处理，标签值的可能性是无限的。</strong></p><h3 id="meter-filters" tabindex="-1"><a class="header-anchor" href="#meter-filters"><span>Meter Filters</span></a></h3><p>可以给注册表配置过滤器，更好地控制Meter的注册方式以及发出的统计数据类型。Filter的三个基本功能：</p><ul><li>Deny/Accept正在注册的Meter。</li><li>Transform meter内容，如：修改name、添加或删除tags、修改description或base units。</li><li>为某些meter类型配置分布统计信息。</li></ul><p>编程添加MegerFilter的方式（按顺序应用）：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">registry<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">meterFilter</span><span class="token punctuation">(</span><span class="token class-name">MeterFilter</span><span class="token punctuation">.</span><span class="token function">ignoreTags</span><span class="token punctuation">(</span><span class="token string">&quot;too.much.information&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">meterFilter</span><span class="token punctuation">(</span><span class="token class-name">MeterFilter</span><span class="token punctuation">.</span><span class="token function">denyNameStartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;jvm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="deny-accept-meterfilter" tabindex="-1"><a class="header-anchor" href="#deny-accept-meterfilter"><span>Deny/Accept MeterFilter</span></a></h4><p>拒绝或接收MeterFilter样例：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">MeterFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MeterFilterReply</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Meter<span class="token punctuation">.</span>Id</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token class-name">MeterFilterReply</span><span class="token punctuation">.</span><span class="token constant">DENY</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">       <span class="token keyword">return</span> <span class="token class-name">MeterFilterReply</span><span class="token punctuation">.</span><span class="token constant">NEUTRAL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MeterFilterReply有3个枚举类型：</p><ul><li>DENY：不让这个Meter注册。当尝试在注册表上注册一个Meter，并且过滤器返回DENY时，注册表将返回该Meter的<code>NOOP version</code>（例如，<code>NoopCounter</code>或<code>NoopTimer</code>）。代码可以继续与NOOP Meter交互，但是记录到NOOP Meter的任何内容都将以最小的开销立即丢弃。</li><li>NEUTRAL：如果其它MeterFilter没有返回<code>DENY</code>，注册的Meter则正常返回。</li><li>ACCEPT：如果过滤器返回<code>ACCEPT</code>，则立即注册Meter，而不询问任何其他过滤器的<code>accept</code>方法。</li></ul><p>MeterFilter为Deny/Accept提供的静态构造器：</p><ul><li>accept()：接收所有的meter，覆盖后面所有的Filterr。</li><li>accept(Predicate&lt;Meter.Id&gt;)：接受匹配的Predicate。</li><li>acceptNameStartsWith(String)：接受匹配前缀的Meter</li><li>deny()：拒绝所有的meter，覆盖后面所有的Filterr。</li><li>denyNameStartsWith(String)：拒绝匹配前缀的Meter</li><li>deny(Predicate&lt;Meter.Id&gt;)：拒绝匹配的Predicate。</li><li>maximumAllowableMetrics(int)：注册表达到一定数量，拒绝Meter。</li><li>maximumAllowableTags(String meterNamePrefix, String tagKey, int maximumTagValues, MeterFilter onMaxReached)：对标签数量做限制。</li><li>denyUnless(Predicate&lt;Meter.Id&gt;)：拒绝不匹配Predicate的Meter。</li></ul><p>过滤链，按照配置的顺序应用过滤器，下面的例子：只匹配http的Meter。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">registry<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">meterFilter</span><span class="token punctuation">(</span><span class="token class-name">MeterFilter</span><span class="token punctuation">.</span><span class="token function">acceptNameStartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">meterFilter</span><span class="token punctuation">(</span><span class="token class-name">MeterFilter</span><span class="token punctuation">.</span><span class="token function">deny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="transform" tabindex="-1"><a class="header-anchor" href="#transform"><span>Transform</span></a></h4><p>给test开始的meter添加名称前缀，添加附加标签。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">MeterFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Meter<span class="token punctuation">.</span>Id</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Meter<span class="token punctuation">.</span>Id</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token string">&quot;extra.&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withTag</span><span class="token punctuation">(</span><span class="token string">&quot;extra.tag&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">       <span class="token keyword">return</span> id<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造器方法：</p><ul><li>commonTags(Iterable&lt;Tag&gt;)：为所有Meter添加一组标签。建议添加应用程序名称、host、region(区域)等通用标签。</li><li>ignoreTags(String…)：删除匹配这些key的标签。当一个标签基数过高影响监控系统性能，可以快速删除，待后续更改检测点。</li><li>replaceTagValues(String tagKey, Function&lt;String, String&gt; replacement, String… exceptions)：对所有匹配的标签(被排除的除外)，调用替换函数。</li><li>renameTag(String meterNamePrefix, String fromTagKey, String toTagKey)：对匹配前缀的和指定key的标签替换名称。</li></ul><h4 id="configure" tabindex="-1"><a class="header-anchor" href="#configure"><span>Configure</span></a></h4><p><code>Timer</code>和<code>DistributionSummary</code>包含一组可选的分布统计信息（除了基本的count、total和max之外），可以通过过滤器配置这些统计信息。这些分布统计包括预先计算的百分位数(pre-computed percentiles)、SLO和柱状图(histograms)。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">MeterFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">DistributionStatisticConfig</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Meter<span class="token punctuation">.</span>Id</span> id<span class="token punctuation">,</span> <span class="token class-name">DistributionStatisticConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">DistributionStatisticConfig</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">publishPercentiles</span><span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.95</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> config<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造器方法：</p><ul><li>maxExpected(Duration/long)：控制上限。</li><li>minExpected(Duration/long)：控制下限。</li></ul><h3 id="rate-aggregation" tabindex="-1"><a class="header-anchor" href="#rate-aggregation"><span>Rate Aggregation</span></a></h3><p>在指标发布之前在客户端进行速率聚合，或者在服务端查询时临时聚合。</p><p><strong>客户端聚合的两类系统：</strong></p><ul><li>期望速率聚合的数据。考虑到关键的洞察力，对于大多数生产目的，我们应该基于比率而不是绝对值来做出决定。这样的系统得益于不必做更少的数学运算来满足查询。</li><li>使用相对较少或没有数学操作来通过查询对聚合数据进行评级。对于这些系统，发布预聚合的数据是对构建有意义的唯一方法。</li></ul><figure><img src="http://47.101.155.205/image-20250520202409514.png" alt="image-20250520202409514" tabindex="0" loading="lazy"><figcaption>image-20250520202409514</figcaption></figure><h3 id="counters" tabindex="-1"><a class="header-anchor" href="#counters"><span>Counters</span></a></h3><p><code>Counter</code>接口允许按固定值递增，这个值必须是正数。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 生成随机数的对象</span></span>
<span class="line"><span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token class-name">MeterRegistry</span> registry <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 使用注册表创建 Counter</span></span>
<span class="line"><span class="token class-name">Counter</span> counter <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">doOnEach</span><span class="token punctuation">(</span>d <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">               	<span class="token comment">// 计数</span></span>
<span class="line">                counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">blockLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Counter接口提供的流式构建器，提供了对<code>baseUnit</code>、<code>description</code>、<code>tags</code>的访问。您可以通过最后调用<code>register</code>将计数器注册。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Counter</span> counter <span class="token operator">=</span> <span class="token class-name">Counter</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">baseUnit</span><span class="token punctuation">(</span><span class="token string">&quot;beans&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;a description of what this counter does&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token string">&quot;region&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>spring-boot-starter-actuator桥接Prometheus创建的Counter：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// registry io.micrometer.prometheus.PrometheusMeterRegistry</span></span>
<span class="line"><span class="token comment">// tags Iterable io.micrometer.core.instrument.Tag</span></span>
<span class="line"><span class="token class-name">Counter</span> allocatedBytes <span class="token operator">=</span> <span class="token class-name">Counter</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;jvm.gc.memory.allocated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span>tags<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">baseUnit</span><span class="token punctuation">(</span><span class="token class-name">BaseUnits</span><span class="token punctuation">.</span><span class="token constant">BYTES</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Incremented for an increase in the size of the young generation memory pool after one GC to before the next&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 通过allocatedBytes.increment(double) 设置指标值</span></span>
<span class="line">allocatedBytes<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250527144750916.png" alt="image-20250527144750916" tabindex="0" loading="lazy"><figcaption>image-20250527144750916</figcaption></figure><figure><img src="http://47.101.155.205/image-20250527145211004.png" alt="image-20250527145211004" tabindex="0" loading="lazy"><figcaption>image-20250527145211004</figcaption></figure><h4 id="counted" tabindex="-1"><a class="header-anchor" href="#counted"><span>@Counted</span></a></h4><p><code>@Counted</code>注解为特定类型的方法，例如，Controller方法或其它方法添加计数支持。</p><p>添加<code>CountedAspect</code>以支持注解工作：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountedConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token annotation punctuation">@Bean</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token class-name">CountedAspect</span> <span class="token function">countedAspect</span><span class="token punctuation">(</span><span class="token class-name">MeterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CountedAspect</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleService</span> <span class="token punctuation">{</span></span>
<span class="line">	</span>
<span class="line">    <span class="token comment">// @Counted 记录该方法的执行次数</span></span>
<span class="line">  	<span class="token annotation punctuation">@Counted</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    	<span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// @Counted 记录该方法的执行次数</span></span>
<span class="line">  	<span class="token annotation punctuation">@Async</span></span>
<span class="line">  	<span class="token annotation punctuation">@Counted</span></span>
<span class="line">  	<span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    	<span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注解<code>@MeterTag</code>支持方法参数使用，需要配置<code>CountedAspect</code>添加<code>CountedMeterTagAnnotationHandler</code>。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ValueResolver</span> valueResolver <span class="token operator">=</span> parameter <span class="token operator">-&gt;</span> <span class="token string">&quot;Value from myCustomTagValueResolver [&quot;</span> <span class="token operator">+</span> parameter <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">ValueExpressionResolver</span> valueExpressionResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelValueExpressionResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">countedAspect<span class="token punctuation">.</span><span class="token function">setMeterTagAnnotationHandler</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">CountedMeterTagAnnotationHandler</span><span class="token punctuation">(</span>aClass <span class="token operator">-&gt;</span> valueResolver<span class="token punctuation">,</span> aClass <span class="token operator">-&gt;</span> valueExpressionResolver<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>假设该接口使用了以下注解：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">MeterTagClassInterface</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Counted</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">getAnnotationForTagValueResolver</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MeterTag</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> resolver <span class="token operator">=</span> <span class="token class-name">ValueResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token class-name">String</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Counted</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">getAnnotationForTagValueExpression</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token annotation punctuation">@MeterTag</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;&#39;hello&#39; + &#39; characters&#39;&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Counted</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">getAnnotationForArgumentToString</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MeterTag</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Counted</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">getMultipleAnnotationsForTagValueExpression</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token annotation punctuation">@MeterTag</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;&#39;value1: &#39; + value1&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@MeterTag</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span>expression <span class="token operator">=</span> <span class="token string">&quot;&#39;value2: &#39; + value2&quot;</span><span class="token punctuation">)</span> <span class="token class-name">DataHolder</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调用<code>MeterTagClassInterface</code>接口实现时，<strong>实现的方法需要@Counted注解</strong>。将创建以下计数器：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// @MeterTag(&quot;test&quot;) Long param</span></span>
<span class="line">service<span class="token punctuation">.</span><span class="token function">getAnnotationForArgumentToString</span><span class="token punctuation">(</span><span class="token number">15L</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">assertThat</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;method.counted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;15&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// @MeterTag(key = &quot;test&quot;, resolver = ValueResolver.class) 使用了Value解析器</span></span>
<span class="line">service<span class="token punctuation">.</span><span class="token function">getAnnotationForTagValueResolver</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">assertThat</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;method.counted&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Value from myCustomTagValueResolver [foo]&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// @MeterTag(key = &quot;test&quot;, expression = &quot;&#39;hello&#39; + &#39; characters&#39;&quot;) 使用 ValueExpressionResolver</span></span>
<span class="line">service<span class="token punctuation">.</span><span class="token function">getAnnotationForTagValueExpression</span><span class="token punctuation">(</span><span class="token string">&quot;15L&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">assertThat</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;method.counted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello characters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// @MeterTag(key = &quot;value1&quot;, expression = &quot;&#39;value1: &#39; + value1&quot;) @MeterTag(key = &quot;value2&quot;,expression = &quot;&#39;value2: &#39; + value2&quot;)</span></span>
<span class="line"><span class="token comment">// @MeterTags({ @MeterTag(...), @MeterTag(...) }) 等价</span></span>
<span class="line">service<span class="token punctuation">.</span><span class="token function">getMultipleAnnotationsForTagValueExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataHolder</span><span class="token punctuation">(</span><span class="token string">&quot;zxe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;qwe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">assertThat</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;method.counted&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1: zxe&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2: qwe&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="function-tracking-counters" tabindex="-1"><a class="header-anchor" href="#function-tracking-counters"><span>Function-tracking Counters</span></a></h4><p><code>Micrometer</code>还提供了一种不常用的计数器模式，可以跟踪单调增加的函数（保持不变或随时间增加但从不减少的函数）。一些监视系统（如Prometheus）将计数器的累积值推送到后端，但其他监视系统则发布计数器在推送间隔内的增量速率。通过采用此模式，您可以让监视系统的Micrometer实现选择是否对计数器进行评级规范化，并且您的计数器在不同类型的监视系统之间保持可移植性。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Cache</span> cache <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token comment">// suppose we have a Guava cache with stats recording on</span></span>
<span class="line"><span class="token comment">// evictionCount一个单调递增的函数，从其生命周期开始，每次缓存驱逐都会递增。</span></span>
<span class="line">registry<span class="token punctuation">.</span><span class="token function">more</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token string">&quot;evictions&quot;</span><span class="token punctuation">,</span> tags<span class="token punctuation">,</span> cache<span class="token punctuation">,</span> c <span class="token operator">-&gt;</span> c<span class="token punctuation">.</span><span class="token function">stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">evictionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">MyCounterState</span> state <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">FunctionCounter</span> counter <span class="token operator">=</span> <span class="token class-name">FunctionCounter</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> state <span class="token operator">-&gt;</span> state<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">baseUnit</span><span class="token punctuation">(</span><span class="token string">&quot;beans&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;a description of what this counter does&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token string">&quot;region&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>spring-boot-starter-actuator桥接Prometheus创建的FunctionCounter：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">FunctionCounter</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;jvm.classes.unloaded&quot;</span><span class="token punctuation">,</span> classLoadingBean<span class="token punctuation">,</span> <span class="token class-name">ClassLoadingMXBean</span><span class="token operator">::</span><span class="token function">getUnloadedClassCount</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span>tags<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;The total number of classes unloaded since the Java virtual machine has started execution&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">baseUnit</span><span class="token punctuation">(</span><span class="token class-name">BaseUnits</span><span class="token punctuation">.</span><span class="token constant">CLASSES</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250527150251448.png" alt="image-20250527150251448" tabindex="0" loading="lazy"><figcaption>image-20250527150251448</figcaption></figure><figure><img src="http://47.101.155.205/image-20250527150417965.png" alt="image-20250527150417965" tabindex="0" loading="lazy"><figcaption>image-20250527150417965</figcaption></figure><h3 id="gauges" tabindex="-1"><a class="header-anchor" href="#gauges"><span>Gauges</span></a></h3><p>仪表是获取当前值的媒介。测量的典型示例是集合或映射的大小，或者处于运行状态的线程数。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 一种更常见的仪表形式是监视一些非数字对象的仪表。最后一个参数建立了一个函数，该函数用于在观察量规时确定量规的值。</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">gauge</span><span class="token punctuation">(</span><span class="token string">&quot;listGauge&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token operator">::</span><span class="token function">size</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// </span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">gaugeCollectionSize</span><span class="token punctuation">(</span><span class="token string">&quot;listSize2&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Tags</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">gaugeMapSize</span><span class="token punctuation">(</span><span class="token string">&quot;mapGauge&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Tags</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>spring-boot-starter-actuator桥接Prometheus创建的Gauge：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// registry registry io.micrometer.prometheus.PrometheusMeterRegistry</span></span>
<span class="line"><span class="token comment">// tags Iterable io.micrometer.core.instrument.Tag</span></span>
<span class="line"><span class="token class-name">AtomicLong</span> liveDataSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 通过GC回调修改liveDataSize的值</span></span>
<span class="line"><span class="token class-name">Gauge</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;jvm.gc.live.data.size&quot;</span><span class="token punctuation">,</span> liveDataSize<span class="token punctuation">,</span> <span class="token class-name">AtomicLong</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span>tags<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Size of old generation memory pool after a full GC&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">baseUnit</span><span class="token punctuation">(</span><span class="token class-name">BaseUnits</span><span class="token punctuation">.</span><span class="token constant">BYTES</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250527145843952.png" alt="image-20250527145843952" tabindex="0" loading="lazy"><figcaption>image-20250527145843952</figcaption></figure><figure><img src="http://47.101.155.205/image-20250527145928764.png" alt="image-20250527145928764" tabindex="0" loading="lazy"><figcaption>image-20250527145928764</figcaption></figure><p>创建<code>Gauge</code>时不会获得对<code>Gauge</code>的引用。相反，你会得到对正在观察的事物的引用：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 获取gauge的观察的引用</span></span>
<span class="line"><span class="token class-name">AtomicInteger</span> myGauge <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">gauge</span><span class="token punctuation">(</span><span class="token string">&quot;numberGauge&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在其他地方，您可以使用对象引用更新它保存的值</span></span>
<span class="line">myGauge<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myGauge<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>流式构建Gauge：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Gauge</span> gauge <span class="token operator">=</span> <span class="token class-name">Gauge</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;gauge&quot;</span><span class="token punctuation">,</span> myObj<span class="token punctuation">,</span> myObj<span class="token operator">::</span><span class="token function">gaugeValue</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;a description of what this gauge does&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token string">&quot;region&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>如果Gauge的引用被回收，报告的内容回事NaN或不记录。</strong></p><h4 id="timegauge" tabindex="-1"><a class="header-anchor" href="#timegauge"><span>TimeGauge</span></a></h4><p><code>TimeGauge</code>是跟踪时间值的专用度量，该值将被缩放到每个注册中心实现所期望的基本时间单位。</p><p><strong>TimeGauge注册到TimeUnit ：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">AtomicInteger</span> msTimeGauge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">AtomicInteger</span> usTimeGauge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">TimeGauge</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;my.gauge&quot;</span><span class="token punctuation">,</span> msTimeGauge<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> <span class="token class-name">AtomicInteger</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">TimeGauge</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;my.other.gauge&quot;</span><span class="token punctuation">,</span> usTimeGauge<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">,</span> <span class="token class-name">AtomicInteger</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>Prometheus转换的内容：</strong></p><div class="language-markdown" data-highlighter="prismjs" data-ext="md" data-title="md"><pre><code><span class="line"><span class="token title important"><span class="token punctuation">#</span> HELP my_gauge_seconds</span></span>
<span class="line"><span class="token title important"><span class="token punctuation">#</span> TYPE my_gauge_seconds gauge</span></span>
<span class="line">my_gauge_seconds 4.0</span>
<span class="line"><span class="token title important"><span class="token punctuation">#</span> HELP my_other_gauge_seconds</span></span>
<span class="line"><span class="token title important"><span class="token punctuation">#</span> TYPE my_other_gauge_seconds gauge</span></span>
<span class="line">my_other_gauge_seconds 0.004</span>
<span class="line"></span></code></pre></div><h4 id="multi-gauge" tabindex="-1"><a class="header-anchor" href="#multi-gauge"><span>Multi-gauge</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// SELECT count(*) from job group by status WHERE job = &#39;dirty&#39;</span></span>
<span class="line"><span class="token class-name">MultiGauge</span> statuses <span class="token operator">=</span> <span class="token class-name">MultiGauge</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;statuses&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;job&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dirty&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;The number of widgets in various statuses&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">baseUnit</span><span class="token punctuation">(</span><span class="token string">&quot;widgets&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// run this whenever you re-run your query</span></span>
<span class="line">statuses<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span></span>
<span class="line">    resultSet<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> <span class="token class-name">Row</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Tags</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token boolean">true</span> <span class="token comment">// whether to overwrite the previous value or only record it once</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timers" tabindex="-1"><a class="header-anchor" href="#timers"><span>Timers</span></a></h3><p>Timer用于测量低延迟，高频率的事件。不支持负值记录。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token class-name">Timer</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;my.timer&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;a description of what this timer does&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token string">&quot;region&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>Timer实现<code>CumulativeTimer</code>和<code>StepTimer</code>的最大统计值是时间窗口最大值TimeWindowMax。</p><p><strong>spring-boot-starter-actuator桥接Prometheus创建的Timer：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// registry io.micrometer.prometheus.PrometheusMeterRegistry</span></span>
<span class="line"><span class="token comment">// 使用record(long amount, TimeUnit unit)直接记录GC赞同时间</span></span>
<span class="line"><span class="token comment">// 通过玩GC中注册回调</span></span>
<span class="line"><span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;jvm.gc.pause&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token string">&quot;action&quot;</span><span class="token punctuation">,</span> gcAction<span class="token punctuation">,</span> <span class="token string">&quot;cause&quot;</span><span class="token punctuation">,</span> gcCause<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Time spent in GC pause&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span>duration<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250527143804137.png" alt="image-20250527143804137" tabindex="0" loading="lazy"><figcaption>image-20250527143804137</figcaption></figure><figure><img src="http://47.101.155.205/image-20250527144047312.png" alt="image-20250527144047312" tabindex="0" loading="lazy"><figcaption>image-20250527144047312</figcaption></figure><p><strong>记录代码块：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">timer<span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">dontCareAboutReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">timer<span class="token punctuation">.</span><span class="token function">recordCallable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">returnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Runnable</span> r <span class="token operator">=</span> timer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">dontCareAboutReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token class-name">Callable</span> c <span class="token operator">=</span> timer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">returnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>在Timer.Sample中存储开始状态：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Timer<span class="token punctuation">.</span>Sample</span> sample <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// do stuff</span></span>
<span class="line"><span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">sample<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token string">&quot;my.timer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;response&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="timed" tabindex="-1"><a class="header-anchor" href="#timed"><span>@Timed</span></a></h4><p><code>micrometer-core</code>模块的<code>@Timed</code>注解可以为方法添加计时支持。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimedConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token annotation punctuation">@Bean</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token class-name">TimedAspect</span> <span class="token function">timedAspect</span><span class="token punctuation">(</span><span class="token class-name">MeterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TimedAspect</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleService</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Timed</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// @Timed 记录方法执行的耗时，正常退出或异常退出</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Async</span></span>
<span class="line">  <span class="token annotation punctuation">@Timed</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// @Timed 记录方法执行的耗时，正常返回CompletableFuture或异常结束</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="metertag" tabindex="-1"><a class="header-anchor" href="#metertag"><span>@MeterTag</span></a></h4><p>在方法参数使用<code>@MeterTag</code>注解。创建<code>TimedAspect</code>的Bean添加<code>MeterTagAnnotationHandler</code>。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ValueResolver</span> valueResolver <span class="token operator">=</span> parameter <span class="token operator">-&gt;</span> <span class="token string">&quot;Value from myCustomTagValueResolver [&quot;</span> <span class="token operator">+</span> parameter <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">ValueExpressionResolver</span> valueExpressionResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelValueExpressionResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">timedAspect<span class="token punctuation">.</span><span class="token function">setMeterTagAnnotationHandler</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">MeterTagAnnotationHandler</span><span class="token punctuation">(</span>aClass <span class="token operator">-&gt;</span> valueResolver<span class="token punctuation">,</span> aClass <span class="token operator">-&gt;</span> valueExpressionResolver<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>MeterTagClassInterface接口：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">MeterTagClassInterface</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Timed</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">getAnnotationForTagValueResolver</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MeterTag</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> resolver <span class="token operator">=</span> <span class="token class-name">ValueResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token class-name">String</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Timed</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">getAnnotationForTagValueExpression</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token annotation punctuation">@MeterTag</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;&#39;hello&#39; + &#39; characters&#39;&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Timed</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">getAnnotationForArgumentToString</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MeterTag</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Timed</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">getMultipleAnnotationsForTagValueExpression</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token annotation punctuation">@MeterTag</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;&#39;value1: &#39; + value1&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@MeterTag</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    expression <span class="token operator">=</span> <span class="token string">&quot;&#39;value2: &#39; + value2&quot;</span><span class="token punctuation">)</span> <span class="token class-name">DataHolder</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>MeterTagClassInterface接口测试，实现的方法也要有注解：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">service<span class="token punctuation">.</span><span class="token function">getAnnotationForArgumentToString</span><span class="token punctuation">(</span><span class="token number">15L</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">assertThat</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;method.timed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;15&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">service<span class="token punctuation">.</span><span class="token function">getAnnotationForTagValueResolver</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">assertThat</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;method.timed&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Value from myCustomTagValueResolver [foo]&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">service<span class="token punctuation">.</span><span class="token function">getAnnotationForTagValueExpression</span><span class="token punctuation">(</span><span class="token string">&quot;15L&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">assertThat</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;method.timed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello characters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">service<span class="token punctuation">.</span><span class="token function">getMultipleAnnotationsForTagValueExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataHolder</span><span class="token punctuation">(</span><span class="token string">&quot;zxe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;qwe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">assertThat</span><span class="token punctuation">(</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;method.timed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1: zxe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2: qwe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="function-tracking-timers" tabindex="-1"><a class="header-anchor" href="#function-tracking-timers"><span>Function-tracking Timers</span></a></h4><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">IMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token comment">// suppose we have a Hazelcast cache</span></span>
<span class="line">registry<span class="token punctuation">.</span><span class="token function">more</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token string">&quot;cache.gets.latency&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Tags</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cache<span class="token punctuation">,</span></span>
<span class="line">    c <span class="token operator">-&gt;</span> c<span class="token punctuation">.</span><span class="token function">getLocalMapStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getGetOperationCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">    c <span class="token operator">-&gt;</span> c<span class="token punctuation">.</span><span class="token function">getLocalMapStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTotalGetLatency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span> </span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">IMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">FunctionTimer</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;cache.gets.latency&quot;</span><span class="token punctuation">,</span> cache<span class="token punctuation">,</span></span>
<span class="line">        c <span class="token operator">-&gt;</span> c<span class="token punctuation">.</span><span class="token function">getLocalMapStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getGetOperationCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        c <span class="token operator">-&gt;</span> c<span class="token punctuation">.</span><span class="token function">getLocalMapStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTotalGetLatency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Cache gets&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pause-detection" tabindex="-1"><a class="header-anchor" href="#pause-detection"><span>Pause Detection</span></a></h4><p><strong>自定义暂停检测器：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">registry<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pauseDetector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClockDriftPauseDetector</span><span class="token punctuation">(</span>sleepInterval<span class="token punctuation">,</span> pauseThreshold<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">registry<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pauseDetector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NoPauseDetector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="memory-footprint-estimation" tabindex="-1"><a class="header-anchor" href="#memory-footprint-estimation"><span>Memory Footprint Estimation</span></a></h4><p>Timer是消耗内存最多的测量器。</p><ul><li>R：环缓冲区长度。在所有示例中，我们都假定默认值为3。R是用Timer.builder.distributionStatisticBufferLength设置的。</li><li>B：总直方图桶。可以是SLO边界或百分位直方图桶。默认情况下，计时器被限制为最小期望值1ms和最大期望值30秒，在适用的情况下，为百分位数直方图产生66个桶。</li><li>I：暂停补偿的区间估计器。1.7 kb。</li><li>M：Time-decaying max。104字节。</li><li>Fb：固定边界直方图。8b * B * R</li><li>Pp：百分位精度。缺省值是1。一般在[0,3]的范围内。Pp是用Timer.Builder.percentilePrecision设置的。</li><li>Hdr(Pp)：高动态范围直方图。 <ul><li>When Pp = 0: 1.9kb * R + 0.8kb</li><li>When Pp = 1: 3.8kb * R + 1.1kb</li><li>When Pp = 2: 18.2kb * R + 4.7kb</li><li>When Pp = 3: 66kb * R + 33kb</li></ul></li></ul><figure><img src="http://47.101.155.205/image-20250522212245193.png" alt="image-20250522212245193" tabindex="0" loading="lazy"><figcaption>image-20250522212245193</figcaption></figure><h3 id="distribution-summaries" tabindex="-1"><a class="header-anchor" href="#distribution-summaries"><span>Distribution Summaries</span></a></h3><p>分布摘要跟踪事件的分布。它在结构上类似于计时器，但记录的值不代表时间单位。例如，您可以使用分发摘要来度量到达服务器的请求的有效负载大小。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">DistributionSummary</span> summary <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">summary</span><span class="token punctuation">(</span><span class="token string">&quot;response.size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">DistributionSummary</span> summary <span class="token operator">=</span> <span class="token class-name">DistributionSummary</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;response.size&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;a description of what this summary does&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">baseUnit</span><span class="token punctuation">(</span><span class="token string">&quot;bytes&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional </span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token string">&quot;region&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// optional </span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><code>DistributionSummary</code>实现（如<code>CumulativeDistributionSummary</code>和<code>StepDistributionSummary</code>）的最大值是时间窗最大值<code>TimeWindowMax</code>。</p><h4 id="scaling-and-histograms" tabindex="-1"><a class="header-anchor" href="#scaling-and-histograms"><span>Scaling and Histograms</span></a></h4><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">DistributionSummary</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;my.ratio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">DistributionSummary</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;my.ratio&quot;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">serviceLevelObjectives</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="memory-footprint-estimation-1" tabindex="-1"><a class="header-anchor" href="#memory-footprint-estimation-1"><span>Memory Footprint Estimation</span></a></h4><p>根据选择的选项，分布摘要的总内存占用可能会有很大差异。</p><ul><li>R：环缓冲区长度。在所有示例中，我们都假定默认值为3。R是用DistributionSummary.Builder.distributionStatisticBufferLength设置的。</li><li>B：总直方图桶。它可以是SLO边界或百分位直方图桶。默认情况下，摘要没有最小和最大期望值，所以我们发布所有276个预定的直方图桶。当您打算发布百分位数直方图时，您应该始终使用minimumExpectedValue和maximumExpectedValue来夹紧分布摘要。</li><li>M：Time-decaying max。104字节。</li><li>Fb：固定边界直方图。8b * B * R</li><li>Pp：百分位精度。缺省值是1。取值范围一般为[0,3]。Pp是用DistributionSummary.Builder.percentilePrecision设置的。</li><li>Hdr(Pp)：高动态范围直方图。 <ul><li>When Pp = 0: 1.9kb * R + 0.8kb</li><li>When Pp = 1: 3.8kb * R + 1.1kb</li><li>When Pp = 2: 18.2kb * R + 4.7kb</li><li>When Pp = 3: 66kb * R + 33kb</li></ul></li></ul><figure><img src="http://47.101.155.205/image-20250522213035762.png" alt="image-20250522213035762" tabindex="0" loading="lazy"><figcaption>image-20250522213035762</figcaption></figure><h3 id="long-task-timers" tabindex="-1"><a class="header-anchor" href="#long-task-timers"><span>Long Task Timers</span></a></h3><p>长任务<code>Timer</code>是一种特殊类型的计时器，记录长时间运行的任务开始时间和持续时间，并同时监控有多少个任务正在运行。</p><p>长任务Timer至少发布以下统计信息：</p><ul><li>活动任务数；</li><li>活动任务的总持续时间；</li><li>活动任务最大持续时间。</li></ul><p><strong>Spring使用长任务Timer：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Timed</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;aws.scrape&quot;</span><span class="token punctuation">,</span> longTask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">360000</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">scrapeResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>编码使用长任务Timer：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">LongTaskTimer</span> scrapeTimer <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">more</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longTaskTimer</span><span class="token punctuation">(</span><span class="token string">&quot;scrape&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">scrapeResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    scrapeTimer<span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>长任务计时器的<code>Fluent</code>构建器：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">LongTaskTimer</span> longTaskTimer <span class="token operator">=</span> <span class="token class-name">LongTaskTimer</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;long.task.timer&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;a description of what this timer does&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token string">&quot;region&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>可以对任务运行时间较长的做警告。</strong></p><h3 id="histograms-and-percentiles" tabindex="-1"><a class="header-anchor" href="#histograms-and-percentiles"><span>Histograms and Percentiles</span></a></h3><p>计时器和分布摘要支持收集数据以观察其百分位数分布。查看百分位数有两种主要方法：</p><ul><li><strong>百分位柱状图(Percentile histograms)</strong>：Micrometer将值累积到底柱状方图中，并将一组预先确定的桶发送到监控系统。监控系统的查询语言负责计算该柱状图的百分位数。目前，只有Prometheus、Atlas和Wavefront分别通过histogram_quantile、:percentile和hs()支持基于直方图的百分位数近似值。如果您的目标是Prometheus、Atlas或Wavefront，则更喜欢这种方法，因为您可以跨维度聚合柱状图（通过将一组维度上的桶的值相加），并从柱状图中获得可聚合的百分位数。</li><li><strong>客户端百分位数(Client-side percentiles)</strong>：Micrometer计算每个Meter ID（一组名称和标签）的百分位数近似值，并将百分位数值发送到监控系统。这并不像百分位数直方图那样灵活，因为不可能在标签之间汇总百分位数近似值。然而，对于不支持基于直方图的服务器端百分位数计算的监控系统，它提供了对百分位数分布的某种程度的了解。</li></ul><p><strong>使用Timer构建的柱状图：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;my.timer&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 用于发布在应用程序中计算的百分位数。这些值在各个维度上是不可聚合的</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">publishPercentiles</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.95</span><span class="token punctuation">)</span> <span class="token comment">// 中位数和第95百分位</span></span>
<span class="line">    <span class="token comment">// </span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">publishPercentileHistogram</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 用于发布由slo定义的桶的累积直方图。当在支持可聚合百分位数的监视系统上与publishPercentileHistogram一起使用时，此设置将向发布的直方图添加额外的桶。当在不支持可聚合百分位数的系统上使用时，此设置将导致仅使用这些桶发布直方图。</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">serviceLevelObjectives</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line">    <span class="token comment">// 控制publishPercentileHistogram发送的桶的数量，并控制底层HdrHistogram结构的准确性和内存占用。</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">minimumExpectedValue</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">maximumExpectedValue</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>给myservice开始的计时器启用客户端百分位数：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">registry<span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token string">&quot;myservice.http.requests&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">registry<span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token string">&quot;myservice.db.requests&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">registry<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">meterFilter</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">MeterFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">DistributionStatisticConfig</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Meter<span class="token punctuation">.</span>Id</span> id<span class="token punctuation">,</span> <span class="token class-name">DistributionStatisticConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;myservice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token class-name">DistributionStatisticConfig</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">percentiles</span><span class="token punctuation">(</span><span class="token number">0.95</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> config<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="meter-provider" tabindex="-1"><a class="header-anchor" href="#meter-provider"><span>Meter Provider</span></a></h3><p><strong>测量job执行的结果：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Timer<span class="token punctuation">.</span>Sample</span> sample <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Result</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;job.execution&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;job.name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;job&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sample<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码有两个问题：每次执行创建<code>Timer.Builder</code>对象的开销以及GC。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 可以替换成这样</span></span>
<span class="line"><span class="token comment">// 这样有局限性</span></span>
<span class="line">registry<span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token string">&quot;job.execution&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;job.name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my-job&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>使用MeterProvider解决问题。MeterProvider可以和Counter, Timer, LongTaskTimer, DistributionSummary一起使用。</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 提前创建好的属性</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">MeterProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Timer</span><span class="token punctuation">&gt;</span></span> timerProvider <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;job.execution&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;job.name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my-job&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">withRegistry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Timer<span class="token punctuation">.</span>Sample</span> sample <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Result</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 记录tag</span></span>
<span class="line">sample<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span>timerProvider<span class="token punctuation">.</span><span class="token function">withTags</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,212)]))}const i=s(e,[["render",o],["__file","Micrometer.html.vue"]]),u=JSON.parse('{"path":"/springboot/Micrometer.html","title":"Micrometer","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"Micrometer抽象介绍","slug":"micrometer抽象介绍","link":"#micrometer抽象介绍","children":[{"level":3,"title":"支持的监控系统","slug":"支持的监控系统","link":"#支持的监控系统","children":[]},{"level":3,"title":"Meters","slug":"meters","link":"#meters","children":[]},{"level":3,"title":"Registry","slug":"registry","link":"#registry","children":[]},{"level":3,"title":"Naming Meters","slug":"naming-meters","link":"#naming-meters","children":[]},{"level":3,"title":"Meter Filters","slug":"meter-filters","link":"#meter-filters","children":[]},{"level":3,"title":"Rate Aggregation","slug":"rate-aggregation","link":"#rate-aggregation","children":[]},{"level":3,"title":"Counters","slug":"counters","link":"#counters","children":[]},{"level":3,"title":"Gauges","slug":"gauges","link":"#gauges","children":[]},{"level":3,"title":"Timers","slug":"timers","link":"#timers","children":[]},{"level":3,"title":"Distribution Summaries","slug":"distribution-summaries","link":"#distribution-summaries","children":[]},{"level":3,"title":"Long Task Timers","slug":"long-task-timers","link":"#long-task-timers","children":[]},{"level":3,"title":"Histograms and Percentiles","slug":"histograms-and-percentiles","link":"#histograms-and-percentiles","children":[]},{"level":3,"title":"Meter Provider","slug":"meter-provider","link":"#meter-provider","children":[]}]}],"git":{"updatedTime":1760063112000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":4,"url":"https://github.com/oycm"},{"name":"ouyangcm","username":"ouyangcm","email":"mingorg@163.com","commits":3,"url":"https://github.com/ouyangcm"}]},"filePathRelative":"springboot/Micrometer.md"}');export{i as comp,u as data};
