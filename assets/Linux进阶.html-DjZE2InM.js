import{_ as a,c as n,e,o as l}from"./app-DO9Fsueg.js";const p={};function i(t,s){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="linux进阶" tabindex="-1"><a class="header-anchor" href="#linux进阶"><span>Linux进阶</span></a></h1><h2 id="oomkiller事件" tabindex="-1"><a class="header-anchor" href="#oomkiller事件"><span>OOMkiller事件</span></a></h2><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># /var/log/messages或/var/log/syslog日志</span></span>
<span class="line"><span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;oom&#39;</span> /var/log/messages   <span class="token comment"># CentOS/RHEL</span></span>
<span class="line"><span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;killed process&#39;</span> /var/log/messages</span>
<span class="line"></span>
<span class="line"><span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;oom&#39;</span> /var/log/syslog     <span class="token comment"># Ubuntu/Debian</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># dmesg日志查看OOMkiller事件</span></span>
<span class="line"><span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;oom&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;killed&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 内容较多的翻页功能</span></span>
<span class="line"><span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;oom&#39;</span> <span class="token operator">|</span> <span class="token function">less</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250210170444821.png" alt="image-20250210170444821" tabindex="0" loading="lazy"><figcaption>image-20250210170444821</figcaption></figure><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查询oom的统计信息</span></span>
<span class="line"><span class="token function">cat</span> /proc/vmstat <span class="token operator">|</span> <span class="token function">grep</span> oom</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查询进程的 OOM 评分</span></span>
<span class="line"><span class="token comment"># 越高的值表示进程越容易被 OOM 杀死</span></span>
<span class="line"><span class="token function">cat</span> /proc/<span class="token operator">&lt;</span>PID<span class="token operator">&gt;</span>/oom_score</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 可以手动调整进程的 OOM 权重</span></span>
<span class="line"><span class="token function">cat</span> /proc/<span class="token operator">&lt;</span>PID<span class="token operator">&gt;</span>/oom_score_adj</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 列出所有进程的oom分数</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">pid</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">-o</span> pid<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$pid</span>: &quot;</span><span class="token punctuation">;</span> <span class="token function">cat</span> /proc/<span class="token variable">$pid</span>/oom_score<span class="token punctuation">;</span> <span class="token keyword">done</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-k2</span> <span class="token parameter variable">-nr</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-10</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="kill-3" tabindex="-1"><a class="header-anchor" href="#kill-3"><span>kill -3</span></a></h2><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 发送 SIGQUIT 信号,将线程dump文件输出到标准输出(stdout)</span></span>
<span class="line"><span class="token function">kill</span> <span class="token parameter variable">-3</span> <span class="token operator">&lt;</span>java-pid<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>启动方式</th><th>dump内容位置</th></tr></thead><tbody><tr><td>java -jar jar包</td><td>终端(stdout)</td></tr><tr><td>nohup java -jar jar包 &amp;</td><td>nohup.out</td></tr><tr><td>nohup java -jar jar包 &gt; output 2&gt;&amp;1 &amp;</td><td>output</td></tr><tr><td>docker run</td><td>docker logs <code>container-id</code></td></tr><tr><td>systemd 启动</td><td>journalctl -u <code>service</code></td></tr></tbody></table><figure><img src="http://47.101.155.205/image-20250210171734554.png" alt="image-20250210171734554" tabindex="0" loading="lazy"><figcaption>image-20250210171734554</figcaption></figure><h2 id="调整系统交换内存" tabindex="-1"><a class="header-anchor" href="#调整系统交换内存"><span>调整系统交换内存</span></a></h2><p>创建</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 创建4GB大小的swap文件</span></span>
<span class="line"><span class="token function">sudo</span> fallocate <span class="token parameter variable">-l</span> 4G /swapfile</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 设置正确的权限</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">600</span> /swapfile</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 格式化为swap</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">mkswap</span> /swapfile</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 启用swap文件</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">swapon</span> /swapfile</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 交换文件是否生效</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">swapon</span> <span class="token parameter variable">--show</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 指向后，系统重启也生效</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;/swapfile none swap sw 0 0&#39;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/fstab</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250420154249576.png" alt="image-20250420154249576" tabindex="0" loading="lazy"><figcaption>image-20250420154249576</figcaption></figure><p>安全删除swap：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> swapoff /swapfile</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">rm</span> /swapfile</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="连接相关命令" tabindex="-1"><a class="header-anchor" href="#连接相关命令"><span>连接相关命令</span></a></h2><p>Linux服务器之间进行文件拷贝：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 执行命令后需要进行密码认证</span></span>
<span class="line"><span class="token comment"># 拷贝单个文件到其它指定的服务器</span></span>
<span class="line"><span class="token function">scp</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> <span class="token punctuation">[</span>user<span class="token punctuation">]</span>@<span class="token punctuation">[</span>ip<span class="token punctuation">]</span>:<span class="token operator">&lt;</span>path<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment"># 递归拷贝目录</span></span>
<span class="line"><span class="token function">scp</span> <span class="token parameter variable">-r</span> <span class="token operator">&lt;</span>path<span class="token operator">&gt;</span> <span class="token punctuation">[</span>user<span class="token punctuation">]</span>@<span class="token punctuation">[</span>ip<span class="token punctuation">]</span>:<span class="token operator">&lt;</span>path<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 指定端口</span></span>
<span class="line"><span class="token function">scp</span> <span class="token parameter variable">-P</span> <span class="token number">23</span> <span class="token operator">&lt;</span>path<span class="token operator">&gt;</span> <span class="token punctuation">[</span>user<span class="token punctuation">]</span>@<span class="token punctuation">[</span>ip<span class="token punctuation">]</span>:<span class="token operator">&lt;</span>path<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>ssh连接其它服务器：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 执行后需要输入密码</span></span>
<span class="line"><span class="token function">ssh</span> <span class="token parameter variable">-v</span> <span class="token punctuation">[</span>user<span class="token punctuation">]</span>@<span class="token punctuation">[</span>ip<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>修改Linux连接端口：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 备份文件</span></span>
<span class="line"><span class="token function">cp</span> /etc/ssh/sshd_config /etc/ssh/sshd_config_bak</span>
<span class="line"><span class="token comment"># 修改文件</span></span>
<span class="line"><span class="token function">vim</span> /etc/ssh/sshd_config</span>
<span class="line"><span class="token comment"># 添加需要监听的端口</span></span>
<span class="line">Port <span class="token number">22</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 保存后，重启sshd服务</span></span>
<span class="line"><span class="token function">sudo</span> systemctl restart sshd</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 还原</span></span>
<span class="line"><span class="token function">cp</span> /etc/ssh/sshd_config_bak /etc/ssh/sshd_config</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定时删除日志文件" tabindex="-1"><a class="header-anchor" href="#定时删除日志文件"><span>定时删除日志文件</span></a></h2><p>设置步骤：</p><ol><li>准备删除日志文件的脚本；</li><li>通过crontab定时执行删除脚本；</li></ol><p><strong>删除第30天前的文件：rm30days.sh</strong></p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token assign-left variable">path</span><span class="token operator">=</span>/springboot/spring-kafka/log</span>
<span class="line"><span class="token assign-left variable">date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">date</span> <span class="token parameter variable">--date</span><span class="token operator">=</span><span class="token string">&quot;30 days ago&quot;</span> <span class="token string">&quot;+%Y-%m-%d&quot;</span><span class="token variable">\`</span></span></span>
<span class="line"><span class="token comment"># 注意&quot;+%Y-%m-%d&quot; 要和日志文件名称一致</span></span>
<span class="line"><span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token variable">$path</span>/<span class="token variable">$date</span><span class="token string">&#39;.log&#39;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>crontab命令添加执行命令：</strong></p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">crontab</span> <span class="token parameter variable">-e</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 每天10点执行定时</span></span>
<span class="line"><span class="token number">0</span> <span class="token number">10</span> * * * <span class="token function">sh</span> /springboot/spring-kafka/rm30days.sh</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250428144348107.png" alt="image-20250428144348107" tabindex="0" loading="lazy"><figcaption>image-20250428144348107</figcaption></figure><p><strong>会在/var/spool/mail/root文件中生成通知。</strong></p><h2 id="监控命令" tabindex="-1"><a class="header-anchor" href="#监控命令"><span>监控命令</span></a></h2><h3 id="vmstat" tabindex="-1"><a class="header-anchor" href="#vmstat"><span>vmstat</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">vmstat</span> </span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>可接参数：</p><ul><li>n：多少秒输出一次统计信息。</li><li>n m：多少n秒输出一次统计信息，共m次。</li></ul><figure><img src="http://47.101.155.205/image-20250517212232784.png" alt="image-20250517212232784" tabindex="0" loading="lazy"><figcaption>image-20250517212232784</figcaption></figure><p>显示数据列的含义：</p><p><strong>procs</strong>进程相关：</p><ul><li>r：表示等待CPU资源的进程数（不包含等待IO的进程）。如果这个数值大于计算机的CPU核数，那么计算机的CPU资源已近饱和。</li><li>b：处于不可中断睡眠状态的进程数（包含等待IO的进程）。高值可能表示IO瓶颈。</li></ul><p><strong>memory</strong>内存相关，单位KB：</p><ul><li>swpd：已使用的虚拟内存（交换内存）大小。持续增长可能表示物理内存不足，系统开始频繁使用交换内存。</li><li>free：空闲的物理内存大小。过小的值可能表示内存紧张，但需结合缓存使用情况判断。</li><li>buff：用作缓冲区的内存大小，用于缓存磁盘块的临时读写。</li><li>cache：用作缓存的内存大小，用于缓存文件系统的数据（如打开的文件）。buff和cache会被内核自动释放，供应用程序需要时使用。</li></ul><p><strong>swap</strong>交换内存，单位KB/s：</p><ul><li>si：<strong>swap-in</strong>，每秒从交换内存读取的数据量。持续大于 0 表示物理内存不足。</li><li>so：<strong>swap-out</strong>，每秒从交换内存读取的数据量。持续大于0同样表示内存不足。</li></ul><p><strong>io</strong>块设备，IO相关，单位：块/s：</p><ul><li>bi：<strong>blocks-in</strong>，每秒从块设备（如磁盘）读取的块数。高值表示磁盘读操作频繁（1 块 = 通常为 512 字节或 1KB）。</li><li>bo：<strong>blocks-out</strong>，每秒写入块设备的块数。高值表示磁盘写操作频繁，可能影响系统性能。</li></ul><p><strong>system</strong>系统事件：</p><ul><li>in：<strong>interrupts</strong>，每秒发生的中断次数（包括时钟中断和硬件设备中断）。</li><li>cs：<strong>context switches</strong>，每秒的上下文切换次数（CPU 从一个进程切换到另一个进程的次数）。高值可能表示进程争用CPU或调度频繁。</li></ul><p><strong>cpu</strong>使用率，百分比：</p><ul><li>us：<strong>user</strong>，用户态程序占用CPU时间的百分比（非内核进程）。高值表示应用程序消耗大量CPU。</li><li>sy：<strong>system</strong>，内核态程序占用 CPU 时间的百分比。高值可能表示系统调用频繁或内核处理任务较重。</li><li>id：<strong>idle</strong>，CPU空闲时间的百分比。低值表示 CPU 繁忙，需结合其他指标判断瓶颈。</li><li>wa：<strong>wait</strong>，CPU等待IO完成的时间百分比。高值（如&gt;20%）通常表示IO瓶颈（磁盘或网络延迟）。</li><li>st：<strong>stolen</strong>，在虚拟化环境中，被其他虚拟机占用的CPU时间百分比。高值表示宿主机的CPU资源被其他虚拟机争抢。</li></ul><h3 id="dmesg" tabindex="-1"><a class="header-anchor" href="#dmesg"><span>dmesg</span></a></h3><p>display message命令是 Linux 系统中用于查看内核环缓冲区（kernel ring buffer）消息的工具，它记录了系统启动信息和内核在运行过程中输出的各种日志信息。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看最近的错误/警告日志</span></span>
<span class="line"><span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-iE</span> <span class="token string">&#39;error|fail|warn&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查询Linux oom-killer事件</span></span>
<span class="line"><span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;oom&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查询tcp事件情况</span></span>
<span class="line"><span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> tcp</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="iostat" tabindex="-1"><a class="header-anchor" href="#iostat"><span>iostat</span></a></h3><p>观察系统磁盘的使用情况，重点关注IO。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># -x 显示扩展信息 每秒采样一次，共3次</span></span>
<span class="line">iostat <span class="token parameter variable">-x</span> <span class="token number">1</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250518125257853.png" alt="image-20250518125257853" tabindex="0" loading="lazy"><figcaption>image-20250518125257853</figcaption></figure><p><strong>avg-cpu各项含义</strong></p><ul><li>%user：用户态占用CPU的百分比（不包括 nice 优先级）。</li><li>%nice：改变过优先级的用户进程占用CPU百分比。</li><li>%system：内核态占用CPU的百分比。</li><li>%iowait：等待I/O的CPU时间百分比（越高说明I/O越慢）。</li><li>%steal：被虚拟机管理程序抢占的CPU百分比（只对虚拟机有意义）。</li><li>%idle：空闲CPU百分比。</li></ul><p><strong>Device</strong>设备各项说明：</p><ul><li>Device：设备名称，如sda、nvme0n1等。</li><li>rrqm/s：每秒进行的读请求合并数（读队列合并）。</li><li>wrqm/s：每秒进行的写请求合并数（写队列合并）。</li><li>r/s：每秒完成的读请求数。</li><li>w/s：每秒完成的写请求数。</li><li>rkB/s：每秒读的KB。</li><li>wkB/s：每秒写的KB。</li><li>avgrq-sz：平均每次I/O请求的数据大小（单位：扇区）。</li><li>avgqu-sz：平均I/O队列长度（越高表示压力越大）。</li><li>await：平均每个I/O操作的等待时间（毫秒，包括排队+服务时间）。</li><li>r_await：读操作的平均等待时间。</li><li>w_await：写操作的平均等待时间。</li><li>svctm：平均每次设备I/O服务时间（毫秒）。</li><li>%util：设备使用率，表示一秒中有多少时间在处理I/O请求。接近100%意味着设备繁忙或达到极限。</li></ul><h3 id="sar" tabindex="-1"><a class="header-anchor" href="#sar"><span>sar</span></a></h3><p>sar(System Activity Reporter)是Linux系统中非常强大的性能分析工具之一，属于<code>sysstat</code>工具包。它可以收集、报告和保存系统的各种资源使用情况，比如CPU、内存、I/O、网络等。</p><p>可以用它来查看实时性能数据，也可以查看历史的系统运行数据（默认保存在<code>/var/log/sa/</code>下）。</p><p>不同参数作用：</p><ul><li><code>-u</code>：CPU 使用情况</li><li><code>r</code>：内存使用情况</li><li><code>-b</code>：I/O统计</li><li><code>-d</code>：设备读写情况</li><li><code>-n DEV</code>：网络接口情况</li><li><code>-n TCP,ETCP</code>：TCP指标查询</li><li><code>-q</code>：系统平均负载</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">sar <span class="token parameter variable">-u</span> <span class="token number">1</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250518131135577.png" alt="image-20250518131135577" tabindex="0" loading="lazy"><figcaption>image-20250518131135577</figcaption></figure><ul><li>%user：用户态CPU使用率。</li><li>%nice：调整优先级的用户进程的CPU使用率。</li><li>%system：内核态CPU使用率。</li><li>%iowait：等待I/O完成的时间。</li><li>%steal：被虚拟机管理程序占用的CPU时间。</li><li>%idle：空闲CPU时间。</li></ul><figure><img src="http://47.101.155.205/image-20250518131404003.png" alt="image-20250518131404003" tabindex="0" loading="lazy"><figcaption>image-20250518131404003</figcaption></figure><ul><li>kbmemfree：空闲物理内存。</li><li>kbmemused：使用中的物理内存。</li><li>%memused：物理内存使用百分比。</li><li>kbbuffers：用于块设备缓存的内存。</li><li>kbcached：用于文件缓存的内存。</li><li>kbcommit：需要为进程保证的内存。</li><li>%commit：kbcommit 与总内存的比值，表示内存压力。</li><li>kbactive：活跃内存量（最近被访问的内存页，不易被回收）。</li><li>kbinact：非活跃内存量（较长时间未访问，可被页面回收机制回收）。</li><li>kbdirty：等待写入磁盘的脏页数量。<strong>值过高可能导致I/O瓶颈</strong>。</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">sar <span class="token parameter variable">-b</span> <span class="token number">1</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250518132128289.png" alt="image-20250518132128289" tabindex="0" loading="lazy"><figcaption>image-20250518132128289</figcaption></figure><ul><li>tps：每秒传输次数（读+写）。</li><li>rtps：每秒读操作次数。</li><li>wtps：每秒写操作次数。</li><li>bread/s：每秒从块设备读取KB。</li><li>bwrtn/s：每秒向块设备写入KB。</li></ul><figure><img src="http://47.101.155.205/image-20250518132316444.png" alt="image-20250518132316444" tabindex="0" loading="lazy"><figcaption>image-20250518132316444</figcaption></figure><ul><li>DEV：设备名称。</li><li>tps：每秒I/O请求数。</li><li>rd_sec/s：每秒读的扇区数。</li><li>wr_sec/s：每秒写的扇区数。</li><li>avgrq-sz：平均每次I/O请求的数据大小。</li><li>avgqu-sz：平均I/O队列长度。</li><li>await：平均等待时间（ms）。</li><li>svctm：平均服务时间（ms）。</li><li>%util：设备使用率，接近100%表示忙碌。</li></ul><figure><img src="http://47.101.155.205/image-20250518132521252.png" alt="image-20250518132521252" tabindex="0" loading="lazy"><figcaption>image-20250518132521252</figcaption></figure><ul><li>IFACE：网络接口名称。</li><li>rxpck/s：每秒接收的数据包数量。</li><li>txpck/s：每秒发送的数据包数量。</li><li>rxkB/s：每秒接收的数据包量（KB）</li><li>txkB/s：每秒发送的数据包量（KB）</li><li>rxcmp/s：每秒接收的压缩数据包量。</li><li>txcmp/s：每秒发送的压缩数据包量。</li><li>rxmcst/s：每秒接收的多播数据包。</li></ul><figure><img src="http://47.101.155.205/image-20250518134005693.png" alt="image-20250518134005693" tabindex="0" loading="lazy"><figcaption>image-20250518134005693</figcaption></figure><p>TCP统计指标：</p><ul><li>active/s：表示每秒本地发起的TCP连接数，即通过connect调用创建的TCP连接数。</li><li>passive/s：表示每秒远程发起的TCP连接数，即通过accept调用创建的TCP连接数。</li><li>iseg/s：每秒接收到的TCP段（段是TCP的传输单位）。</li><li>oseg/s：每秒发送的TCP段。</li></ul><p>ETCP统计指标：</p><ul><li>atmptf/s：每秒重试失败数。</li><li>estres/s：每秒断开连接数。</li><li>retrans/s：每秒重传数。</li><li>isegerr/s：每秒错误数。</li><li>orsts/s：每秒接收到的TCP RST(连接重置)段数，过高可能代表连接被异常关闭。</li></ul><figure><img src="http://47.101.155.205/image-20250518133141211.png" alt="image-20250518133141211" tabindex="0" loading="lazy"><figcaption>image-20250518133141211</figcaption></figure><ul><li>runq-sz：当前运行队列长度（等待CPU的进程数）。包含正在运行的任务和就绪状态的任务。</li><li>plist-sz：当前进程总数。</li><li>ldavg-1：1分钟平均负载。</li><li>ldavg-5：5分钟平均负载。</li><li>ldavg-15：15分钟平均负载。</li><li>blocked：当前因等待I/O操作而阻塞的任务数量。</li></ul>`,88)]))}const o=a(p,[["render",i],["__file","Linux进阶.html.vue"]]),r=JSON.parse('{"path":"/linux/Linux%E8%BF%9B%E9%98%B6.html","title":"Linux进阶","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"OOMkiller事件","slug":"oomkiller事件","link":"#oomkiller事件","children":[]},{"level":2,"title":"kill -3","slug":"kill-3","link":"#kill-3","children":[]},{"level":2,"title":"调整系统交换内存","slug":"调整系统交换内存","link":"#调整系统交换内存","children":[]},{"level":2,"title":"连接相关命令","slug":"连接相关命令","link":"#连接相关命令","children":[]},{"level":2,"title":"定时删除日志文件","slug":"定时删除日志文件","link":"#定时删除日志文件","children":[]},{"level":2,"title":"监控命令","slug":"监控命令","link":"#监控命令","children":[{"level":3,"title":"vmstat","slug":"vmstat","link":"#vmstat","children":[]},{"level":3,"title":"dmesg","slug":"dmesg","link":"#dmesg","children":[]},{"level":3,"title":"iostat","slug":"iostat","link":"#iostat","children":[]},{"level":3,"title":"sar","slug":"sar","link":"#sar","children":[]}]}],"git":{"updatedTime":1747574333000,"contributors":[{"name":"ouyangcm","username":"ouyangcm","email":"mingorg@163.com","commits":6,"url":"https://github.com/ouyangcm"},{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":3,"url":"https://github.com/oycm"}]},"filePathRelative":"linux/Linux进阶.md"}');export{o as comp,r as data};
