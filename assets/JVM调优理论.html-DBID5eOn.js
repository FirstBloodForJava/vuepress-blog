import{_ as a,c as i,e as n,o as s}from"./app-DO9Fsueg.js";const l={};function t(p,e){return s(),i("div",null,e[0]||(e[0]=[n(`<h1 id="jvm调优理论" tabindex="-1"><a class="header-anchor" href="#jvm调优理论"><span>JVM调优理论</span></a></h1><h2 id="术语解释" tabindex="-1"><a class="header-anchor" href="#术语解释"><span>术语解释</span></a></h2><h3 id="session复制" tabindex="-1"><a class="header-anchor" href="#session复制"><span>Session复制</span></a></h3><p>Session复制是指在分布式系统中，将用户会话(Session)数据从一台服务器复制到另外一台服务器的过程。例如：传统的单体服务环境中，用户的会话数据存储在服务器的本地内存中，在分布式系统中，用户的请求被负载均衡器分发到不同的服务器上，为了确保用户在整个应用程序的体验一致性，特别是在会话数据共享，所采取的Session复制策略。</p><p>Session复制实现的两种方式：</p><ol><li>基于Session的负载均衡：这种方式通过负载均衡器将用一用户的所有请求都路由到一台服务器，从而保持用户的会话状态在用一服务器。可能导致服务器负载不均衡。</li><li>会话共享：将用户的会话数据从一个服务器复制到另外一个服务器。可以通过分布式缓存、数据库存储等方式实现。</li></ol><p>nginx实现基于Session的负载均衡配置：</p><div class="language-conf line-numbers-mode" data-highlighter="prismjs" data-ext="conf" data-title="conf"><pre><code><span class="line">http {</span>
<span class="line">	// 被代理的服务器</span>
<span class="line">    upstream backend {</span>
<span class="line">        server backend1.example.com;</span>
<span class="line">        server backend2.example.com;</span>
<span class="line">        server backend3.example.com;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    server {</span>
<span class="line">        listen 80;</span>
<span class="line"></span>
<span class="line">        location / {</span>
<span class="line">            ip_hash;  # 启用ip_hash模块，基于客户端IP哈希分配</span>
<span class="line">            proxy_pass http://backend;</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="亲合式集群" tabindex="-1"><a class="header-anchor" href="#亲合式集群"><span>亲合式集群</span></a></h3><p>亲合式集群指在分布式系统中的一种策略，其中具有相关性或关联性的任务或数据被分配到同一组或集群中。这可以增加系统性能、降低延迟，并提高数据访问的效率。</p><h3 id="weblogic" tabindex="-1"><a class="header-anchor" href="#weblogic"><span>WebLogic</span></a></h3><p>WebLogic是Oracle提供的一套企业级Java应用服务器(Java EE Application Server)中间件产品。它是一个强大的中间件平台，用于构建、部署和管理企业级应用程序。</p><h3 id="安全点" tabindex="-1"><a class="header-anchor" href="#安全点"><span>安全点</span></a></h3><p>在Java进行垃圾回收时，垃圾回收器通常需要暂停正在执行的Java应用程序的线程，以确保一致性和安全性。这个暂停的点被称为安全点（Safepoint）。在安全点，Java虚拟机确保对象的一致性，执行垃圾回收和其他一些需要线程安全的操作。</p><ul><li>方法调用：安全点通常发生在方法调用的时候，即当线程执行java方法的入口或出口(return)。</li><li>循环跳转：每次循环的开始或结束。</li><li>异常抛出：在抛出异常是，也可能作为安全点。</li></ul><h2 id="案例分析" tabindex="-1"><a class="header-anchor" href="#案例分析"><span>案例分析</span></a></h2><h3 id="大内存硬件上的程序部署策略" tabindex="-1"><a class="header-anchor" href="#大内存硬件上的程序部署策略"><span>大内存硬件上的程序部署策略</span></a></h3><p>如果在一台大内存服务器上部署一个Java程序，所选用的虚拟机不是最新的高性能垃圾收集器，可能会面临一些问题：当程序运行过程中出现了Full GC，可能导致程序的停止时间过长。</p><p>部署单个应用程序：</p><p>能保证在大内存上部署单个应用程序，保证Full GC频次较低，要保证用户使用过程中不能发生GC，例如：十几小时到一整天不发生GC，可以通过用户不怎么使用的流量点，去触发Full GC或者重启应用。出现Full GC的关键是，老年的对象要稳定，要保证进入老年代的对象基本上是能够一直存活的，也就是新生代的对象基本上是朝生夕灭的。在这种情况下，大内存服务器部署单台服务器不会出现太大的问题。</p><p>部署多个应用程序：</p><p>可以搭建一个前置负载均衡器，将这个应用在服务器启动多个建立一个无Session复制的亲合式集群。这个每个应用所占用的堆内存就不会太高，这样进行垃圾收集时，停顿的时间也不会太长。这样也会有一些缺点：有使用本地缓存，会导致内存的浪费。</p><h3 id="堆外内存溢出" tabindex="-1"><a class="header-anchor" href="#堆外内存溢出"><span>堆外内存溢出</span></a></h3><p>堆外内存溢出，配置了-XX:+HeapDumpOnOutOfMemoryError参数，可能也不会生成dump文件。但是系统日志里面可能会打印发生的相关信息。堆外内存的回收不像堆内内存回收一样，是程序通知其要垃圾收集，而是Full GC出现顺带回收。</p><p>-XX:+DisableExplicitGC 关闭人工触发垃圾收集。</p><p>-XX:MaxDirectMemorySize设置直接内存大小。</p><h3 id="虚拟机进程崩溃" tabindex="-1"><a class="header-anchor" href="#虚拟机进程崩溃"><span>虚拟机进程崩溃</span></a></h3><p>一个服务器A的请求存在异步调用另外一台服务器B，这里的调用使用了异步的方式。当被异步调用的服务器响应时间非常慢时，而这是A的请求还在源源不断的进来，它会不断的异步去调用B服务器，这时等待的线程和Socket连接也会越来越多，就可能超过虚拟机的承受能力，导致进程崩溃。个人认为出现这种情况：还需要这个每次的异步调用可能都会开启线程，并没有使用线程池的策略。</p><h3 id="不恰当的垃圾收集导致停顿时间过长" tabindex="-1"><a class="header-anchor" href="#不恰当的垃圾收集导致停顿时间过长"><span>不恰当的垃圾收集导致停顿时间过长</span></a></h3><p>深入理解JVM虚拟机案例：</p><p>启动参数：-Xmn1g -Xms4g -Xmx8g。一个程序会每10分钟在内存中创建100万个HashMap&lt;Long,Long&gt;对象(会占用800MB内存)，这个时候垃圾收集器的Minor GC会造成500毫秒的停顿，出现这种收集时间长的问题，应该和新生代的对象复制到老年代有关，应该是发生GC时这800MB对象没有被回收，而是被复制到老年代，才导致停顿时间这么长。</p><p>解决方法：</p><ol><li>将新生代内存扩大，保证MinorGC会将这个800MB对象不会进入老年代。</li><li>将对象之间进入老年代，最终会面临一个Full GC，停顿时间也不会短。</li></ol><p>启动参数：-Xmn1g -Xms4g -Xmx8g -XX:+UseParNewGC -XX:+PrintGCDetails</p><figure><img src="http://47.101.155.205/image-20240106205820408.png" alt="image-20240106205820408" tabindex="0" loading="lazy"><figcaption>image-20240106205820408</figcaption></figure><p>模拟800MB对象加载和被垃圾对象回收</p><figure><img src="http://47.101.155.205/image-20240106210022649.png" alt="image-20240106210022649" tabindex="0" loading="lazy"><figcaption>image-20240106210022649</figcaption></figure><p>启动参数：-Xmn2g -Xms4g -Xmx8g -XX:+UseParNewGC -XX:+PrintGCDetails，扩大新生代内存空间。</p><figure><img src="http://47.101.155.205/image-20240106210222161.png" alt="image-20240106210222161" tabindex="0" loading="lazy"><figcaption>image-20240106210222161</figcaption></figure><p>启动参数：-Xmn1g -Xms4g -Xmx8g -XX:SurvivorRatio=65536 -XX:MaxTenuringThreshold=0 -XX:+UseParNewGC -XX:+PrintGCDetails 将对象之间存放老年代。</p><figure><img src="http://47.101.155.205/image-20240106210930057.png" alt="image-20240106210930057" tabindex="0" loading="lazy"><figcaption>image-20240106210930057</figcaption></figure><p>总结：你不能保证每次进行对象被标记回收和重新加载之前执行。如果出现对象被加载到老年代，就会面临停顿时间长的问题。可以通过在对象设为null的情况下，System.gc()手动回收一下，这样GC时间就不会太长。</p><figure><img src="http://47.101.155.205/image-20240106210654924.png" alt="image-20240106210654924" tabindex="0" loading="lazy"><figcaption>image-20240106210654924</figcaption></figure><h3 id="避免安全点前出现耗时操作" tabindex="-1"><a class="header-anchor" href="#避免安全点前出现耗时操作"><span>避免安全点前出现耗时操作</span></a></h3><p>安全点导致停顿超时案例：https://juejin.cn/post/6844903878765314061</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-XX:+PrintGCApplicationStoppedTime</td><td>打印STW停顿时间</td></tr><tr><td>-XX:+PrintSafepointStatistics</td><td></td></tr><tr><td>-XX:PrintSafepointStatisticsCount=1</td><td></td></tr><tr><td>-XX:+SafepointTimeout</td><td></td></tr><tr><td>-XX:SafepointTimeoutDelay=2000</td><td></td></tr></tbody></table><h2 id="idea编辑器实战分析" tabindex="-1"><a class="header-anchor" href="#idea编辑器实战分析"><span>IDEA编辑器实战分析</span></a></h2><h3 id="idea启动没有jvm进程" tabindex="-1"><a class="header-anchor" href="#idea启动没有jvm进程"><span>IDEA启动没有JVM进程</span></a></h3><p>使用jps -l查询所有Java启动的JVM进程id，发现没有之前IDEA启动的类，说明可能是出现了什么问题。</p><figure><img src="http://47.101.155.205/image-20240107170107899.png" alt="image-20240107170107899" tabindex="0" loading="lazy"><figcaption>image-20240107170107899</figcaption></figure><p>IDEA插件开发文档：https://plugins.jetbrains.com/docs/intellij/welcome.html?from=jetbrains.org</p>`,51)]))}const d=a(l,[["render",t],["__file","JVM调优理论.html.vue"]]),c=JSON.parse('{"path":"/JVM/JVM%E8%B0%83%E4%BC%98%E7%90%86%E8%AE%BA.html","title":"JVM调优理论","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"术语解释","slug":"术语解释","link":"#术语解释","children":[{"level":3,"title":"Session复制","slug":"session复制","link":"#session复制","children":[]},{"level":3,"title":"亲合式集群","slug":"亲合式集群","link":"#亲合式集群","children":[]},{"level":3,"title":"WebLogic","slug":"weblogic","link":"#weblogic","children":[]},{"level":3,"title":"安全点","slug":"安全点","link":"#安全点","children":[]}]},{"level":2,"title":"案例分析","slug":"案例分析","link":"#案例分析","children":[{"level":3,"title":"大内存硬件上的程序部署策略","slug":"大内存硬件上的程序部署策略","link":"#大内存硬件上的程序部署策略","children":[]},{"level":3,"title":"堆外内存溢出","slug":"堆外内存溢出","link":"#堆外内存溢出","children":[]},{"level":3,"title":"虚拟机进程崩溃","slug":"虚拟机进程崩溃","link":"#虚拟机进程崩溃","children":[]},{"level":3,"title":"不恰当的垃圾收集导致停顿时间过长","slug":"不恰当的垃圾收集导致停顿时间过长","link":"#不恰当的垃圾收集导致停顿时间过长","children":[]},{"level":3,"title":"避免安全点前出现耗时操作","slug":"避免安全点前出现耗时操作","link":"#避免安全点前出现耗时操作","children":[]}]},{"level":2,"title":"IDEA编辑器实战分析","slug":"idea编辑器实战分析","link":"#idea编辑器实战分析","children":[{"level":3,"title":"IDEA启动没有JVM进程","slug":"idea启动没有jvm进程","link":"#idea启动没有jvm进程","children":[]}]}],"git":{"updatedTime":1729607330000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":1,"url":"https://github.com/oycm"}]},"filePathRelative":"JVM/JVM调优理论.md"}');export{d as comp,c as data};
