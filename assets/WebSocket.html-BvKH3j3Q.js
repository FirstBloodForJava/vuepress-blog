import{_ as s,c as a,e,o as t}from"./app-DO9Fsueg.js";const p={};function c(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>WebSocket</span></a></h1><h2 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍"><span>1.介绍</span></a></h2><p>WebSocket协议<code>RFC 6455</code>提供了一种标准化的方式，通过一个TCP连接在客户端和服务器之间建立一个全双工、双向的通信通道。它是一种不同于HTTP的TCP协议，但被设计为在HTTP上工作，使用端口80和443，并允许重用现有的防火墙规则。</p><p>WebSocket交互以HTTP请求开始，该请求使用 HTTP Upgrade 标头进行升级。</p><p>客户端请求：</p><div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line">GET /spring<span class="token punctuation">-</span>websocket<span class="token punctuation">-</span>portfolio/portfolio HTTP/1.1</span>
<span class="line"><span class="token key atrule">Host</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span></span>
<span class="line"><span class="token key atrule">Upgrade</span><span class="token punctuation">:</span> websocket  Upgrade 头</span>
<span class="line"><span class="token key atrule">Connection</span><span class="token punctuation">:</span> Upgrade Upgrade 连接</span>
<span class="line"><span class="token key atrule">Sec-WebSocket-Key</span><span class="token punctuation">:</span> Uc9l9TMkWGbHFD2qnFHltg==</span>
<span class="line"><span class="token key atrule">Sec-WebSocket-Protocol</span><span class="token punctuation">:</span> v10.stomp<span class="token punctuation">,</span> v11.stomp</span>
<span class="line"><span class="token key atrule">Sec-WebSocket-Version</span><span class="token punctuation">:</span> <span class="token number">13</span></span>
<span class="line"><span class="token key atrule">Origin</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8080</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>服务端响应：</p><div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line">HTTP/1.1 101 Switching Protocols 协议切换</span>
<span class="line"><span class="token key atrule">Upgrade</span><span class="token punctuation">:</span> websocket</span>
<span class="line"><span class="token key atrule">Connection</span><span class="token punctuation">:</span> Upgrade</span>
<span class="line"><span class="token key atrule">Sec-WebSocket-Accept</span><span class="token punctuation">:</span> 1qVdfYHU9hPOl4JYYNXF623Gzn0=</span>
<span class="line"><span class="token key atrule">Sec-WebSocket-Protocol</span><span class="token punctuation">:</span> v10.stomp</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>握手成功后，HTTP 升级请求的基础 TCP 套接字将保持打开状态，以便客户端和服务器继续发送和接收消息。</p><p><strong>如果 WebSocket 服务器在 Web 服务器（例如 nginx）后面运行，则可能需要将其配置为将 WebSocket 升级请求传递给 WebSocket 服务器。</strong></p><h3 id="http和websocket" tabindex="-1"><a class="header-anchor" href="#http和websocket"><span>HTTP和WebSocket</span></a></h3><p>尽管 WebSocket 设计为与 HTTP 兼容并以 HTTP 请求开头，但重要的是要了解这两种协议会导致非常不同的体系结构和应用程序编程模型。</p><p>在 HTTP 和 REST 中，应用程序被建模为多个 URL。为了与应用程序交互，客户端以请求-响应样式访问这些 URL。服务器根据 HTTP URL、方法和标头将请求路由到相应的处理程序。</p><p>相比之下，在 WebSocket中，初始连接通常只有一个 URL。随后，所有应用程序消息都在同一 TCP 连接上流动。这指向了一个完全不同的异步、事件驱动的消息传递架构。</p><p>WebSocket 也是一种低级传输协议，与 HTTP 不同，它不对消息内容规定任何语义。这意味着除非客户端和服务器在消息语义上达成一致，否则无法路由或处理消息。</p><p>WebSocket客户端和服务器可以通过 HTTP 握手请求上的<code>Sec-WebSocket-Protocol</code>标头协商使用更高级别的消息传递协议（例如 STOMP）。如果没有这些，他们需要提出自己的惯例。</p><h3 id="什么情况使用websocket" tabindex="-1"><a class="header-anchor" href="#什么情况使用websocket"><span>什么情况使用WebSocket</span></a></h3><p>WebSockets 可以使网页具有动态和交互性。但是，在许多情况下，Ajax 和 HTTP 流式处理或长轮询的组合可以提供简单有效的解决方案。</p><p>例如，新闻、邮件和社交源需要动态更新，但每隔几分钟更新一次可能完全没问题。另一方面，协作、游戏和金融应用程序需要更接近实时。</p><p>延迟本身并不是决定因素。如果消息量相对较小（例如，监视网络故障），则 HTTP 流式处理或轮询可以提供有效的解决方案。低延迟、高频率和高容量的组合构成了使用 WebSocket 的最佳案例。</p><p>在Internet上，超出您控制范围的限制性代理可能会阻止WebSocket交互，因为它们没有配置为传递升级头，或者因为它们关闭了看起来空闲的长时间连接。这意味着在防火墙内部应用程序中使用WebSocket比在面向公众的应用程序中使用WebSocket更直接。</p><h2 id="_2-api" tabindex="-1"><a class="header-anchor" href="#_2-api"><span>2.API</span></a></h2><h3 id="websockethandler" tabindex="-1"><a class="header-anchor" href="#websockethandler"><span>WebSocketHandler</span></a></h3><p>创建WebSocket服务器就像实现<code>WebSocketHandler</code>一样简单，WebSocketHandler的扩展有<code>TextWebSocketHandler</code>、<code>BinaryWebSocketHandler</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">WebSocketHandler</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">WebSocketSession</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">TextMessage</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHandler</span> <span class="token keyword">extends</span> <span class="token class-name">TextWebSocketHandler</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleTextMessage</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">TextMessage</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将创建的<code>WebSocketHandler</code>注册，映射到特定的URL：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableWebSocket</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebSocketConfigurer</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebSocketHandlerRegistry</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocket</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerWebSocketHandlers</span><span class="token punctuation">(</span><span class="token class-name">WebSocketHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token function">myHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/myHandler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">WebSocketHandler</span> <span class="token function">myHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://www.springframework.org/schema/beans</span>
<span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">        http://www.springframework.org/schema/websocket</span>
<span class="line">        https://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>handlers</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/myHandler<span class="token punctuation">&quot;</span></span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>handlers</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myHandler<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.MyHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当直接或间接使用WebSocketHandler API时，例如通过STOMP消息传递，应用程序必须同步消息的发送，因为底层标准WebSocket会话（JSR-356）不允许并发发送。一种选择是用ConcurrentWebSocketSessionDecorator包装WebSocketSession。</p><h3 id="websocket-handshake" tabindex="-1"><a class="header-anchor" href="#websocket-handshake"><span>WebSocket Handshake</span></a></h3><p>自定义初始 HTTP WebSocket 握手请求的最简单方法是通过<code>HandshakeInterceptor</code>，它公开了握手“之前”和“之后”的方法。你可以使用这样的拦截器来排除握手或使任何属性对 WebSocketSession 可用。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocket</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerWebSocketHandlers</span><span class="token punctuation">(</span><span class="token class-name">WebSocketHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/myHandler&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpSessionHandshakeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://www.springframework.org/schema/beans</span>
<span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">        http://www.springframework.org/schema/websocket</span>
<span class="line">        https://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>handlers</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/myHandler<span class="token punctuation">&quot;</span></span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>handshake-interceptors</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>handshake-interceptors</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>handlers</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myHandler<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.MyHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个更高级的选择是扩展<code>DefaultHandshakeHandler</code>，它执行WebSocket握手的步骤，包括验证客户端来源、协商子协议和其他细节。如果应用程序需要配置自定义<code>RequestUpgradeStrategy</code>以适应尚未支持的WebSocket服务器引擎和版本，则可能需要使用此选项（有关此主题的更多信息，请参阅Deployment）。</p><p>Spring提供了一个<code>WebSocketHandlerDecorator</code>基类，你可以用它来用额外的行为装饰<code>WebSocketHandler</code>。当使用WebSocket Java配置或XML名称空间时，默认情况下会提供和添加日志记录和异常处理实现。<code>ExceptionWebSocketHandlerDecorator</code>捕获任何<code>WebSocketHandler</code>方法产生的所有未捕获的异常，并以状态<code>1011</code>关闭WebSocket会话，这表示服务器错误。</p><h3 id="deployment" tabindex="-1"><a class="header-anchor" href="#deployment"><span>Deployment</span></a></h3><p>Spring WebSocket API很容易集成到Spring MVC应用程序中，其中<code>DispatcherServlet</code>同时服务HTTP WebSocket握手和其他HTTP请求。通过调用WebSocketHttpRequestHandler，也很容易集成到其他HTTP处理场景中。这样既方便又容易理解。但是，对于JSR-356运行时有一些特殊的考虑。</p><p>Java WebSocket API （JSR-356）提供两种部署机制。第一个涉及在启动时进行Servlet容器类路径扫描（Servlet 3的一个特性）。另一个是在Servlet容器初始化时使用的注册API。这两种机制都不可能为所有HTTP处理（包括WebSocket握手和所有其他HTTP请求）使用单个“前端控制器”，比如Spring MVC的DispatcherServlet。</p><p>这是JSR-356的一个重要限制，Spring的WebSocket支持通过特定于服务器的<code>RequestUpgradeStrategy</code>实现来解决这个问题，即使在JSR-356运行时中运行也是如此。这样的策略目前存在于Tomcat、Jetty、GlassFish、WebLogic、WebSphere和Undertow（以及WildFly）中。</p><p>第二个需要考虑的问题是，支持JSR-356的Servlet容器可能会执行<code>ServletContainerInitializer</code> （SCI）扫描，这可能会减慢应用程序的启动速度——在某些情况下，速度会非常慢。如果在升级到支持JSR-356的Servlet容器版本后观察到明显的影响，那么应该可以通过使用web.xml中的&lt;absolutely-ordering /&gt;元素来选择性地启用或禁用web片段（和SCI扫描），如下例所示：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://java.sun.com/xml/ns/javaee</span>
<span class="line">        https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>absolute-ordering</span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，你可以通过名称选择性地启用web片段，比如Spring自己的<code>SpringServletContainerInitializer</code>，它提供了对Servlet 3 Java初始化API的支持。下面的例子展示了如何这样做：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://java.sun.com/xml/ns/javaee</span>
<span class="line">        https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>absolute-ordering</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>spring_web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>absolute-ordering</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="server-configuration" tabindex="-1"><a class="header-anchor" href="#server-configuration"><span>Server Configuration</span></a></h3><p>每个底层 WebSocket 引擎都公开了控制运行时特征的配置属性，例如消息缓冲区大小、空闲超时等。</p><p>对于 Tomcat、WildFly 和 GlassFish，可以将添加到<code>ServletServerContainerFactoryBean</code>到WebSocket Java 配置中：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocket</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ServletServerContainerFactoryBean</span> <span class="token function">createWebSocketContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ServletServerContainerFactoryBean</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletServerContainerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        container<span class="token punctuation">.</span><span class="token function">setMaxTextMessageBufferSize</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        container<span class="token punctuation">.</span><span class="token function">setMaxBinaryMessageBufferSize</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> container<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://www.springframework.org/schema/beans</span>
<span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">        http://www.springframework.org/schema/websocket</span>
<span class="line">        https://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework...ServletServerContainerFactoryBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxTextMessageBufferSize<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8192<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxBinaryMessageBufferSize<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8192<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对于客户端WebSocket配置，可以使用WebSocketContainerFactoryBean(XML)或ContainerProvider.getWebSocketContainer()（Java配置）。</strong></p><p>对于 Jetty，你需要提供一个预配置的 Jetty<code>WebSocketServerFactory</code>，并通过你的 WebSocket Java 配置将其插入 Spring的<code>DefaultHandshakeHandler</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocket</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerWebSocketHandlers</span><span class="token punctuation">(</span><span class="token class-name">WebSocketHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token function">echoWebSocketHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;/echo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHandshakeHandler</span><span class="token punctuation">(</span><span class="token function">handshakeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">DefaultHandshakeHandler</span> <span class="token function">handshakeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">WebSocketPolicy</span> policy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketPolicy</span><span class="token punctuation">(</span><span class="token class-name">WebSocketBehavior</span><span class="token punctuation">.</span><span class="token constant">SERVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        policy<span class="token punctuation">.</span><span class="token function">setInputBufferSize</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        policy<span class="token punctuation">.</span><span class="token function">setIdleTimeout</span><span class="token punctuation">(</span><span class="token number">600000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultHandshakeHandler</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">JettyRequestUpgradeStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebSocketServerFactory</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://www.springframework.org/schema/beans</span>
<span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">        http://www.springframework.org/schema/websocket</span>
<span class="line">        https://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>handlers</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/echo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>echoHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>handshake-handler</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handshakeHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>handlers</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handshakeHandler<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework...DefaultHandshakeHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>upgradeStrategy<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>upgradeStrategy<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework...JettyRequestUpgradeStrategy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serverFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serverFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.eclipse.jetty...WebSocketServerFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.eclipse.jetty...WebSocketPolicy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SERVER<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inputBufferSize<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8092<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>idleTimeout<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>600000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="allowed-origins" tabindex="-1"><a class="header-anchor" href="#allowed-origins"><span>Allowed Origins</span></a></h3><p>从 Spring Framework 4.1.5 开始，WebSocket 和 Sockjs 的默认行为是仅接受同源请求。也可以允许所有或指定的源列表。此检查主要针对浏览器客户端设计。没有什么可以阻止其他类型的客户端修改Origin头值。</p><p>RFC 6454: The Web Origin Concept：https://tools.ietf.org/html/rfc6454</p><p>三种可能的行为是：</p><ol><li>只允许同源请求（默认）：在这种模式下，当SockJS被启用时，Iframe HTTP响应头<code>X-Frame-Options</code>被设置为<code>SAMEORIGIN</code>，并且JSONP传输被禁用，因为它不允许检查请求的来源。因此，当启用该模式时，不支持IE6和IE7。</li><li>允许指定的来源列表：每个允许的来源必须以http://或https://.开头在此模式下，当启用SockJS时，IFrame传输将被禁用。因此，当启用该模式时，不支持IE6到IE9。</li><li>允许所有原点：要启用此模式，您应该提供<code>*</code>作为允许的原点值。在这种模式下，所有传输都是可用的。</li></ol><p><strong>配置 WebSocket 和 Sockjs 允许的源：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableWebSocket</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebSocketConfigurer</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebSocketHandlerRegistry</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocket</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerWebSocketHandlers</span><span class="token punctuation">(</span><span class="token class-name">WebSocketHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token function">myHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/myHandler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span><span class="token string">&quot;https://mydomain.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">WebSocketHandler</span> <span class="token function">myHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://www.springframework.org/schema/beans</span>
<span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">        http://www.springframework.org/schema/websocket</span>
<span class="line">        https://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>handlers</span> <span class="token attr-name">allowed-origins</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://mydomain.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/myHandler<span class="token punctuation">&quot;</span></span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myHandler<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>handlers</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myHandler<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.MyHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-sockjs-fallback" tabindex="-1"><a class="header-anchor" href="#_3-sockjs-fallback"><span>3.SockJS Fallback</span></a></h2><p>在公共Internet上，不受您控制的限制性代理可能会阻止WebSocket交互，因为它们未配置为传递<code>Upgrade</code>标头，或者因为它们关闭了似乎处于空闲状态的长期连接。</p><p>这个问题的解决方案是WebSocket模拟——也就是说，先尝试使用WebSocket，然后再使用基于http的技术来模拟WebSocket交互，并公开相同的应用程序级API。</p><p>在Servlet栈上，Spring框架为SockJS协议提供服务器（和客户端）支持。</p><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>Sockjs 的目标是让应用程序使用 WebSocket API，但在运行时必要时回退到非 WebSocket 替代方案，而无需更改应用程序代码。</p><p>Sockjs 包括：</p><ol><li><a href="https://github.com/sockjs/sockjs-protocol" target="_blank" rel="noopener noreferrer">SockJS协议</a>以可执行的<a href="https://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html" target="_blank" rel="noopener noreferrer">叙述测试</a>的形式定义。</li><li><a href="https://github.com/sockjs/sockjs-client/" target="_blank" rel="noopener noreferrer">Sockjs JavaScript客户端</a>— 用于浏览器的客户端库。</li><li>SockJS服务器实现，包括Spring框架Spring -websocket模块中的一个。</li><li>spring-websocket模块中的SockJS Java客户端（4.1版起）。</li></ol><p>SockJS是为浏览器而设计的。它使用多种技术来支持各种浏览器版本。有关SockJS传输类型和浏览器的完整列表，请参阅<a href="https://github.com/sockjs/sockjs-client/" target="_blank" rel="noopener noreferrer">SockJS客户端</a>页面。传输分为三大类：WebSocket、HTTP流和HTTP长轮询。有关这些类别的概述，请参阅这篇博客<a href="https://spring.io/blog/2012/05/08/spring-mvc-3-2-preview-techniques-for-real-time-updates/" target="_blank" rel="noopener noreferrer">文章</a>。</p><p>SockJS客户端首先发送GET<code>/info</code>从服务器获取基本信息。之后，它必须决定使用哪种运输工具。如果可能的话，使用WebSocket。如果没有，在大多数浏览器中，至少有一个HTTP流选项。如果没有，则使用HTTP（长）轮询。</p><p>所有传输请求都具有以下 URL 结构：</p><div class="language-markdown" data-highlighter="prismjs" data-ext="md" data-title="md"><pre><code><span class="line">https://host:port/myApp/myEndpoint/{server-id}/{session-id}/{transport}</span>
<span class="line"></span></code></pre></div><ul><li><code>{server-id}</code>对于在集群中路由请求很有用，但不会在其他情况下使用。</li><li><code>{session-id}</code>关联属于 Sockjs 会话的 HTTP 请求。</li><li><code>{transport}</code>表示传输类型（例如<code>websocket</code>、<code>xhr-streaming</code>等）。</li></ul><p><code>WebSocket</code>传输只需要一个 HTTP 请求即可执行 WebSocket 握手。此后的所有消息都在该套接字上交换。</p><p><code>HTTP传输</code>需要更多请求。例如，Ajax/XHR 流依赖于一个长时间运行的服务器到客户端消息请求和客户端到服务器消息的其他 HTTP POST 请求。长轮询与此类似，不同之处在于它在每次服务器到客户端发送后结束当前请求。</p><p>SockJS添加了最小的消息帧。例如，服务器最初发送字母<code>o</code>（“打开”帧），消息作为<code>a[&quot;message1&quot;，&quot;message2&quot;]</code>（json编码的数组）发送，如果25秒内没有消息流，则发送字母<code>h</code>（“心跳”帧）（默认情况下），然后发送字母c（“关闭”帧）关闭会话。</p><p>要了解更多信息，请在浏览器中运行一个示例并观察HTTP请求。SockJS客户端允许固定传输列表，因此可以一次查看一个传输。SockJS客户端还提供了一个调试标志，它在浏览器控制台中启用有用的消息。在服务器端，您可以为org.springframework.web.socket启用TRACE日志记录。要了解更多细节，请参阅SockJS协议<a href="https://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html" target="_blank" rel="noopener noreferrer">叙述测试</a>。</p><h3 id="enabling-sockjs" tabindex="-1"><a class="header-anchor" href="#enabling-sockjs"><span>Enabling SockJS</span></a></h3><p>通过 Java 配置启用 Sockjs</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocket</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerWebSocketHandlers</span><span class="token punctuation">(</span><span class="token class-name">WebSocketHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token function">myHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/myHandler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">WebSocketHandler</span> <span class="token function">myHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://www.springframework.org/schema/beans</span>
<span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">        http://www.springframework.org/schema/websocket</span>
<span class="line">        https://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>handlers</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/myHandler<span class="token punctuation">&quot;</span></span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>sockjs</span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>handlers</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myHandler<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.MyHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的示例用于Spring MVC应用程序，应该包含在DispatcherServlet的配置中。然而，Spring的WebSocket和SockJS支持并不依赖于Spring MVC。在<code>SockJsHttpRequestHandler</code>的帮助下，集成到其他HTTP服务环境相对简单。</p><p>在浏览器端，应用程序可以使用sockjs-client （1.0.x版本）。它模拟W3C WebSocket API，并与服务器通信，以根据其运行的浏览器选择最佳传输选项。请参阅sockjs-client页面和浏览器支持的传输类型列表。客户端还提供了几个配置选项——例如，指定要包含哪些传输。</p><h3 id="ie-8-and-9" tabindex="-1"><a class="header-anchor" href="#ie-8-and-9"><span>IE 8 and 9</span></a></h3><p>如果您确实使用基于iframe的传输，请记住，可以通过将HTTP响应头X-Frame-Options设置为<code>DENY</code>、<code>SAMEORIGIN</code>或<code>ALLOW-FROM \\&lt;origin\\&gt;</code>来指示浏览器阻止在给定页面上使用iframe。这是用来防止<a href="https://www.owasp.org/index.php/Clickjacking" target="_blank" rel="noopener noreferrer">点击劫持</a>。</p><p>如果您的应用程序添加了 X-Frame-Options 响应标头（应该这样做！ 并依赖于基于 iframe 的传输，您需要将 header 值设置为<code>SAMEORIGIN</code>或<code>ALLOW-FROM\\&lt;origin\\&gt;</code>。Spring Sockjs 支持还需要知道 Sockjs 客户端的位置，因为它是从 iframe 加载的。默认情况下，iframe 设置为从 CDN 位置下载 Sockjs 客户端。最好将此选项配置为使用与应用程序相同来源的 URL。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span><span class="token class-name">StompEndpointRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/portfolio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">setClientLibraryUrl</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080/myapp/js/sockjs-client.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="heartbeats" tabindex="-1"><a class="header-anchor" href="#heartbeats"><span>Heartbeats</span></a></h3><p>Sockjs 协议要求服务器发送检测信号消息，以防止代理得出连接已挂起的结论。Spring Sockjs 配置有一个名为<code>heartbeatTime</code>的属性，你可以使用它来自定义频率。默认情况下，假定在该连接上没有发送其他消息，心跳将在25秒后发送。</p><p>当在WebSocket和SockJS上使用STOMP时，如果STOMP客户端和服务器协商交换心跳，SockJS的心跳将被禁用。</p><p>Spring SockJS支持还允许您配置<code>TaskScheduler</code>来调度心跳任务。任务调度器由线程池提供支持，其默认设置基于可用处理器的数量。可以根据需求自定义设置。</p><h3 id="client-disconnects" tabindex="-1"><a class="header-anchor" href="#client-disconnects"><span>Client Disconnects</span></a></h3><p>HTTP流和HTTP长轮询SockJS传输需要连接保持打开的时间比通常更长。<a href="https://spring.io/blog/2012/05/08/spring-mvc-3-2-preview-techniques-for-real-time-updates/" target="_blank" rel="noopener noreferrer">技术介绍</a></p><p>在Servlet容器中，这是通过Servlet 3异步支持完成的，该支持允许退出Servlet容器线程，处理请求，并继续写入来自另一个线程的响应。</p><p>一个特定的问题是Servlet API不为已经离开的客户端提供通知。看到<a href="https://github.com/eclipse-ee4j/servlet-api/issues/44" target="_blank" rel="noopener noreferrer">eclipse-ee4j/servlet api</a>。但是，Servlet容器在后续尝试写入响应时会引发异常。由于Spring的SockJS服务支持服务器发送的心跳（默认情况下每25秒发送一次），这意味着通常在该时间段内检测到客户端断开连接（或者更早，如果消息发送更频繁）。</p><p>因此，网络 I/O 故障可能是因为客户端已断开连接，这可能会用不必要的堆栈跟踪填充日志。Spring 尽最大努力识别代表客户端断开连接（特定于每个服务器）的此类网络故障，并使用专用日志类别（在<code>AbstractSockJsSession</code>中定义）记录最少的消息。<code>DISCONNECTED_CLIENT_LOG_CATEGORY</code>如果您需要查看堆栈跟踪，可以将该日志类别设置为 TRACE。</p><h3 id="sockjs-and-cors" tabindex="-1"><a class="header-anchor" href="#sockjs-and-cors"><span>SockJS and CORS</span></a></h3><p>如果允许跨域请求（参考API介绍的允许跨域），SockJS协议将在XHR流和轮询传输中使用CORS进行跨域支持。因此，除非检测到响应中存在CORS标头，否则将自动添加CORS标头。因此，如果应用程序已经配置为提供CORS支持（例如，通过Servlet过滤器），Spring的SockJsService将跳过这一部分。</p><p>也可以通过在Spring的SockJsService中设置<code>suppressCors</code>属性来禁用添加这些CORS头。</p><p>SockJS需要以Header和值：</p><ol><li>Access-Control-Allow-Origin：初始值来自<code>Origin</code>请求头。</li><li>Access-Control-Allow-Credentials：总是true。</li><li>Access-Control-Request-Headers：Initialized from values from the equivalent request header.</li><li>Access-Control-Allow-Methods：传输支持的HTTP方法（<code>TransportType</code>enum）。</li><li>Access-Control-Max-Age：设置31536000(1年)。</li></ol><p>要了解确切的实现，请看<code>AbstractSockJsService</code>中的<code>addCorsHeaders</code>和源代码中的<code>TransportType</code>enum。</p><p>或者，如果CORS配置允许，可以考虑排除带有SockJS端点前缀的url，从而让Spring的<code>SockJsService</code>处理它。</p><h3 id="sockjsclient" tabindex="-1"><a class="header-anchor" href="#sockjsclient"><span>SockJsClient</span></a></h3><p>Spring提供了一个SockJS Java客户端，可以在不使用浏览器的情况下连接到远程SockJS端点。当需要通过公共网络在两台服务器之间进行双向通信时（也就是说，网络代理可以排除使用WebSocket协议），这一点尤其有用。SockJS Java客户端对于测试目的也非常有用（例如，模拟大量并发用户）。</p><p>SockJS Java客户端支持<code>websocket</code>、<code>xhr-streaming</code>和<code>xhr-polling</code>传输。其余的只有在浏览器中使用才有意义。</p><p>配置<code>WebSocketTransport</code>：</p><ul><li><code>StandardWebSocketClient</code> in a JSR-356 runtime.</li><li><code>JettyWebSocketClient</code> by using the Jetty 9+ native WebSocket API.</li><li>Spring的<code>WebSocketClient</code>实现</li></ul><p>根据定义，<code>XhrTransport</code>既支持<code>xhr-streaming</code>，也支持<code>xhr-polling</code>，因为从客户端角度来看，除了用于连接到服务器的URL不同之外，两者没有区别。目前有两种实现方式：</p><ul><li><code>RestTemplateXhrTransport</code>使用 Spring的<code>RestTemplate</code>来处理 HTTP 请求。</li><li><code>JettyXhrTransport</code>使用Jetty的<code>HttpClient</code>处理 HTTP 请求。</li></ul><p><strong>创建Socket客户端连接到Socket端点：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transport</span><span class="token punctuation">&gt;</span></span> transports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">transports<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebSocketTransport</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardWebSocketClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">transports<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RestTemplateXhrTransport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">SockJsClient</span> sockJsClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SockJsClient</span><span class="token punctuation">(</span>transports<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sockJsClient<span class="token punctuation">.</span><span class="token function">doHandshake</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyWebSocketHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;ws://example.com:8080/sockjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>SockJS使用JSON格式的数组作为消息。默认情况下，使用<code>Jackson 2</code>，并且需要放在classpath中。或者可以配置<code>SockJsMessageCodec</code>的自定义实现，并在<code>SockJsClient</code>上配置它。</p><p><code>SockJsClient</code>模拟大量并发用户，要配置底层 HTTP 客户端（用于 XHR 传输）以允许足够数量的连接和线程：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">HttpClient</span> jettyHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">jettyHttpClient<span class="token punctuation">.</span><span class="token function">setMaxConnectionsPerDestination</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">jettyHttpClient<span class="token punctuation">.</span><span class="token function">setExecutor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueuedThreadPool</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>自定义SockJS服务端配置：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSocketMessageBrokerConfigurationSupport</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span><span class="token class-name">StompEndpointRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/sockjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">setStreamBytesLimit</span><span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">setHttpMessageCacheSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// 默认100</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">setDisconnectDelay</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30s,默认5s</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-stomp" tabindex="-1"><a class="header-anchor" href="#_4-stomp"><span>4.STOMP</span></a></h2><p>WebSocket协议定义了两种类型的消息（文本和二进制），但是它们的内容是未定义的。该协议为客户端和服务器定义了一种机制，以协商一个子协议（即更高级的消息传递协议），并在WebSocket之上使用子协议来定义各自可以发送的消息类型、格式和每条消息的内容，等等。子协议的使用是可选的，但无论采用哪种方式，客户机和服务器都需要就定义消息内容的某种协议达成一致。</p><h3 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1"><span>介绍</span></a></h3><p><a href="https://stomp.github.io/stomp-specification-1.2.html#Abstract" target="_blank" rel="noopener noreferrer">STOMP</a>（简单面向文本的消息收发协议）最初是为脚本语言（如 Ruby、Python 和 Perl）创建的，用于连接到企业消息代理。它旨在解决常用消息传递模式的最小子集。STOMP 可以通过任何可靠的双向流网络协议（如 TCP 和 WebSocket）使用。尽管 STOMP 是面向文本的协议，但消息负载可以是文本或二进制。</p><p>STOMP 是一种基于帧的协议，其帧基于 HTTP。下面的清单显示了 STOMP 帧的结构：</p><div class="language-markdown" data-highlighter="prismjs" data-ext="md" data-title="md"><pre><code><span class="line">COMMAND</span>
<span class="line">header1:value1</span>
<span class="line">header2:value2</span>
<span class="line"></span>
<span class="line">Body^@</span>
<span class="line"></span></code></pre></div><p>客户端可以使用<code>SEND</code>或<code>SUBSCRIBE</code>命令发送或订阅消息，并附带一个目标标头<code>destination</code>，该标头描述消息的内容以及谁应该接收它。这支持一种简单的发布-订阅机制，您可以使用该机制通过代理向其他连接的客户机发送消息，或者向服务器发送消息以请求执行某些工作。</p><p>当使用Spring的STOMP支持时，Spring WebSocket应用程序充当client的STOMP broker。消息被路由到<code>@Controller</code>消息处理方法或一个简单的内存代理，该代理跟踪订阅并向订阅用户广播消息。你也可以将Spring配置为使用专用的STOMP代理（如RabbitMQ、ActiveMQ等）来实际广播消息。在这种情况下，Spring维护到代理的TCP连接，将消息传递给它，并将消息从它传递到连接的WebSocket客户端。因此，Spring web应用程序可以依赖于统一的基于http的安全性、通用验证和用于消息处理的熟悉的编程模型。</p><p>客户端订阅，服务端发送：<code>SimpMessagingTemplate</code>可以向broker发送消息</p><div class="language-markdown" data-highlighter="prismjs" data-ext="md" data-title="md"><pre><code><span class="line">SUBSCRIBE</span>
<span class="line">id:sub-1</span>
<span class="line">destination:/topic/price.stock.*</span>
<span class="line"></span>
<span class="line">^@</span>
<span class="line"></span></code></pre></div><p>发送消息的的客户端，服务端可以通过@MessageMapping处理请求：</p><div class="language-markdown" data-highlighter="prismjs" data-ext="md" data-title="md"><pre><code><span class="line">SEND</span>
<span class="line">destination:/queue/trade</span>
<span class="line">content-type:application/json</span>
<span class="line">content-length:44</span>
<span class="line"></span>
<span class="line">{&quot;action&quot;:&quot;BUY&quot;,&quot;ticker&quot;:&quot;MMM&quot;,&quot;shares&quot;,44}^@</span>
<span class="line"></span></code></pre></div><p>执行后，服务器可以向客户端广播交易确认消息和详细信息。</p><p>在STOMP规范中，目标的含义故意不透明。它可以是任何字符串，完全由STOMP服务器来定义它们支持的目标的语义和语法。然而，目的地通常是类似路径的字符串，其中<code>/topic/..</code>暗示发布-订阅（一对多）和<code>/queue/</code>暗示点对点（一对一）消息交换。</p><p>STOMP服务器可以使用<code>MESSAGE</code>命令向所有订户广播消息。服务端向订阅的客户端发送消息：</p><div class="language-markdown" data-highlighter="prismjs" data-ext="md" data-title="md"><pre><code><span class="line">MESSAGE</span>
<span class="line">message-id:nxahklf6-1</span>
<span class="line">subscription:sub-1</span>
<span class="line">destination:/topic/price.stock.MMM</span>
<span class="line"></span>
<span class="line">{&quot;ticker&quot;:&quot;MMM&quot;,&quot;price&quot;:129.45}^@</span>
<span class="line"></span></code></pre></div><p>服务器不能发送未经请求的消息。来自服务器的所有消息都必须响应特定的客户端订阅，并且服务器消息的<code>subscription-id</code>头必须与客户端订阅的<code>id</code>头匹配。</p><p>STOMP详细介绍：https://stomp.github.io/stomp-specification-1.2.html</p><h3 id="benefits" tabindex="-1"><a class="header-anchor" href="#benefits"><span>Benefits</span></a></h3><p>与使用原始WebSockets相比，使用STOMP作为子协议可以让Spring框架和Spring Security提供更丰富的编程模型。HTTP与原始TCP的对比，以及它如何让Spring MVC和其他web框架提供丰富的功能，也是同样的道理。使用该协议的好处：</p><ol><li>无需发明自定义消息协议和消息格式。</li><li>STOMP客户端，包括Java客户端在Spring框架中，这些都是可用的。</li><li>可以(可选)使用消息代理（例如 RabbitMQ、ActiveMQ 等）来管理订阅和广播消息。</li><li>应用程序逻辑可以组织在任意数量的<code>@Controller</code>实例中，并且消息可以基于STOMP<code>destination</code>报头路由到它们，而不是针对给定连接使用单个<code>WebSocketHandler</code>处理原始WebSocket消息。</li><li>可以使用Spring Security根据STOMP<code>destination</code>和消息类型来保护消息。</li></ol><h3 id="enable-stomp" tabindex="-1"><a class="header-anchor" href="#enable-stomp"><span>Enable STOMP</span></a></h3><p>STOMP over WebSocket支持在<code>spring-messaging</code>和<code>spring-websocket</code>模块中可用。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableWebSocketMessageBroker</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">StompEndpointRegistry</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span><span class="token class-name">StompEndpointRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 暴露/portfolio</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/portfolio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span><span class="token class-name">MessageBrokerRegistry</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// /app 路由开始的消息被路由到@Controller的@MessageMapping方法</span></span>
<span class="line">        config<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">&quot;/app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">        <span class="token comment">// 使用内置的消息代理进行订阅和广播</span></span>
<span class="line">        <span class="token comment">// 将destination以&#39;/topic&#39;或&#39;/queue&#39;开头的消息路由到broker</span></span>
<span class="line">        config<span class="token punctuation">.</span><span class="token function">enableSimpleBroker</span><span class="token punctuation">(</span><span class="token string">&quot;/topic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://www.springframework.org/schema/beans</span>
<span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">        http://www.springframework.org/schema/websocket</span>
<span class="line">        https://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>message-broker</span> <span class="token attr-name">application-destination-prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>stomp-endpoint</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/portfolio<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>sockjs</span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>stomp-endpoint</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>simple-broker</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/topic, /queue<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>message-broker</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><ol><li>https://spring.io/guides/gs/messaging-stomp-websocket/</li><li>https://github.com/rstoyanchev/spring-websocket-portfolio</li></ol><h3 id="websocket-server" tabindex="-1"><a class="header-anchor" href="#websocket-server"><span>WebSocket Server</span></a></h3><p>配置WebSocket服务端：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span><span class="token class-name">StompEndpointRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/portfolio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHandshakeHandler</span><span class="token punctuation">(</span><span class="token function">handshakeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">DefaultHandshakeHandler</span> <span class="token function">handshakeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">WebSocketPolicy</span> policy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketPolicy</span><span class="token punctuation">(</span><span class="token class-name">WebSocketBehavior</span><span class="token punctuation">.</span><span class="token constant">SERVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        policy<span class="token punctuation">.</span><span class="token function">setInputBufferSize</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        policy<span class="token punctuation">.</span><span class="token function">setIdleTimeout</span><span class="token punctuation">(</span><span class="token number">600000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultHandshakeHandler</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">JettyRequestUpgradeStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebSocketServerFactory</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="flow-of-messages" tabindex="-1"><a class="header-anchor" href="#flow-of-messages"><span>Flow of Messages</span></a></h3><p>一旦公开了STOMP端点，Spring应用程序将成为连接客户机的STOMP代理。</p><p><code>spring-messaging</code>模块包含对消息传递应用程序的基本支持，这些应用程序起源于<a href="https://spring.io/spring-integration" target="_blank" rel="noopener noreferrer">Spring Integration</a>，后来被提取并合并到Spring框架中，以便在许多Spring项目和应用程序场景中更广泛地使用。下面的列表简要描述了一些可用的消息传递抽象：</p><ol><li>Message：消息的简单表示形式，包括header和有效负载。</li><li>MessageHandler：处理消息的契约。</li><li>MessageChannel：用于发送消息的契约，该消息支持生产者和消费者之间的松耦合。</li><li>SubscribableChannel：<code>MessageChannel</code>与<code>MessageHandler</code>订阅者。</li><li>ExecutorSubscribableChannel：<code>SubscribableChannel</code>使用<code>Executor</code>来传递消息。</li></ol><p>Java 配置使用<code>@EnableWebSocketMessageBroker</code>开启以上组件组合消息工作流。</p><figure><img src="http://47.101.155.205/image-20250323122013018.png" alt="image-20250323122013018" tabindex="0" loading="lazy"><figcaption>image-20250323122013018</figcaption></figure><ul><li><code>clientInboundChannel</code>：用于传递从WebSocket客户端接收到的消息。</li><li><code>clientOutboundChannel</code>：用于向WebSocket客户端发送服务器消息。</li><li><code>brokerChannel</code>：用于从服务器端应用程序代码中向消息代理发送消息。</li></ul><p>添加外部消息中间件：</p><figure><img src="http://47.101.155.205/image-20250323122036407.png" alt="image-20250323122036407" tabindex="0" loading="lazy"><figcaption>image-20250323122036407</figcaption></figure><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span><span class="token class-name">StompEndpointRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/portfolio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span><span class="token class-name">MessageBrokerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">&quot;/app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">enableSimpleBroker</span><span class="token punctuation">(</span><span class="token string">&quot;/topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/greeting&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> greeting<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> <span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> greeting<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上配置建立WebSocket服务端，进行以下步骤：</p><ol><li>客户端和http://localhost:8080/portfolio建立连接；</li><li>客户端发送<code>destination</code>为<code>/topic/greeting</code>的<code>SUBSCRIBE</code>帧。收到并解码后，消息将发送到 <code>clientInboundChannel</code>，然后路由到存储客户端订阅的消息代理。</li><li>客户端发送一个<code>aSEND</code>帧到<code>/app/greeting</code>。<code>/app</code>前缀有助于将它路由到带注释的控制器。在<code>/app</code>前缀被剥离之后，目的地的剩余<code>/greeting</code>部分被映射到<code>GreetingController</code>中的<code>@MessageMapping</code>方法。</li><li>从1GreetingController1返回的值被转换成一个Spring<code>Message</code>，带有基于返回值的有效负载和<code>/topic/greeting</code>的默认目的地标头（从输入目的地派生，<code>/app</code>被<code>/topic</code>取代）。结果消息被发送到<code>brokerChannel</code>，并由消息代理处理。</li><li>消息代理查找所有匹配的订阅者，并通过<code>clientOutboundChannel</code>向每个订阅者发送一个<code>message</code>帧，从那里消息被编码为STOMP帧并在WebSocket连接上发送。</li></ol><h3 id="annotated-controllers" tabindex="-1"><a class="header-anchor" href="#annotated-controllers"><span>Annotated Controllers</span></a></h3><p>@Controller类中可以用<code>@MessageMapping</code>, <code>@SubscribeMapping</code>, <code>@ExceptionHandler</code>注解声明方法处理消息。</p><h4 id="messagemapping" tabindex="-1"><a class="header-anchor" href="#messagemapping"><span>@MessageMapping</span></a></h4><p><strong>@MessageMapping方法支持的参数：</strong></p><table><thead><tr><th style="text-align:left;">方法参数</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Message</code></td><td style="text-align:left;">用于访问完整的消息</td></tr><tr><td style="text-align:left;"><code>MessageHeaders</code></td><td style="text-align:left;">用于访问在消息中的header</td></tr><tr><td style="text-align:left;"><code>MessageHeaderAccessor</code>, <code>SimpMessageHeaderAccessor</code>, and <code>StompHeaderAccessor</code></td><td style="text-align:left;">用于通过类型化访问器方法访问标头</td></tr><tr><td style="text-align:left;"><code>@Payload</code></td><td style="text-align:left;">访问消息的有效负载，MessageConverter</td></tr><tr><td style="text-align:left;"><code>@Header</code></td><td style="text-align:left;">要访问特定的header值</td></tr><tr><td style="text-align:left;"><code>@Headers</code></td><td style="text-align:left;">访问所有的header值，可以用<code>java.util.Map</code>接收</td></tr><tr><td style="text-align:left;"><code>@DestinationVariable</code></td><td style="text-align:left;">于访问从消息目标提取的模板变量。值将根据需要转换为声明的方法参数类型。</td></tr><tr><td style="text-align:left;"><code>java.security.Principal</code></td><td style="text-align:left;">WebSocket HTTP 握手时登录的用户</td></tr></tbody></table><p><strong>支持的返回值：</strong></p><p>默认情况下，<code>@MessageMapping</code>方法的返回值通过匹配的<code>MessageConverter</code>序列化为有效负载，并作为消息发送到<code>brokerChannel</code>，从<code>brokerChannel</code>向订阅者广播。出站消息的目的地与入站消息的目的地相同，但以<code>/topic</code>为前缀。</p><p>您可以使用<code>@SendTo</code>和<code>@SendToUser</code>注释来定制输出消息的目的地。<code>@SendTo</code>用于自定义目标目的地或指定多个目的地。<code>@SendToUser</code>用于将输出消息定向到与输入消息相关联的用户。</p><p>您可以在同一个方法上同时使用@SendTo和@SendToUser，并且两者都在类级别上得到支持，在这种情况下，它们充当类中方法的默认值。但是，请记住，任何方法级别的@SendTo或@SendToUser注释都会<code>覆盖类</code>级别的任何此类注释。</p><p>消息可以异步处理，@MessageMapping方法可以返回<code>ListenableFuture</code>、<code>CompletableFuture</code>或<code>CompletionStage</code>。</p><p>注意：<code>@SendTo</code>和<code>@SendToUser</code>仅仅是一种方便，相当于使用<code>SimpMessagingTemplate</code>发送消息。如果有必要，对于更高级的场景，<code>@MessageMapping</code>方法可以直接使用<code>SimpMessagingTemplate</code>。这可以代替返回一个值，或者可能除了返回一个值之外。</p><h4 id="subscribemapping" tabindex="-1"><a class="header-anchor" href="#subscribemapping"><span>@SubscribeMapping</span></a></h4><p><code>@SubscribeMapping</code>类似于<code>@MessageMapping</code>，但将映射缩小到仅订阅消息。它支持与<code>@MessageMapping</code>相同的方法参数。但是，对于返回值，默认情况下，消息将直接发送到客户端（通过<code>clientOutboundChannel</code>响应订阅），而不是发送到代理（通过<code>brokerChannel</code>作为广播发送到匹配的订阅）。<strong>添加@SendTo或@SendToUser将覆盖此行为并将其发送到代理。</strong></p><p>这在什么时候有用？假设代理映射到<code>/topic</code>和<code>/queue</code>，而应用程序控制器映射到<code>/app</code>。在此设置中，代理存储用于重复广播的<code>/topic</code>和<code>/queue</code>的所有订阅，并且不需要应用程序参与。客户端还可以订阅某些/应用程序目的地，控制器可以在不涉及代理的情况下返回值以响应该订阅，而无需再次存储或使用该订阅（实际上是一次性请求-应答交换）。这样做的一个用例是在启动时用初始数据填充UI。</p><p>这在什么时候没有用？不要尝试将<code>broker</code>和<code>controller</code>到相同的目的地前缀，除非出于某种原因希望它们独立处理消息（包括订阅）。入站消息并行处理。不能保证是代理还是控制器先处理给定的消息。如果目标是在订阅存储并准备广播时得到通知，那么如果服务器支持收据，客户机应该请求收据（简单代理不支持收据）。例如，使用Java STOMP客户端，您可以执行以下操作来添加收据：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Autowired</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">TaskScheduler</span> messageBrokerTaskScheduler<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// During initialization..</span></span>
<span class="line">stompClient<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageBrokerTaskScheduler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// When subscribing..</span></span>
<span class="line"><span class="token class-name">StompHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StompHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">headers<span class="token punctuation">.</span><span class="token function">setDestination</span><span class="token punctuation">(</span><span class="token string">&quot;/topic/...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">headers<span class="token punctuation">.</span><span class="token function">setReceipt</span><span class="token punctuation">(</span><span class="token string">&quot;r1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">FrameHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></span>
<span class="line">stompSession<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addReceiptTask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Subscription ready...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器端选项是在<code>brokerChannel</code>上注册<code>ExecutorChannelInterceptor</code>，并实现<code>afterMessageHandled</code>方法，该方法在消息（包括订阅）被处理后调用。</p><h4 id="messageexceptionhandler" tabindex="-1"><a class="header-anchor" href="#messageexceptionhandler"><span>@MessageExceptionHandler</span></a></h4><p>应用程序可以使用<code>@MessageExceptionHandle</code>r方法来处理来自<code>@MessageMapping</code>方法的异常。如果希望访问异常实例，可以在注释本身中声明异常，也可以通过方法参数声明异常。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MessageExceptionHandler</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ApplicationError</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">MyException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token keyword">return</span> appError<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@MessageExceptionHandler方法支持灵活的方法签名，并支持与@MessageMapping方法相同的方法参数类型和返回值。</p><p>通常，@MessageExceptionHandler方法在声明它们的@Controller类（或类层次结构）中应用。如果你想让这样的方法更全局地应用（跨控制器），你可以在一个标有<code>@ControllerAdvice</code>的类中声明它们。这与Spring MVC中提供的类似支持相当。</p><h3 id="sending-messages" tabindex="-1"><a class="header-anchor" href="#sending-messages"><span>Sending Messages</span></a></h3><p>如果希望从应用程序的任何部分向已连接的客户端发送消息，该怎么办？任何应用程序组件都可以向<code>brokerChannel</code>发送消息。最简单的方法是注入<code>SimpMessagingTemplate</code>并使用它来发送消息。通常，您将按类型注入它，如下面的示例所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">SimpMessagingTemplate</span> template<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">GreetingController</span><span class="token punctuation">(</span><span class="token class-name">SimpMessagingTemplate</span> template<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>template <span class="token operator">=</span> template<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">&quot;/greetings&quot;</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token constant">POST</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> greeting<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> <span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]:&quot;</span> <span class="token operator">+</span> greeting<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;/topic/greetings&quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果存在另一个相同类型的bean，您也可以通过其名称(<code>brokerMessagingTemplate</code>)来限定它。</p><h3 id="simple-broker" tabindex="-1"><a class="header-anchor" href="#simple-broker"><span>Simple Broker</span></a></h3><p>内置的简单消息代理处理来自客户机的订阅请求，将其存储在内存中，并将消息广播给具有匹配目的地的已连接客户机。代理支持类路径目的地，包括对ant风格目的地模式的订阅。</p><p>如果配置了任务调度器，则简单代理支持<a href="https://stomp.github.io/stomp-specification-1.2.html#Heart-beating" target="_blank" rel="noopener noreferrer">STOMP心跳</a>。为此，您可以声明自己的调度器，或者使用自动声明并在内部使用的调度器。下面的例子展示了如何声明你自己的调度程序：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">TaskScheduler</span> messageBrokerTaskScheduler<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessageBrokerTaskScheduler</span><span class="token punctuation">(</span><span class="token class-name">TaskScheduler</span> taskScheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>messageBrokerTaskScheduler <span class="token operator">=</span> taskScheduler<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span><span class="token class-name">MessageBrokerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">enableSimpleBroker</span><span class="token punctuation">(</span><span class="token string">&quot;/queue/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/topic/&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">setHeartbeatValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageBrokerTaskScheduler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="external-broker" tabindex="-1"><a class="header-anchor" href="#external-broker"><span>External Broker</span></a></h3><p>简单代理非常适合入门，但只支持STOMP命令的一个子集（它不支持ack、收据和其他一些特性），依赖于一个简单的消息发送循环，不适合集群。作为替代方案，您可以升级应用程序以使用功能齐全的消息代理。</p><p>请参阅STOMP文档，了解您选择的消息代理（如<a href="https://www.rabbitmq.com/stomp.html" target="_blank" rel="noopener noreferrer">RabbitMQ</a>、<a href="https://activemq.apache.org/stomp.html" target="_blank" rel="noopener noreferrer">ActiveMQ</a>等），安装代理，并在启用STOMP支持的情况下运行它。然后，您可以在Spring配置中启用STOMP代理中继（而不是简单代理）。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span><span class="token class-name">StompEndpointRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/portfolio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span><span class="token class-name">MessageBrokerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">enableStompBrokerRelay</span><span class="token punctuation">(</span><span class="token string">&quot;/topic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">&quot;/app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://www.springframework.org/schema/beans</span>
<span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">        http://www.springframework.org/schema/websocket</span>
<span class="line">        https://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>message-broker</span> <span class="token attr-name">application-destination-prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>stomp-endpoint</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/portfolio<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>sockjs</span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>stomp-endpoint</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>stomp-broker-relay</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/topic,/queue<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>message-broker</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述配置中的STOMP broker中继是一个Spring <code>MessageHandler</code>，它通过将消息转发给外部消息代理来处理消息。为此，它建立到代理的TCP连接，将所有消息转发给代理，然后通过WebSocket会话将从代理接收到的所有消息转发给客户端。从本质上讲，它充当一个“中继relay”，在两个方向上转发消息。</p><p>将<code>io.projectreactor.netty:reactor-netty</code>和<code>io.netty:netty-all</code>依赖项添加到项目中，用于TCP连接管理。</p><h3 id="connecting-to-a-broker" tabindex="-1"><a class="header-anchor" href="#connecting-to-a-broker"><span>Connecting to a Broker</span></a></h3><p>STOMP代理中继维护到代理的单个“系统”TCP连接。此连接仅用于来自服务器端应用程序的消息，而不用于接收消息。您可以为此连接配置STOMP凭据（即STOMP帧登录和密码头）。这在XML名称空间和Java配置中都公开为systemLogin和systemPasscode属性，具有默认值guest和guest。</p><p>STOMP 代理中继还为每个连接的 WebSocket 客户端创建一个单独的 TCP 连接。您可以配置用于代表客户端创建的所有 TCP 连接的 STOMP 凭证。这在 XML 命名空间和 Java 配置中都公开为<code>clientLogin</code>和<code>clientPasscode</code>属性，默认值为<code>guest</code>和<code>guest</code>。</p><p>STOMP代理中继还通过“系统”TCP连接向消息代理发送和接收心跳。您可以配置发送和接收心跳的间隔（默认为每次10秒）。如果失去与代理的连接，代理中继将继续尝试每5秒重新连接一次，直到成功为止。</p><p>任何Spring bean都可以实现ApplicationListener&lt;BrokerAvailabilityEvent&gt;，以便在与代理的“系统”连接丢失并重新建立时接收通知。</p><p>默认情况下，STOMP代理中继总是连接到相同的主机和端口，如果连接丢失，则根据需要重新连接。如果您希望在每次尝试连接时提供多个地址，您可以配置地址的提供者，而不是固定的主机和端口。下面的例子展示了如何做到这一点：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractWebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span><span class="token class-name">MessageBrokerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">enableStompBrokerRelay</span><span class="token punctuation">(</span><span class="token string">&quot;/queue/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/topic/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTcpClient</span><span class="token punctuation">(</span><span class="token function">createTcpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">&quot;/app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">ReactorNettyTcpClient</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">createTcpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReactorNettyTcpClient</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span></span>
<span class="line">                client <span class="token operator">-&gt;</span> client<span class="token punctuation">.</span><span class="token function">addressSupplier</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">StompReactorNettyCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以使用virtualHost属性配置STOMP代理中继。该属性的值被设置为每个CONNECT帧的主机报头，并且可能是有用的（例如，在云环境中，建立TCP连接的实际主机与提供基于云的STOMP服务的主机不同）。</p><h3 id="dots-as-separators" tabindex="-1"><a class="header-anchor" href="#dots-as-separators"><span>Dots as Separators</span></a></h3><p>当消息被路由到@MessageMapping方法时，它们与<code>AntPathMatcher</code>匹配。默认情况下，模式将使用斜杠(<code>/</code>)作为分隔符。这在web应用程序中是一个很好的约定，类似于HTTP url。但是，如果您更习惯于消息传递约定，则可以切换到使用点（<code>.</code>）作为分隔符。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span><span class="token class-name">MessageBrokerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">setPathMatcher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AntPathMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">enableStompBrokerRelay</span><span class="token punctuation">(</span><span class="token string">&quot;/queue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">&quot;/app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">                http://www.springframework.org/schema/beans</span>
<span class="line">                https://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">                http://www.springframework.org/schema/websocket</span>
<span class="line">                https://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>message-broker</span> <span class="token attr-name">application-destination-prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/app<span class="token punctuation">&quot;</span></span> <span class="token attr-name">path-matcher</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pathMatcher<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>stomp-endpoint</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/stomp<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>stomp-broker-relay</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/topic,/queue<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>message-broker</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pathMatcher<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.util.AntPathMatcher<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;blue.{green}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleGreen</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DestinationVariable</span> <span class="token class-name">String</span> green<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端能接收/app/red.blue.green123消息。</p><h3 id="authentication" tabindex="-1"><a class="header-anchor" href="#authentication"><span>Authentication</span></a></h3><p>每个STOMP over WebSocket消息会话都以HTTP请求开始。这可以是升级到WebSocket的请求（即WebSocket握手），或者在SockJS回退的情况下，是一系列SockJS HTTP传输请求。</p><p>许多web应用程序已经有了适当的身份验证和授权来保护HTTP请求。通常，通过<code>Spring Security</code>使用某种机制，如登录页面、HTTP basic authentication或其他方式。对用户进行身份验证。经过身份验证的用户的安全上下文保存在HTTP会话中，并与同一基于cookie的会话中的后续请求相关联。</p><p>因此，对于WebSocket握手或SockJS HTTP传输请求，通常已经有一个通过<code>HttpServletRequest.getUserPrincipal()</code>访问的经过身份验证的用户。Spring自动将该用户与为其创建的WebSocket或SockJS会话关联起来，随后，通过用户头将该会话上传输的所有STOMP消息关联起来。</p><p>简而言之，一个典型的web应用程序不需要做任何超出它已经为安全性所做的事情。用户在HTTP请求级别通过安全上下文进行身份验证，该安全上下文通过基于cookie的HTTP会话（然后与为该用户创建的WebSocket或SockJS会话相关联）进行维护，并导致在流经应用程序的每个消息上都打上用户标头。</p><p>注意，STOMP协议在CONNECT帧上确实有登录头<code>login</code>和密码头<code>passcode</code>。例如，它们最初是为TCP上的STOMP而设计的，现在仍然需要。然而，对于WebSocket上的STOMP，默认情况下，Spring忽略STOMP协议级别的授权头，假设用户已经在HTTP传输级别进行了身份验证，并期望WebSocket或SockJS会话包含经过身份验证的用户。</p><h3 id="token-authentication" tabindex="-1"><a class="header-anchor" href="#token-authentication"><span>Token Authentication</span></a></h3><p><a href="https://github.com/spring-projects/spring-security-oauth" target="_blank" rel="noopener noreferrer">Spring Security OAuth</a>支持基于令牌的安全性，包括JSON Web Token(JWT)。您可以将其用作Web应用程序中的身份验证机制，包括在WebSocket交互上的STOMP，如前一节所述（即通过基于cookie的会话维护身份）。</p><p>同时，基<code>cookie</code>的会话并不总是最合适的（例如，在不维护服务器端会话的应用程序中，或者在通常使用报头进行身份验证的移动应用程序中）。</p><p>WebSocket协议，<a href="https://tools.ietf.org/html/rfc6455#section-10.5" target="_blank" rel="noopener noreferrer">RFC 6455</a>没有规定服务器在WebSocket握手期间验证客户端的任何特定方式。然而，在实践中，浏览器客户端只能使用标准身份验证头（即基本的HTTP身份验证）或cookie，而不能（例如）提供自定义头。同样，SockJS JavaScript客户端也没有提供一种方法来发送带有SockJS传输请求的HTTP头。参见<a href="https://github.com/sockjs/sockjs-client/issues/196" target="_blank" rel="noopener noreferrer">sockjs-client issue196</a>。相反，它允许发送可用于发送令牌的查询参数，但这有其自身的缺点（例如，令牌可能在服务器日志中无意中与URL一起记录）。</p><p>因此，希望避免使用cookie的应用程序可能没有任何好的替代方法来进行HTTP协议级别的身份验证。他们可能更喜欢在STOMP消息协议级别使用报头进行身份验证，而不是使用cookie。这样做需要两个简单的步骤：</p><ol><li>使用STOMP客户端在连接时传递身份验证头。</li><li>使用<code>ChannelInterceptor</code>处理身份验证头。</li></ol><p>下一个示例使用服务器端配置来注册自定义身份验证拦截器。注意，拦截器只需要对CONNECT消息进行身份验证和设置用户头。Spring记录并保存经过身份验证的用户，并将其与同一会话上的后续STOMP消息关联起来。下面的例子展示了如何注册一个自定义身份验证拦截器：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientInboundChannel</span><span class="token punctuation">(</span><span class="token class-name">ChannelRegistration</span> registration<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registration<span class="token punctuation">.</span><span class="token function">interceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">preSend</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">,</span> <span class="token class-name">MessageChannel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">StompHeaderAccessor</span> accessor <span class="token operator">=</span></span>
<span class="line">                        <span class="token class-name">MessageHeaderAccessor</span><span class="token punctuation">.</span><span class="token function">getAccessor</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token class-name">StompHeaderAccessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StompCommand</span><span class="token punctuation">.</span><span class="token constant">CONNECT</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>accessor<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Authentication</span> user <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span> <span class="token comment">// 访问认证的请求头</span></span>
<span class="line">                    accessor<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">return</span> message<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：当对消息使用Spring Security的授权时，目前需要确保在Spring Security之前对身份验证<code>ChannelInterceptor</code>配置进行排序。最好的方法是在<code>WebSocketMessageBrokerConfigurer</code>的实现中声明自定义拦截器，并标记为<code>@Order(Ordered.HIGHEST_PRECEDENCE + 99)</code>。</p><h3 id="user-destinations" tabindex="-1"><a class="header-anchor" href="#user-destinations"><span>User Destinations</span></a></h3><p>应用程序可以发送针对特定用户的消息，Spring的STOMP支持为此目的识别带有<code>/user/</code>前缀的目的地。例如，客户机可能订阅<code>/user/queue/position-updates</code>目的地。该目的地由<code>UserDestinationMessageHandler</code>处理，并转换为用户会话的唯一目的地（例如<code>/queue/position-updates-user123</code>）。这提供了订阅通用命名目的地的便利性，同时确保不会与订阅相同目的地的其他用户发生冲突，以便每个用户都可以接收唯一的股票位置更新。</p><p>在发送端，消息可以发送到一个目的地，例如<code>/user/{username}/queue/position-updates</code>，然后由<code>UserDestinationMessageHandler</code>转换为一个或多个目的地，每个目的地对应与用户关联的会话。这使得应用程序中的任何组件都可以发送针对特定用户的消息，而无需知道他们的名称和通用目的地以外的任何信息。这也可以通过注释和消息传递模板来实现。</p><p>消息处理方法可以通过<code>@SendToUser</code>注释（在类级别上也支持共享公共目的地）将消息发送给与正在处理的消息相关联的用户，如下面的示例所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PortfolioController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/trade&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token annotation punctuation">@SendToUser</span><span class="token punctuation">(</span><span class="token string">&quot;/queue/position-updates&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">TradeResult</span> <span class="token function">executeTrade</span><span class="token punctuation">(</span><span class="token class-name">Trade</span> trade<span class="token punctuation">,</span> <span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token keyword">return</span> tradeResult<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果用户有多个会话，默认情况下，将针对指定目的地订阅的所有会话。然而，有时可能需要只针对发送正在处理的消息的会话。你可以通过将broadcast属性设置为false来实现，如下面的例子所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/action&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// raise MyBusinessException here</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MessageExceptionHandler</span></span>
<span class="line">    <span class="token annotation punctuation">@SendToUser</span><span class="token punctuation">(</span>destinations<span class="token operator">=</span><span class="token string">&quot;/queue/errors&quot;</span><span class="token punctuation">,</span> broadcast<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ApplicationError</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">MyBusinessException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token keyword">return</span> appError<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然用户目的地通常意味着经过身份验证的用户，但这并不是严格要求的。没有与经过身份验证的用户关联的WebSocket会话可以订阅用户目的地。在这种情况下，@SendToUser注释的行为与broadcast=false完全相同（也就是说，只针对发送正在处理的消息的会话）。</p><p>您可以从任何应用程序组件向用户目的地发送消息，例如，通过注入由Java配置或XML名称空间创建的<code>SimpMessagingTemplate</code>。（如果使用@Qualifier进行名称限定，bean名称为<code>brokerMessagingTemplate</code>。）下面的例子展示了如何这样做：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TradeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TradeService</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SimpMessagingTemplate</span> messagingTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">TradeServiceImpl</span><span class="token punctuation">(</span><span class="token class-name">SimpMessagingTemplate</span> messagingTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>messagingTemplate <span class="token operator">=</span> messagingTemplate<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterTradeExecuted</span><span class="token punctuation">(</span><span class="token class-name">Trade</span> trade<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>messagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSendToUser</span><span class="token punctuation">(</span></span>
<span class="line">                trade<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/queue/position-updates&quot;</span><span class="token punctuation">,</span> trade<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当您将用户目的地与外部消息代理一起使用时，您应该查看有关如何管理非活动队列的代理文档，以便在用户会话结束时删除所有唯一的用户队列。例如，当你使用<code>/exchange/amq.direct/position-updates</code>等目的地时，RabbitMQ会创建自动删除队列。因此，在这种情况下，客户端可以订阅<code>/user/exchange/amq.direct/position-updates</code>。类似地，ActiveMQ具有清除非活动目的地的配置选项。</p><p>在多应用程序服务器场景中，由于用户连接到不同的服务器，用户目标可能仍然无法解析。在这种情况下，可以将目标配置为广播未解析的消息，以便其他服务器有机会尝试。这可以通过Java配置中的<code>MessageBrokerRegistry</code>的<code>userDestinationBroadcast</code>属性和XML中的消息代理元素的<code>user-destination-broadcast</code>属性来实现。</p><h3 id="order-of-messages" tabindex="-1"><a class="header-anchor" href="#order-of-messages"><span>Order of Messages</span></a></h3><p>来自代理的消息被发布到<code>clientOutboundChannel</code>，从那里它们被写入WebSocket会话。由于通道由<code>ThreadPoolExecutor</code>支持，消息在不同的线程中处理，客户机接收到的结果序列可能与发布的确切顺序不匹配。</p><p>如果这是一个问题，启用<code>setPreservePublishOrder</code>标志，如下例所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span><span class="token class-name">MessageBrokerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">setPreservePublishOrder</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://www.springframework.org/schema/beans</span>
<span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">        http://www.springframework.org/schema/websocket</span>
<span class="line">        https://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>message-broker</span> <span class="token attr-name">preserve-publish-order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- ... --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>message-broker</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置该标志后，同一客户端会话中的消息一次只发布到<code>clientOutboundChannel</code>，这样发布的顺序就得到了保证。请注意，这会产生很小的性能开销，因此您应该只在需要时启用它。</p><h3 id="events" tabindex="-1"><a class="header-anchor" href="#events"><span>Events</span></a></h3><p>几个<code>ApplicationContext</code>事件被发布，并且可以通过实现Spring的<code>ApplicationListener</code>接口来接收：</p><ul><li><p><code>BrokerAvailabilityEvent</code>：指示代理何时可用或不可用。虽然“简单”代理在启动时立即可用，并且在应用程序运行期间保持可用，但STOMP“代理中继”可能会失去与全功能代理的连接（例如，如果重新启动代理）。代理中继具有重新连接逻辑，并在代理返回时重新建立到该代理的“系统”连接。因此，每当状态从连接变为断开连接时，都会发布此事件，反之亦然。使用<code>SimpMessagingTemplate</code>的组件应该订阅此事件，并避免在代理不可用时发送消息。在任何情况下，它们都应该准备好在发送消息时处理<code>MessageDeliveryException</code>。</p></li><li><p><code>SessionConnectEvent</code>：当接收到新的STOMP CONNECT时发布，以指示新客户端会话的开始。事件包含表示连接的消息，包括会话ID、用户信息（如果有的话）和客户端发送的任何自定义头。这对于跟踪客户机会话非常有用。订阅此事件的组件可以使用<code>SimpMessageHeaderAccessor</code>或<code>StompMessageHeaderAccessor</code>包装包含的消息。</p></li><li><p><code>sessionconnecteevent</code>：在<code>SessionConnecteEvent</code>发生后不久发布，此时代理已经发送STOMP CONNECTED帧来响应CONNECT。此时，可以认为STOMP会话已经完全建立。</p></li><li><p><code>SessionSubscribeEvent</code>：当收到新的STOMP SUBSCRIBE时发布。</p></li><li><p><code>SessionUnsubscribeEvent</code>：当收到新的STOMP UNSUBSCRIBE时发布。</p></li><li><p><code>SessionDisconnectEvent</code>：在STOMP会话结束时发布。DISCONNECT可能是从客户端发送的，也可能是在WebSocket会话关闭时自动生成的。在某些情况下，每个会话发布此事件不止一次。对于多个断开连接事件，组件应该是幂等的。</p></li></ul><p>当使用功能齐全的代理时，如果代理暂时不可用，STOMP“代理中继”会自动重新连接“系统”连接。但是，客户端连接不会自动重新连接。假设启用了心跳，客户机通常会在10秒内注意到代理没有响应。客户端需要实现自己的重连接逻辑。</p><h3 id="interception" tabindex="-1"><a class="header-anchor" href="#interception"><span>Interception</span></a></h3><p>Events为STOMP连接的生命周期提供通知，但不是为每个客户机消息提供通知。应用程序还可以注册<code>ChannelInterceptor</code>来拦截处理链中任何部分的任何消息。下面的例子展示了如何拦截来自客户端的入站消息：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientInboundChannel</span><span class="token punctuation">(</span><span class="token class-name">ChannelRegistration</span> registration<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registration<span class="token punctuation">.</span><span class="token function">interceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyChannelInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义的ChannelInterceptor可以使用<code>StompHeaderAccessor</code>或<code>SimpMessageHeaderAccessor</code>来访问消息的信息：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyChannelInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ChannelInterceptor</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">preSend</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">,</span> <span class="token class-name">MessageChannel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">StompHeaderAccessor</span> accessor <span class="token operator">=</span> <span class="token class-name">StompHeaderAccessor</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">StompCommand</span> command <span class="token operator">=</span> accessor<span class="token punctuation">.</span><span class="token function">getStompCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token keyword">return</span> message<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用程序还可以实现<code>ExecutorChannelInterceptor</code>，它是<code>ChannelInterceptor</code>的子接口，在处理消息的线程中具有回调函数。对于发送到通道的每条消息，都会调用<code>ChannelInterceptor</code>一次，而<code>ExecutorChannelInterceptor</code>在订阅来自通道的消息的每个MessageHandler的线程中提供钩子。</p><p>注意，与前面描述的<code>SessionDisconnectEvent</code>一样，<code>DISCONNECT</code>消息可以来自客户端，也可以在WebSocket会话关闭时自动生成。在某些情况下，拦截器可能在每个会话中多次拦截此消息。对于多个断开连接事件，组件应该是幂等的。</p><h3 id="stomp-client" tabindex="-1"><a class="header-anchor" href="#stomp-client"><span>STOMP Client</span></a></h3><p>Spring提供了一个STOMP over WebSocket客户端和一个STOMP over TCP客户端。</p><p>创建和配置<code>WebSocketStompClient</code>，如下面的示例所示：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">WebSocketClient</span> webSocketClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardWebSocketClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">WebSocketStompClient</span> stompClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketStompClient</span><span class="token punctuation">(</span>webSocketClient<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stompClient<span class="token punctuation">.</span><span class="token function">setMessageConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stompClient<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span>taskScheduler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// for heartbeats</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>在前面的示例中，您可以用<code>SockJsClient</code>替换<code>StandardWebSocketClient</code>，因为这也是<code>WebSocketClient</code>的实现。<code>SockJsClient</code>可以使用WebSocket或基于http的传输作为回退。</p><p>接下来，您可以建立连接并为STOMP会话提供处理程序，如下面的示例所示：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;ws://127.0.0.1:8080/endpoint&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">StompSessionHandler</span> sessionHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStompSessionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stompClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> sessionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>当会话准备好使用时，处理程序将得到通知，如下面的示例所示：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStompSessionHandler</span> <span class="token keyword">extends</span> <span class="token class-name">StompSessionHandlerAdapter</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterConnected</span><span class="token punctuation">(</span><span class="token class-name">StompSession</span> session<span class="token punctuation">,</span> <span class="token class-name">StompHeaders</span> connectedHeaders<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>一旦会话建立，任何有效负载都可以发送，并与配置的<code>MessageConverter</code>进行序列化，如下面的示例所示：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">session<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;/topic/something&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;payload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>你也可以订阅目的地。订阅方法需要订阅消息的处理程序和可用于取消订阅的订阅句柄。对于每个接收到的消息，处理程序可以指定目标对象类型，有效负载应该被反序列化，如下面的示例所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">session<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;/topic/something&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StompFrameHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Type</span> <span class="token function">getPayloadType</span><span class="token punctuation">(</span><span class="token class-name">StompHeaders</span> headers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleFrame</span><span class="token punctuation">(</span><span class="token class-name">StompHeaders</span> headers<span class="token punctuation">,</span> <span class="token class-name">Object</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要启用STOMP心跳，您可以使用<code>TaskScheduler</code>配置<code>WebSocketStompClient</code>，并可选择自定义心跳间隔（写不活动为10秒，这会导致发送心跳，读不活动为10秒，这会关闭连接）。</p><p>当使用<code>WebSocketStompClient</code>进行性能测试以模拟来自同一台机器的数千个客户机时，考虑关闭心跳，因为每个连接调度自己的心跳任务，并且没有针对在同一台机器上运行的大量客户机进行优化。</p><p>STOMP协议还支持接收，其中客户端必须添加一个接收<code>receipt</code>头，服务器在处理发送或订阅后用接收帧响应该头。为了支持这一点，<code>StompSession</code>提供了<code>setAutoReceipt(boolean)</code>，它导致在每个后续发送或订阅事件上添加接收头。或者，您也可以手动将收据标头添加到<code>StompHeaders</code>中。send和subscribe都返回一个<code>Receiptable</code>实例，您可以使用它来注册接收成功和失败回调。对于此功能，您必须使用<code>TaskScheduler</code>和收据过期前的时间（默认为15秒）配置客户端。</p><p>请注意，<code>StompSessionHandler</code>本身是一个<code>StompFrameHandler</code>，除了处理消息处理异常的<code>handleException</code>回调和处理传输级错误（包括<code>ConnectionLostException</code>）的<code>handleTransportError</code>之外，还允许它处理ERROR帧。</p><h3 id="websocket-scope" tabindex="-1"><a class="header-anchor" href="#websocket-scope"><span>WebSocket Scope</span></a></h3><p>每个WebSocket会话都有一个属性映射。映射作为一个头附加到入站客户端消息，可以从控制器方法访问，如下面的例子所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/action&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">SimpMessageHeaderAccessor</span> headerAccessor<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attrs <span class="token operator">=</span> headerAccessor<span class="token punctuation">.</span><span class="token function">getSessionAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在websocket作用域中声明一个spring管理的bean。您可以将websocket作用域的bean注入到控制器和注册在<code>clientInboundChannel</code>上的任何通道拦截器中。它们通常是单例的，比任何单独的WebSocket会话都要长。因此，你需要为websocket作用域bean使用作用域代理模式，如下面的例子所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>scopeName <span class="token operator">=</span> <span class="token string">&quot;websocket&quot;</span><span class="token punctuation">,</span> proxyMode <span class="token operator">=</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span><span class="token constant">TARGET_CLASS</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@PostConstruct</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Invoked after dependencies injected</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@PreDestroy</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Invoked when the WebSocket session ends</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MyBean</span> myBean<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MyController</span><span class="token punctuation">(</span><span class="token class-name">MyBean</span> myBean<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>myBean <span class="token operator">=</span> myBean<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/action&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// this.myBean from the current WebSocket session</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与任何自定义作用域一样，Spring在第一次从控制器访问MyBean实例时初始化它，并将实例存储在WebSocket会话属性中。随后返回相同的实例，直到会话结束。websocket作用域的bean调用了所有的Spring生命周期方法，如前面的示例所示。</p><h3 id="performance" tabindex="-1"><a class="header-anchor" href="#performance"><span>Performance</span></a></h3><p>在性能方面没有什么灵丹妙药。影响它的因素很多，包括消息的大小和数量、应用程序方法是否执行需要阻塞的工作，以及外部因素（如网络速度和其他问题）。本节的目的是概述可用的配置选项，以及关于如何考虑可伸缩性的一些想法。</p><p>在消息传递应用程序中，消息通过由<code>线程池</code>支持的异步执行通道传递。配置这样的应用程序需要对通道和消息流有很好的了解。</p><p>显然，首先要配置支持<code>clientInboundChannel</code>和<code>clientOutboundChannel</code>的线程池。默认情况下，两者都配置为可用处理器数量的2倍。</p><p>如果带注释的方法中的消息处理主要是cpu绑定的，那么<code>clientInboundChannel</code>的线程数应该与处理器数保持接近。如果它们所做的工作是io绑定较多的，并且需要阻塞或等待数据库或其他外部系统，则可能需要增加线程池的大小。</p><p>ThreadPoolExecutor有三个重要属性：核心线程池大小(core thread pool size)、最大线程池大小(max thread pool size)和队列存储(queue capacity )没有可用线程的任务的容量。</p><p>一个常见的混淆点是，配置核心池大小（例如，10）和最大池大小（例如，20）会导致一个具有10到20个线程的线程池。实际上，如果队列容量保持其默认值Integer.MAX_VALUE时，线程池的增长永远不会超过核心池大小，因为所有额外的任务都排队。</p><p>在<code>clientOutboundChannel</code>端，主要是向WebSocket客户端发送消息。如果客户机在快速网络上，线程的数量应该与可用处理器的数量保持接近。如果它们速度较慢或带宽较低，则需要更长的时间来消耗消息，并给线程池带来负担。因此，有必要增加线程池的大小。<strong>IO有阻塞情况，调大线程池的数量。</strong></p><p>虽然可以预测<code>clientInboundChannel</code>的工作负载—毕竟，它是基于应用程序所做的工作—但如何配置<code>clientOutboundChannel</code>比较困难，因为它基于应用程序无法控制的因素。出于这个原因，有两个附加属性与消息的发送有关：<code>sendTimeLimit</code>和<code>sendBufferSizeLimit</code>。您可以使用这些方法来配置在向客户端发送消息时允许发送多长时间以及可以缓冲多少数据。</p><p>一般的想法是，在任何给定的时间，只有一个线程可以用来发送到客户端。与此同时，所有其他消息都将被缓冲，您可以使用这些属性来决定允许发送消息的时间以及同时可以缓冲多少数据。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureWebSocketTransport</span><span class="token punctuation">(</span><span class="token class-name">WebSocketTransportRegistration</span> registration<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registration<span class="token punctuation">.</span><span class="token function">setSendTimeLimit</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSendBufferSizeLimit</span><span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://www.springframework.org/schema/beans</span>
<span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">        http://www.springframework.org/schema/websocket</span>
<span class="line">        https://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>message-broker</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>transport</span> <span class="token attr-name">send-timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>15000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">send-buffer-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>524288<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- ... --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>message-broker</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用前面所示的WebSocket传输配置来配置传入STOMP消息的最大允许大小。理论上，WebSocket消息的大小几乎是无限的。在实践中，WebSocket服务器会施加限制——例如，Tomcat限制<code>8K</code>， Jetty限制<code>64K</code>。由于这个原因，STOMP客户端（如JavaScript webstomp-client等）将较大的STOMP消息拆分为16K边界，并将它们作为多个WebSocket消息发送，这需要服务器进行缓冲和重新组装。</p><p>Spring的STOMP-over-WebSocket支持做到了这一点，因此应用程序可以配置STOMP消息的最大大小，而不考虑WebSocket服务器特定的消息大小。请记住，WebSocket消息大小是自动调整的，如果有必要的话，以确保它们至少可以携带16K的WebSocket消息。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureWebSocketTransport</span><span class="token punctuation">(</span><span class="token class-name">WebSocketTransportRegistration</span> registration<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registration<span class="token punctuation">.</span><span class="token function">setMessageSizeLimit</span><span class="token punctuation">(</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>websocket</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/websocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span></span>
<span class="line">        http://www.springframework.org/schema/beans</span>
<span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">        http://www.springframework.org/schema/websocket</span>
<span class="line">        https://www.springframework.org/schema/websocket/spring-websocket.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>message-broker</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">websocket:</span>transport</span> <span class="token attr-name">message-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>131072<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!-- ... --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">websocket:</span>message-broker</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于扩展的一个要点涉及到使用多个应用程序实例。目前，您无法使用简单的代理完成此操作。然而，当你使用一个全功能的代理（如RabbitMQ）时，每个应用实例都连接到代理，并且从一个应用实例广播的消息可以通过代理广播到通过任何其他应用实例连接的WebSocket客户端。</p><h3 id="monitoring" tabindex="-1"><a class="header-anchor" href="#monitoring"><span>Monitoring</span></a></h3><p>当你使用<code>@EnableWebSocketMessageBroker</code>或<code>\\&lt;websocket:message-broker\\&gt;</code>时，关键基础设施组件会自动收集统计数据和计数器，这些统计数据和计数器提供了对应用程序内部状态的重要洞察。该配置还声明了一个<code>WebSocketMessageBrokerStats</code>类型的bean，它在一个地方收集所有可用信息，并在默认情况下每30分钟在INFO级别记录一次。这个bean可以通过Spring的<code>MBeanExporter</code>导出到JMX，以便在运行时查看（例如，通过JDK的jconsole）。以下是现有资料的总结：</p><p><strong>Client WebSocket Sessions</strong></p><ul><li>Current：指示当前有多少客户端会话，该计数进一步细分为WebSocket与HTTP流和轮询SockJS会话。</li><li>Total：指示已建立的会话总数。</li><li><strong>Abnormally Closed</strong><ul><li>Connect Failures：已建立但在60秒内未收到任何消息后关闭的会话。这通常是代理或网络问题的指示。</li><li>Send Limit Exceeded：会话在超过配置的发送超时或发送缓冲区限制后关闭，这可能发生在速度较慢的客户端。</li><li>Transport Errors：会话在传输错误后关闭，例如无法读取或写入WebSocket连接或HTTP请求或响应。</li></ul></li><li>STOMP Frames：已处理的<code>CONNECT</code>、<code>CONNECTED</code>和<code>DISCONNECT</code>帧的总数，表示在STOMP级别上连接的客户端数量。请注意，当会话异常关闭或客户端关闭而不发送DISCONNECT帧时，DISCONNECT计数可能会更低。</li></ul><p><strong>STOMP Broker Relay</strong></p><ul><li><p>TCP Connections：指示有多少代表客户端WebSocket会话的TCP连接建立到代理。这应该等于客户端WebSocket会话数+ 1个用于从应用程序内部发送消息的额外共享“系统”连接。</p></li><li><p>STOMP Frames：代表客户端向代理转发或从代理接收的CONNECT、CONNECTED和DISCONNECT帧的总数。注意，无论客户端WebSocket会话是如何关闭的，都会向代理发送一个DISCONNECT帧。因此，较低的DISCONNECT帧数表明代理正在主动关闭连接（可能是由于没有及时到达的心跳、无效的输入帧或其他问题）。</p></li><li><p><strong>Client Inbound Channel</strong>：来自支持<code>clientInboundChannel</code>的线程池的统计信息，可以洞察传入消息处理的运行状况。在这里排队的任务表明应用程序可能太慢而无法处理消息。如果存在I/O绑定任务（例如，缓慢的数据库查询、对第三方REST API的HTTP请求等），请考虑增加线程池大小。</p></li><li><p><strong>Client Outbound Channel</strong>：来自支持<code>clientOutboundChannel</code>的线程池的统计信息，该线程池可洞察向客户机广播消息的运行状况。在这里排队的任务表明客户机速度太慢，无法使用消息。解决这个问题的一种方法是增加线程池大小，以容纳预期的并发慢速客户端数量。另一个选项是减少发送超时和发送缓冲区大小限制。</p></li><li><p><strong>SockJS Task Scheduler</strong>：来自用于发送心跳的SockJS任务调度程序的线程池的统计信息。注意，当在STOMP级别上协商心跳时，SockJS心跳是禁用的。</p></li></ul><h3 id="testing" tabindex="-1"><a class="header-anchor" href="#testing"><span>Testing</span></a></h3><p>当您使用Spring的STOMP-over-WebSocket支持时，有两种主要的方法来测试应用程序。第一种方法是编写服务器端测试，以验证控制器及其带注释的消息处理方法的功能。第二种方法是编写完整的端到端测试，包括运行客户机和服务器。</p><p>这两种方法并不相互排斥。相反，每一种都在整个测试策略中占有一席之地。服务器端测试更集中，更容易编写和维护。另一方面，端到端集成测试更完整，测试更多，但它们的编写和维护也更复杂。</p><p>最简单的服务器端测试形式是编写控制器单元测试。然而，这还不够有用，因为控制器所做的大部分工作都依赖于它的注释。纯单元测试根本无法测试这一点。</p><p>理想情况下，应该在运行时调用被测试的控制器，就像使用Spring MVC测试框架来测试处理HTTP请求的控制器一样——也就是说，不运行Servlet容器，而是依赖Spring框架来调用带注释的控制器。与Spring MVC测试一样，这里有两种可能的选择，要么使用“基于上下文”，要么使用“独立”设置：</p><ul><li>在Spring TestContext框架的帮助下加载实际的Spring配置，注<code>clientInboundChannel</code>作为测试字段，并使用它来发送要由控制器方法处理的消息。</li><li>手动设置调用控制器所需的最小Spring框架基础设施（即<code>SimpAnnotationMethodMessageHandler</code>），并将控制器的消息直接传递给它。</li></ul><p>第二种方法是创建端到端集成测试。为此，您需要以嵌入式模式运行WebSocket服务器，并作为发送包含STOMP帧的WebSocket消息的WebSocket客户端连接到它。<a href="https://github.com/rstoyanchev/spring-websocket-portfolio/tree/master/src/test/java/org/springframework/samples/portfolio/web" target="_blank" rel="noopener noreferrer">股票投资组合样例</a>应用程序的测试也通过使用Tomcat作为嵌入式WebSocket服务器和用于测试目的的简单STOMP客户机来演示这种方法。</p>`,307)]))}const i=s(p,[["render",c],["__file","WebSocket.html.vue"]]),u=JSON.parse('{"path":"/spring/webServlet/WebSocket.html","title":"WebSocket","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1.介绍","slug":"_1-介绍","link":"#_1-介绍","children":[{"level":3,"title":"HTTP和WebSocket","slug":"http和websocket","link":"#http和websocket","children":[]},{"level":3,"title":"什么情况使用WebSocket","slug":"什么情况使用websocket","link":"#什么情况使用websocket","children":[]}]},{"level":2,"title":"2.API","slug":"_2-api","link":"#_2-api","children":[{"level":3,"title":"WebSocketHandler","slug":"websockethandler","link":"#websockethandler","children":[]},{"level":3,"title":"WebSocket Handshake","slug":"websocket-handshake","link":"#websocket-handshake","children":[]},{"level":3,"title":"Deployment","slug":"deployment","link":"#deployment","children":[]},{"level":3,"title":"Server Configuration","slug":"server-configuration","link":"#server-configuration","children":[]},{"level":3,"title":"Allowed Origins","slug":"allowed-origins","link":"#allowed-origins","children":[]}]},{"level":2,"title":"3.SockJS Fallback","slug":"_3-sockjs-fallback","link":"#_3-sockjs-fallback","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"Enabling SockJS","slug":"enabling-sockjs","link":"#enabling-sockjs","children":[]},{"level":3,"title":"IE 8 and 9","slug":"ie-8-and-9","link":"#ie-8-and-9","children":[]},{"level":3,"title":"Heartbeats","slug":"heartbeats","link":"#heartbeats","children":[]},{"level":3,"title":"Client Disconnects","slug":"client-disconnects","link":"#client-disconnects","children":[]},{"level":3,"title":"SockJS and CORS","slug":"sockjs-and-cors","link":"#sockjs-and-cors","children":[]},{"level":3,"title":"SockJsClient","slug":"sockjsclient","link":"#sockjsclient","children":[]}]},{"level":2,"title":"4.STOMP","slug":"_4-stomp","link":"#_4-stomp","children":[{"level":3,"title":"介绍","slug":"介绍-1","link":"#介绍-1","children":[]},{"level":3,"title":"Benefits","slug":"benefits","link":"#benefits","children":[]},{"level":3,"title":"Enable STOMP","slug":"enable-stomp","link":"#enable-stomp","children":[]},{"level":3,"title":"WebSocket Server","slug":"websocket-server","link":"#websocket-server","children":[]},{"level":3,"title":"Flow of Messages","slug":"flow-of-messages","link":"#flow-of-messages","children":[]},{"level":3,"title":"Annotated Controllers","slug":"annotated-controllers","link":"#annotated-controllers","children":[]},{"level":3,"title":"Sending Messages","slug":"sending-messages","link":"#sending-messages","children":[]},{"level":3,"title":"Simple Broker","slug":"simple-broker","link":"#simple-broker","children":[]},{"level":3,"title":"External Broker","slug":"external-broker","link":"#external-broker","children":[]},{"level":3,"title":"Connecting to a Broker","slug":"connecting-to-a-broker","link":"#connecting-to-a-broker","children":[]},{"level":3,"title":"Dots as Separators","slug":"dots-as-separators","link":"#dots-as-separators","children":[]},{"level":3,"title":"Authentication","slug":"authentication","link":"#authentication","children":[]},{"level":3,"title":"Token Authentication","slug":"token-authentication","link":"#token-authentication","children":[]},{"level":3,"title":"User Destinations","slug":"user-destinations","link":"#user-destinations","children":[]},{"level":3,"title":"Order of Messages","slug":"order-of-messages","link":"#order-of-messages","children":[]},{"level":3,"title":"Events","slug":"events","link":"#events","children":[]},{"level":3,"title":"Interception","slug":"interception","link":"#interception","children":[]},{"level":3,"title":"STOMP Client","slug":"stomp-client","link":"#stomp-client","children":[]},{"level":3,"title":"WebSocket Scope","slug":"websocket-scope","link":"#websocket-scope","children":[]},{"level":3,"title":"Performance","slug":"performance","link":"#performance","children":[]},{"level":3,"title":"Monitoring","slug":"monitoring","link":"#monitoring","children":[]},{"level":3,"title":"Testing","slug":"testing","link":"#testing","children":[]}]}],"git":{"updatedTime":1742721770000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":1,"url":"https://github.com/oycm"}]},"filePathRelative":"spring/webServlet/WebSocket.md"}');export{i as comp,u as data};
