import{_ as s,c as n,e as t,o as e}from"./app-DO9Fsueg.js";const p={};function i(l,a){return e(),n("div",null,a[0]||(a[0]=[t(`<h1 id="虚拟机性能监控工具" tabindex="-1"><a class="header-anchor" href="#虚拟机性能监控工具"><span>虚拟机性能监控工具</span></a></h1><h2 id="命令行工具" tabindex="-1"><a class="header-anchor" href="#命令行工具"><span>命令行工具</span></a></h2><h3 id="jps" tabindex="-1"><a class="header-anchor" href="#jps"><span>jps</span></a></h3><p>虚拟机进程状况查询工具</p><p>jps(JVM Process Status Tool)，可以列出正在运行的虚拟机进程，并显示虚拟机执行主类名称或者jar文件名，还有这些进程的本地虚拟机唯一ID(LVMID，Local Virtual Machine Identifier)。</p><figure><img src="http://47.101.155.205/image-20240102213901208.png" alt="image-20240102213901208" tabindex="0" loading="lazy"><figcaption>image-20240102213901208</figcaption></figure><figure><img src="http://47.101.155.205/image-20240102213958333.png" alt="image-20240102213958333" tabindex="0" loading="lazy"><figcaption>image-20240102213958333</figcaption></figure><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># Windows找出正在运行的java程序</span></span>
<span class="line">tasklist /fi <span class="token string">&quot;imagename eq java.exe&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># linux系统找出正在运行的java程序</span></span>
<span class="line"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20240102213758370.png" alt="image-20240102213758370" tabindex="0" loading="lazy"><figcaption>image-20240102213758370</figcaption></figure><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># hostid为远程主机的标识符,需要远程主机在RMI中注册过</span></span>
<span class="line">jps <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>hostid<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>options</th><th>作用</th></tr></thead><tbody><tr><td>-q</td><td>仅显示进程id，不显示类名、jar名称等信息</td></tr><tr><td>-l</td><td>显示主类的全限定名称，或者启动的jar文件名称</td></tr><tr><td>-m</td><td>显示传递给main方法的参数</td></tr><tr><td>-v</td><td>显示虚拟机进程启动的JVM参数</td></tr></tbody></table><h3 id="jstat" tabindex="-1"><a class="header-anchor" href="#jstat"><span>jstat</span></a></h3><p>虚拟机统计信息监控工具</p><p>jstat(JVM Statistics Monitoring Tool)用户监控虚拟机各项运行状态的工具，如类加载、内存、垃圾收集、即使编译器等运行时数据。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 本地虚拟机的vmid和lvmid是一致的</span></span>
<span class="line"><span class="token comment"># 远程虚拟机的vmid格式[protocol:][//]vmid[@hostname[:port]/servername]</span></span>
<span class="line"><span class="token comment"># interval count 表示间隔多长时间输出,总共输出多少次,不传默认只输出一次</span></span>
<span class="line">jstat <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>vmid<span class="token operator">&gt;</span> <span class="token punctuation">[</span>interval<span class="token punctuation">[</span>s<span class="token operator">|</span>ms<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20240102220430864.png" alt="image-20240102220430864" tabindex="0" loading="lazy"><figcaption>image-20240102220430864</figcaption></figure><div class="language-txt" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line"> jstat -gc &lt;pid&gt;</span>
<span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT   </span>
<span class="line">26176.0 26176.0  0.0   2160.1 209792.0 165183.1  262144.0   69936.9   131072.0 123923.2 16384.0 15168.7    451    4.319  198    52.246   56.565</span>
<span class="line"></span>
<span class="line">jstat -gccause &lt;pid&gt;</span>
<span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC                 </span>
<span class="line">  0.00   0.00   9.23  26.73  94.55  92.59    453    4.328   289   76.291   80.619 CMS Final Remark     No GC               </span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>S0C</td><td>Survivor0区域的容量</td></tr><tr><td>S1C</td><td>Survivor1区域的容量</td></tr><tr><td>S0U</td><td>Survivor0区域的使用量</td></tr><tr><td>S1U</td><td>Survivor1区域的使用量</td></tr><tr><td>EC</td><td>Eden区域的容量</td></tr><tr><td>EU</td><td>Eden区域的使用量</td></tr><tr><td>OC</td><td>老年代的容量</td></tr><tr><td>OU</td><td>老年代的使用量</td></tr><tr><td>MC</td><td>表示Metaspace(元空间)区域的容量</td></tr><tr><td>MU</td><td>表示Metaspace(元空间)区域的使用量</td></tr><tr><td>CCSC</td><td>压缩类空间的容量</td></tr><tr><td>CCSU</td><td>压缩类空间的使用量</td></tr><tr><td>YGC</td><td>年轻代垃圾回收次数</td></tr><tr><td>YGCT</td><td>年轻代垃圾回收的总时间(秒)</td></tr><tr><td>FGC</td><td>老年代垃圾回收次数</td></tr><tr><td>FGCT</td><td>老年代垃圾回收的总时间(秒)</td></tr><tr><td>GCT</td><td>表示垃圾回收的总时间(秒)</td></tr></tbody></table><table><thead><tr><th>option</th><th>作用</th></tr></thead><tbody><tr><td>-class</td><td>监控类加载、卸载数量、总空间及类加载所耗费的时间</td></tr><tr><td>-gc</td><td>监控Java堆状况，Eden、2个Survivor、老年代等使用情况，垃圾收集时间</td></tr><tr><td>-gccapacity</td><td>和gc相差不大，主要关注Java堆中各个区域使用到的最大最小空间</td></tr><tr><td>-gcutil</td><td>和gc相差不大，关注各个空间的使用占比</td></tr><tr><td>-gccause</td><td>与gcutil功能一样，会额外输出导致上一次GC产生的原因</td></tr><tr><td>-gcnew</td><td>监控新生代垃圾收集情况</td></tr><tr><td>-gcnewcapacity</td><td>与gcnew相差不大，主要关注使用到的最大和最小空间</td></tr><tr><td>-gcold</td><td>监控老年代垃圾收集情况</td></tr><tr><td>-gcoldcapacity</td><td></td></tr><tr><td>-gcpermcapacity</td><td>JDK8移除</td></tr><tr><td>-compiler</td><td>输出即时编译器编译过的方法耗时等信息</td></tr><tr><td>-printcpmpilation</td><td>输出已经被即时编译器编译的方法</td></tr></tbody></table><h3 id="jinfo" tabindex="-1"><a class="header-anchor" href="#jinfo"><span>jinfo</span></a></h3><p>配置信息工具</p><p>jinfo(Configuration Info for Java)的作用是实时查看和调整虚拟机各项参数。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># pid-进程id</span></span>
<span class="line">jinfo <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> pid</span>
<span class="line"></span>
<span class="line"><span class="token comment"># -flag MetaspaceSize=256m -flag MaxMetaspaceSize=512m</span></span>
<span class="line">jinfo <span class="token parameter variable">-flag</span> +UseStringDeduplication  <span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>可以通过jinfo -flag获取可选参数</p><figure><img src="http://47.101.155.205/image-20240103210504044.png" alt="image-20240103210504044" tabindex="0" loading="lazy"><figcaption>image-20240103210504044</figcaption></figure><table><thead><tr><th>option</th><th>作用</th></tr></thead><tbody><tr><td>-flag JVM参数名称name</td><td>虚拟机启动对应JVM参数的配置</td></tr><tr><td>-flag [+|-] JVM参数名称name</td><td>去激活或关闭某个JVM参数开关</td></tr><tr><td>-flag name=value</td><td>设置对应JVM参数的值</td></tr><tr><td>-flags</td><td>打印对应JVM虚拟机进程的启动信息</td></tr><tr><td>-sysprops</td><td>打印Java经常System.getProperties()的内容信息</td></tr><tr><td>空</td><td>打印-flags 和-sysprops对应的信息</td></tr></tbody></table><figure><img src="http://47.101.155.205/image-20240103211649693.png" alt="image-20240103211649693" tabindex="0" loading="lazy"><figcaption>image-20240103211649693</figcaption></figure><h3 id="jmap" tabindex="-1"><a class="header-anchor" href="#jmap"><span>jmap</span></a></h3><p>内存镜像工具</p><p>jmap(Memory Map for Java)名用于生成堆转储快照(heapdump或dump文件)。</p><p>通过JVM参数-XX:+HeapDumpOnOutOfMemoryError，在Java程序出现内存溢出错误之后自动生成demp文件。</p><p>通过JVM参数-XX+HeapDumpOnCtrlBreak参数可以使用ctrl+break让虚拟机生成dump文件，或者在Linux系统使用kill -3命令。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 虚拟机进程id,一般情况下同进程id</span></span>
<span class="line">jmap <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> vmid</span>
<span class="line"></span>
<span class="line">jmap -dump:<span class="token punctuation">[</span>live,<span class="token punctuation">]</span>format<span class="token operator">=</span>b,file<span class="token operator">=</span><span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span>.hprof vmid</span>
<span class="line">jmap -dump:<span class="token punctuation">[</span>live,<span class="token punctuation">]</span>format<span class="token operator">=</span>b,file<span class="token operator">=</span><span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span>.bin vmid</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20240103213851585.png" alt="image-20240103213851585" tabindex="0" loading="lazy"><figcaption>image-20240103213851585</figcaption></figure><table><thead><tr><th>option</th><th>作用</th></tr></thead><tbody><tr><td>-dump</td><td>live只dump出存活的对象,format=b表示文件内容为二进制文件，file表示转存的文件名</td></tr><tr><td>-finalizerinfo</td><td>finalize队列中等待执行的对象。对象要实现finalize方法才会进入</td></tr><tr><td>-heap</td><td>显示堆详细信息，哪种回收器、参数配置合集容量</td></tr><tr><td>-histo</td><td>显示堆中对象统计信息、包括类、实例数量、合计容量</td></tr><tr><td>-permstat</td><td>以ClassLoader为统计口径显示永久代内存容量(1.8弃用)</td></tr><tr><td>-clstats</td><td>打印类加载统计的信息</td></tr><tr><td>-F</td><td>-dump选项没有作用时，前置生成dump文件</td></tr><tr><td>空</td><td></td></tr></tbody></table><figure><img src="http://47.101.155.205/image-20240103213655456.png" alt="image-20240103213655456" tabindex="0" loading="lazy"><figcaption>image-20240103213655456</figcaption></figure><figure><img src="http://47.101.155.205/image-20240103214630314.png" alt="image-20240103214630314" tabindex="0" loading="lazy"><figcaption>image-20240103214630314</figcaption></figure><h3 id="jhat" tabindex="-1"><a class="header-anchor" href="#jhat"><span>jhat</span></a></h3><p>堆转储快照分析工具</p><p>jhat(JVM Heap Analysis Tool)来分析jmap生成的dump文件。jhat内置了一个http/web服务器，生成堆转储快照文件之后，可以在浏览器查看。这个直接看，是真的看不懂。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">jhat dump文件</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20240103215207191.png" alt="image-20240103215207191" tabindex="0" loading="lazy"><figcaption>image-20240103215207191</figcaption></figure><figure><img src="http://47.101.155.205/image-20240103215358948.png" alt="image-20240103215358948" tabindex="0" loading="lazy"><figcaption>image-20240103215358948</figcaption></figure><h3 id="jstack" tabindex="-1"><a class="header-anchor" href="#jstack"><span>jstack</span></a></h3><p>Java堆栈跟踪工具</p><p>jstack(Stack Trace for Java)用于生成当前时刻的线程快照(threaddump或javacore文件)。</p><p>线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的作用通常是定位线程出现长时间停顿的原因，如线程死锁、死循环、请求外部资源导致的长时间挂起等。</p><p>Thread.getAllStackTraces()可以获取虚拟机所有线程的StackTraceElement对象。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">jstack <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> vmid</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20240103221457412.png" alt="image-20240103221457412" tabindex="0" loading="lazy"><figcaption>image-20240103221457412</figcaption></figure><table><thead><tr><th>option</th><th>作用</th></tr></thead><tbody><tr><td>-F</td><td>当正常输出不被响应，强制输出线程堆栈信息</td></tr><tr><td>-l</td><td>出堆栈外，显示关于锁的附加信息</td></tr><tr><td>-m</td><td>调用到本地方法，可以显示C/C++的堆栈</td></tr></tbody></table><figure><img src="http://47.101.155.205/image-20240103222239992.png" alt="image-20240103222239992" tabindex="0" loading="lazy"><figcaption>image-20240103222239992</figcaption></figure><p>jstack内容介绍：</p><ul><li><code>Service Thread</code>是线程的名称；</li><li><code>#19</code>是线程的id；</li><li><code>daemon</code>表示是守护线程(在main线程结束时自动退出)；</li><li><code>prio=9</code>表示线程的优先级；</li><li><code>os_prio=0</code>表示操作系统级别线程的优先级；</li><li><code>tid=0x00000000140b8800</code>表示线程的本地id（16进制）；</li><li><code>nid=0xa2c</code>表示操作系统层面线程的本地id（16进制）；</li><li><code>runnable</code>表示线程处于可运行状态（执行中）；会出现的线程状态信息： <ul><li><code>Deadlock</code>：死锁；</li><li><code>runnable</code>：运行中；</li><li><code>waiting on condition</code>：表示等待资源；</li><li><code>waiting on monitor entry</code>：等待获取监视器；</li><li><code>in Object.wait()</code>：在调用<code>wait()</code>方法等待；</li><li></li></ul></li><li><code>0x0000000000000000</code>是线程堆栈的起始地址</li><li>java.lang.Thread.State: RUNNABLE表示线程的状态，RUNNABLE表示当前线程正在运行或者可运行。应该除了线程的新建、退出状态，会有其它4个状态： <ul><li><code>RUNNABLE</code>：运行中。</li><li><code>BLOCKED</code>：线程正在等待进入一个<code>synchronized</code>块/方法（等待获得对象的\`monitor锁）。</li><li><code>WAITING</code>：线程在等待另一个线程明确地唤醒它（如使用<code>Object.wait()</code>、<code>LockSupport.park()</code>、<code>join()</code>等）。</li><li><code>TIMED_WAITING</code>：线程在有限时间内等待另一个线程的动作（如<code>sleep(ms)</code>、<code>wait(ms)</code>、<code>join(ms)</code>、<code>parkNanos()</code>）。</li></ul></li><li><code>Locked ownable synchronizers</code>尝试列出该线程当前持有的这类锁，<code>-None</code>当前线程没有没有持有任何锁。</li></ul><figure><img src="http://47.101.155.205/image-20240103223149196.png" alt="image-20240103223149196" tabindex="0" loading="lazy"><figcaption>image-20240103223149196</figcaption></figure><figure><img src="http://47.101.155.205/image-20240103223205647.png" alt="image-20240103223205647" tabindex="0" loading="lazy"><figcaption>image-20240103223205647</figcaption></figure><h4 id="找出高cpu线程" tabindex="-1"><a class="header-anchor" href="#找出高cpu线程"><span>找出高CPU线程</span></a></h4><p>方式一：先获取java程序的pid</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 先确定高cpu的程序，如果是java程序，则进行下一步</span></span>
<span class="line"><span class="token function">top</span> H</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 在java程序中找高cpu的线程</span></span>
<span class="line"><span class="token function">top</span> <span class="token parameter variable">-H</span> <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 将10进制线程id转换成16进制 8061 =&gt; 1f7d</span></span>
<span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&quot;%x<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token operator">&lt;</span>tid<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">jstack <span class="token parameter variable">-l</span> <span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&#39;0xtid&#39;</span> <span class="token parameter variable">-A</span> <span class="token number">50</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查询进程各线程CPU占用情况</span></span>
<span class="line"><span class="token function">ps</span> <span class="token parameter variable">-mp</span> <span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span> <span class="token parameter variable">-o</span> THREAD,pid,tid,time</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 将10进制线程id转换成16进制 8061 =&gt; 1f7d</span></span>
<span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&quot;%x<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token operator">&lt;</span>tid<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">jstack <span class="token parameter variable">-l</span> <span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&#39;0xtid&#39;</span> <span class="token parameter variable">-A</span> <span class="token number">50</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>通过脚本，提供java程序pid，得到每个线程占用cpu大于0及堆栈信息：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token comment"># shell脚本后接的第一个参数</span></span>
<span class="line"><span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable">$1</span></span>
<span class="line"><span class="token assign-left variable">stackfile</span><span class="token operator">=</span><span class="token string">&quot;/tmp/java/java.<span class="token variable">$pid</span>.txt&quot;</span></span>
<span class="line"><span class="token assign-left variable">tempfile</span><span class="token operator">=</span><span class="token string">&quot;/tmp/java/java.<span class="token variable">$pid</span>.txt.tmp&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 删除文件</span></span>
<span class="line"><span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable">$stackfile</span> <span class="token variable">$tempfile</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;pid <span class="token variable">$pid</span>&quot;</span></span>
<span class="line"></span>
<span class="line">jstack <span class="token variable">$pid</span> <span class="token operator">&gt;</span> <span class="token variable">$tempfile</span></span>
<span class="line"></span>
<span class="line"><span class="token function">ps</span> <span class="token parameter variable">-mp</span> <span class="token variable">$pid</span> <span class="token parameter variable">-o</span> THREAD,tid,time <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{if ($2&gt;0 &amp;&amp; $8!=&quot;-&quot;) print $8,$2}&#39;</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> tid cpu<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line">	<span class="token assign-left variable">nid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">printf</span> <span class="token string">&quot;%x<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token string">&quot;<span class="token variable">$tid</span>&quot;</span><span class="token variable">)</span></span></span>
<span class="line">	<span class="token comment">#echo &quot;tid=$tid, nid=$nid&quot;	</span></span>
<span class="line">	<span class="token builtin class-name">echo</span> <span class="token string">&quot;tid=<span class="token variable">$tid</span>, nid=<span class="token variable">$nid</span>, cpu=<span class="token variable">$cpu</span> %&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$stackfile</span></span>
<span class="line">	<span class="token comment"># grep -n &#39;^$&#39; 获取空白行的行号</span></span>
<span class="line">	<span class="token comment"># head -1 第一行</span></span>
<span class="line">	<span class="token comment"># awk -F&#39;:&#39; &#39;{print $1}&#39; 用&#39;:&#39;分割取第一段</span></span>
<span class="line">	<span class="token assign-left variable">lines</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token string">&quot;<span class="token variable">$nid</span>&quot;</span> <span class="token parameter variable">-A</span> <span class="token number">100</span> <span class="token string">&quot;<span class="token variable">$tempfile</span>&quot;</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;^$&#39;</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-1</span> <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">&#39;:&#39;</span> <span class="token string">&#39;{print $1}&#39;</span><span class="token variable">)</span></span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment"># 正则校验结果(这里不需要这样做,(()) 中的lines结果为空时，运算会给其默认值0)</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$lines</span>&quot;</span> <span class="token operator">=~</span> ^<span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+$ <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token variable"><span class="token punctuation">((</span>lines<span class="token operator">=</span>lines<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">))</span></span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    	<span class="token builtin class-name">echo</span> <span class="token string">&quot;grep not found <span class="token variable">$lines</span>.&quot;</span></span>
<span class="line">        <span class="token assign-left variable">lines</span><span class="token operator">=</span>-1</span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;tid=<span class="token variable">$tid</span>, nid=<span class="token variable">$nid</span> notfound&quot;</span></span>
<span class="line">    <span class="token keyword">fi</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment"># [ ] 两边要留空格</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$lines</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;-1&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">then</span></span>
<span class="line">		<span class="token function">grep</span> <span class="token variable">$nid</span> <span class="token parameter variable">-A</span> <span class="token number">100</span> <span class="token variable">$tempfile</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$stackfile</span></span>
<span class="line">		<span class="token comment"># 换行</span></span>
<span class="line">		<span class="token builtin class-name">echo</span> <span class="token string">&#39;&#39;</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$stackfile</span></span>
<span class="line">	<span class="token keyword">else</span></span>
<span class="line">		<span class="token function">grep</span> <span class="token variable">$nid</span> <span class="token parameter variable">-A</span> <span class="token variable">$lines</span> <span class="token variable">$tempfile</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$stackfile</span></span>
<span class="line">	<span class="token keyword">fi</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"><span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable">$tempfile</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;write to <span class="token variable">$stackfile</span>&quot;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jcmd" tabindex="-1"><a class="header-anchor" href="#jcmd"><span>jcmd</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 命令触发GC</span></span>
<span class="line">jcmd <span class="token operator">&lt;</span>PID<span class="token operator">&gt;</span> GC.run</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="可视化工具" tabindex="-1"><a class="header-anchor" href="#可视化工具"><span>可视化工具</span></a></h2><p><a href="http://java.sun.com/javase/6/docs/technotes/guides/management/agent.html" target="_blank" rel="noopener noreferrer">JMX官网配置介绍</a></p><h3 id="jhsdb" tabindex="-1"><a class="header-anchor" href="#jhsdb"><span>JHSDB</span></a></h3><figure><img src="http://47.101.155.205/image-20240104193532949.png" alt="image-20240104193532949" tabindex="0" loading="lazy"><figcaption>image-20240104193532949</figcaption></figure><p>在JDK9版本才开始支持。</p><p>JHSDB(Java HotSpot Debugger)是Java HotSpot虚拟机的调试工具，运行开发人员在运行时检查和调试Java程序。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">jhsdb hsdb <span class="token parameter variable">--pid</span> <span class="token operator">&lt;</span>vmid<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20240104200056599.png" alt="image-20240104200056599" tabindex="0" loading="lazy"><figcaption>image-20240104200056599</figcaption></figure><figure><img src="http://47.101.155.205/image-20240104200305358.png" alt="image-20240104200305358" tabindex="0" loading="lazy"><figcaption>image-20240104200305358</figcaption></figure><figure><img src="http://47.101.155.205/image-20240106141539683.png" alt="image-20240106141539683" tabindex="0" loading="lazy"><figcaption>image-20240106141539683</figcaption></figure><h4 id="heap-parameters" tabindex="-1"><a class="header-anchor" href="#heap-parameters"><span>Heap Parameters</span></a></h4><p>Tool =&gt; Heap Parameters，可以看到下面Gen 0Enen区内存已经使用满了。S0、S1、老年代都没有被使用。</p><figure><img src="http://47.101.155.205/image-20240104200628142.png" alt="image-20240104200628142" tabindex="0" loading="lazy"><figcaption>image-20240104200628142</figcaption></figure><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">scanoops start end <span class="token punctuation">[</span>type<span class="token punctuation">]</span></span>
<span class="line">scanoops 0x0000020c2ec00000 0x0000020c2ef50000 Object <span class="token comment">#使用这个提示找不到这个类型 no usch type</span></span>
<span class="line">scanoops 0x0000020c2ec00000 0x0000020c2ef50000 java.lang.Object</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20240104201423124.png" alt="image-20240104201423124" tabindex="0" loading="lazy"><figcaption>image-20240104201423124</figcaption></figure><h4 id="inspector" tabindex="-1"><a class="header-anchor" href="#inspector"><span>Inspector</span></a></h4><p>可以使用Tool =&gt; Inspector工具查看对象的类名、继承关系、实现接口关系、方法、字段、运行时常量池的指针</p><figure><img src="http://47.101.155.205/image-20240104201557779.png" alt="image-20240104201557779" tabindex="0" loading="lazy"><figcaption>image-20240104201557779</figcaption></figure><figure><img src="http://47.101.155.205/image-20240104202228713.png" alt="image-20240104202228713" tabindex="0" loading="lazy"><figcaption>image-20240104202228713</figcaption></figure><h4 id="revptrs" tabindex="-1"><a class="header-anchor" href="#revptrs"><span>revptrs</span></a></h4><p>revptrs查找对象的指针引用。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">revptrs 对象地址 <span class="token comment"># 下面结果输出哪个类型的对象引用了它</span></span>
<span class="line">revptrs 0x0000020c2eea92f8 <span class="token comment"># Object staticObject</span></span>
<span class="line">revptrs 0x0000020c2eea9308 <span class="token comment"># JHSDBTest jhsdbTest</span></span>
<span class="line">revptrs 0x0000020c2eea9320 <span class="token comment"># Object instanceObject</span></span>
<span class="line">revptrs 0x0000020c2eea9330 <span class="token comment"># Object obj</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>可以先猜测一下92f8这个Object对象应该是一个静态遍历，因为这个和Class相关，可以取0x0000020c2eea8db0使用Inspector工具检查，发现其中真的是有一个staticObject对象地址也是对上的。<strong>这也验证了Java将静态属性存储在Class对象中，存储在Java堆(这里Eden)中。</strong></p><p>0x0000020c2eea9320看结果和0x0000020c2eea9308，这个对象应该是JHSDBTest的实例属性。Inspector下图结果可验证。</p><p>看到main方法里面对象没有任何执行，猜测0x0000020c2eea9330这对象应该是在方法里面那个Object对象。</p><p>可以有一个小的总结，在方法里面的局部变量，他是没有一个具体的指向的，意味着方法结束这个对象就找不到了，可能就会被垃圾收集器收集。</p><p>资料说：revptrs不支持查找栈上面的指针引用。</p><figure><img src="http://47.101.155.205/image-20240104203144313.png" alt="image-20240104203144313" tabindex="0" loading="lazy"><figcaption>image-20240104203144313</figcaption></figure><figure><img src="http://47.101.155.205/image-20240104203452369.png" alt="image-20240104203452369" tabindex="0" loading="lazy"><figcaption>image-20240104203452369</figcaption></figure><figure><img src="http://47.101.155.205/image-20240104203931334.png" alt="image-20240104203931334" tabindex="0" loading="lazy"><figcaption>image-20240104203931334</figcaption></figure><h4 id="stack-memory" tabindex="-1"><a class="header-anchor" href="#stack-memory"><span>Stack Memory</span></a></h4><p>Java Threads窗口可以查看线程的栈内存使用情况。怎么看这个图？</p><figure><img src="http://47.101.155.205/image-20240104204930815.png" alt="image-20240104204930815" tabindex="0" loading="lazy"><figcaption>image-20240104204930815</figcaption></figure><figure><img src="http://47.101.155.205/image-20240104205400203.png" alt="image-20240104205400203" tabindex="0" loading="lazy"><figcaption>image-20240104205400203</figcaption></figure><h4 id="stack-memory图怎么看" tabindex="-1"><a class="header-anchor" href="#stack-memory图怎么看"><span>Stack Memory图怎么看？</span></a></h4><h3 id="jconsole" tabindex="-1"><a class="header-anchor" href="#jconsole"><span>JConsole</span></a></h3><p>工具使用官网文档：https://docs.oracle.com/javase/8/docs/technotes/guides/management/jconsole.html</p><p>JConsole(Java Monitoring and Management Console)是一款基于JMX(Java Management Extensions)规范的可视化监视、管理工具。</p><p>Java Management Extensions(JMX)是一种用于管理和监视Java应用程序的框架。它允许开发人员在应用程序中集成管理功能，以便远程或本地监控和管理Java应用程序的运行时行为。JMX提供了一组标准接口和工具，使得可以在运行时动态地管理Java应用程序的各个方面，包括性能监控、配置管理、事件通知等。</p><p>使用JMX，开发人员可以将MBeans(Managed Beans)嵌入到他们的应用程序中，这些MBeans代表了应用程序的不同组件或模块。这些MBeans可以通过JMX代理进行注册，然后可以通过JMX管理器远程或本地访问这些MBeans，以获取有关应用程序状态、性能和配置的信息，并且可以执行一些管理操作。</p><p>使用jconsole连接远程服务器上的Java程序，在启动时，需要加上其它特别的参数。</p><figure><img src="http://47.101.155.205/image-20240106140346147.png" alt="image-20240106140346147" tabindex="0" loading="lazy"><figcaption>image-20240106140346147</figcaption></figure><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 远程启动需要的参数</span></span>
<span class="line"><span class="token parameter variable">-Dcom.sun.management.jmxremote</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-Dcom.sun.management.jmxremote.port</span><span class="token operator">=</span><span class="token number">12345</span> <span class="token punctuation">\\</span>  <span class="token comment"># 替换为您选择的端口号</span></span>
<span class="line"><span class="token parameter variable">-Dcom.sun.management.jmxremote.authenticate</span><span class="token operator">=</span>false <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-Dcom.sun.management.jmxremote.ssl</span><span class="token operator">=</span>false <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-Djava.rmi.server.hostname</span><span class="token operator">=</span> <span class="token comment"># 绑定的ip地址</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20240106141305933.png" alt="image-20240106141305933" tabindex="0" loading="lazy"><figcaption>image-20240106141305933</figcaption></figure><h4 id="内存监控" tabindex="-1"><a class="header-anchor" href="#内存监控"><span>内存监控</span></a></h4><p>可以观察到堆内存占用在慢慢提高，然后突然降低，而后又慢慢提高，然后再降低。</p><p>第一次的慢慢提高是因为method方法指向，又对象在不停的创建，方法指向完成之后，代码中手动触发了GC，method方法创建的对象被回收，所以内存占用降低。</p><p>第二次慢慢提高不知道为什么，降低是因为手动点了监控界面的<code>执行GC</code>。</p><figure><img src="http://47.101.155.205/image-20240106141251550.png" alt="image-20240106141251550" tabindex="0" loading="lazy"><figcaption>image-20240106141251550</figcaption></figure><h4 id="线程监控" tabindex="-1"><a class="header-anchor" href="#线程监控"><span>线程监控</span></a></h4><figure><img src="http://47.101.155.205/image-20240106142931268.png" alt="image-20240106142931268" tabindex="0" loading="lazy"><figcaption>image-20240106142931268</figcaption></figure><p>线程死循环</p><figure><img src="http://47.101.155.205/image-20240106143036617.png" alt="image-20240106143036617" tabindex="0" loading="lazy"><figcaption>image-20240106143036617</figcaption></figure><p>线程死锁</p><figure><img src="http://47.101.155.205/image-20240106143226130.png" alt="image-20240106143226130" tabindex="0" loading="lazy"><figcaption>image-20240106143226130</figcaption></figure><figure><img src="http://47.101.155.205/image-20240106143246410.png" alt="image-20240106143246410" tabindex="0" loading="lazy"><figcaption>image-20240106143246410</figcaption></figure><figure><img src="http://47.101.155.205/image-20240106143440648.png" alt="image-20240106143440648" tabindex="0" loading="lazy"><figcaption>image-20240106143440648</figcaption></figure><h3 id="visualvm" tabindex="-1"><a class="header-anchor" href="#visualvm"><span>VisualVM</span></a></h3><p>export https_proxy=http://127.0.0.1:33210 http_proxy=http://127.0.0.1:33210 all_proxy=socks5://127.0.0.1:33211</p><p>VisualVM是一个用于监控、分析和调优Java虚拟机（JVM）性能的可视化工具。</p><p>部分jdk8没有jvisualvm命令，可以这个地址下载：https://visualvm.github.io/download.html</p><figure><img src="http://47.101.155.205/image-20240106144818003.png" alt="image-20240106144818003" tabindex="0" loading="lazy"><figcaption>image-20240106144818003</figcaption></figure><figure><img src="http://47.101.155.205/image-20240106144849506.png" alt="image-20240106144849506" tabindex="0" loading="lazy"><figcaption>image-20240106144849506</figcaption></figure><p>关门的默认打开窗口可以在窗口=&gt;应用程序/充值窗口重新打开。</p><figure><img src="http://47.101.155.205/image-20240106150246762.png" alt="image-20240106150246762" tabindex="0" loading="lazy"><figcaption>image-20240106150246762</figcaption></figure><h4 id="远程插件" tabindex="-1"><a class="header-anchor" href="#远程插件"><span>远程插件</span></a></h4><figure><img src="http://47.101.155.205/image-20240106145611047.png" alt="image-20240106145611047" tabindex="0" loading="lazy"><figcaption>image-20240106145611047</figcaption></figure><p>需要手动下载再安装插件</p><h4 id="线程监控-1" tabindex="-1"><a class="header-anchor" href="#线程监控-1"><span>线程监控</span></a></h4><figure><img src="http://47.101.155.205/image-20240106150813719.png" alt="image-20240106150813719" tabindex="0" loading="lazy"><figcaption>image-20240106150813719</figcaption></figure><h3 id="java-mission-control" tabindex="-1"><a class="header-anchor" href="#java-mission-control"><span>Java Mission Control</span></a></h3><p>Java Mission Control(JMC)是一个用于监控和管理Java应用程序性能的工具，通常与Java Flight Recorder(JFR)结合使用。</p><figure><img src="http://47.101.155.205/image-20240106151834669.png" alt="image-20240106151834669" tabindex="0" loading="lazy"><figcaption>image-20240106151834669</figcaption></figure>`,138)]))}const o=s(p,[["render",i],["__file","虚拟机性能监控工具.html.vue"]]),r=JSON.parse('{"path":"/JVM/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7.html","title":"虚拟机性能监控工具","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"命令行工具","slug":"命令行工具","link":"#命令行工具","children":[{"level":3,"title":"jps","slug":"jps","link":"#jps","children":[]},{"level":3,"title":"jstat","slug":"jstat","link":"#jstat","children":[]},{"level":3,"title":"jinfo","slug":"jinfo","link":"#jinfo","children":[]},{"level":3,"title":"jmap","slug":"jmap","link":"#jmap","children":[]},{"level":3,"title":"jhat","slug":"jhat","link":"#jhat","children":[]},{"level":3,"title":"jstack","slug":"jstack","link":"#jstack","children":[]},{"level":3,"title":"jcmd","slug":"jcmd","link":"#jcmd","children":[]}]},{"level":2,"title":"可视化工具","slug":"可视化工具","link":"#可视化工具","children":[{"level":3,"title":"JHSDB","slug":"jhsdb","link":"#jhsdb","children":[]},{"level":3,"title":"JConsole","slug":"jconsole","link":"#jconsole","children":[]},{"level":3,"title":"VisualVM","slug":"visualvm","link":"#visualvm","children":[]},{"level":3,"title":"Java Mission Control","slug":"java-mission-control","link":"#java-mission-control","children":[]}]}],"git":{"updatedTime":1750843498000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":3,"url":"https://github.com/oycm"},{"name":"ouyangcm","username":"ouyangcm","email":"mingorg@163.com","commits":4,"url":"https://github.com/ouyangcm"}]},"filePathRelative":"JVM/虚拟机性能监控工具.md"}');export{o as comp,r as data};
