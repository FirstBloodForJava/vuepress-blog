import{_ as n,c as s,e,o as i}from"./app-DO9Fsueg.js";const t={};function l(p,a){return i(),s("div",null,a[0]||(a[0]=[e(`<h1 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h1><h2 id="_1-java访问文件不关闭流" tabindex="-1"><a class="header-anchor" href="#_1-java访问文件不关闭流"><span>1.Java访问文件不关闭流</span></a></h2><p>通过<code>Files.newInputStream(Path)</code>创建的InputStream流未被关闭。</p><p><code>/proc/sys/fs/file-max</code>中系统全局文件描述符总数。</p><p>通过<code>ulimit -n</code>可以查看每个应用程序能使用的文件描述符数。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 文件可以查看程序的限制</span></span>
<span class="line">/proc/pid/limits</span>
<span class="line"><span class="token comment"># 使用的文件描述符数量</span></span>
<span class="line">/proc/pid/fd</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 每隔1s指向命令 查看tcp情况</span></span>
<span class="line"><span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token string">&quot;ss -tan state established | grep 8080&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 抓包命令</span></span>
<span class="line"><span class="token function">sudo</span> tcpdump <span class="token parameter variable">-i</span> any port <span class="token number">8080</span> <span class="token parameter variable">-nn</span> <span class="token parameter variable">-vv</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250420151022710.png" alt="image-20250420151022710" tabindex="0" loading="lazy"><figcaption>image-20250420151022710</figcaption></figure><p>当超过这个数量之后，再去访问文件，提示异常：</p><figure><img src="http://47.101.155.205/image-20250420151628024.png" alt="image-20250420151628024" tabindex="0" loading="lazy"><figcaption>image-20250420151628024</figcaption></figure><p><strong>当文件描述符被彻底耗尽时，则Web请求也无法处理。</strong></p><figure><img src="http://47.101.155.205/image-20250420151733774.png" alt="image-20250420151733774" tabindex="0" loading="lazy"><figcaption>image-20250420151733774</figcaption></figure><figure><img src="http://47.101.155.205/image-20250420152100672.png" alt="image-20250420152100672" tabindex="0" loading="lazy"><figcaption>image-20250420152100672</figcaption></figure><p><strong>文件流和字节流同时未关闭，之后占用一个文件描述符。文件流关闭后，字节流不关闭不会占用文件描述符。</strong></p><figure><img src="http://47.101.155.205/image-20250420164830044.png" alt="image-20250420164830044" tabindex="0" loading="lazy"><figcaption>image-20250420164830044</figcaption></figure>`,14)]))}const r=n(t,[["render",l],["__file","problem.html.vue"]]),o=JSON.parse('{"path":"/linux/problem.html","title":"问题","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1.Java访问文件不关闭流","slug":"_1-java访问文件不关闭流","link":"#_1-java访问文件不关闭流","children":[]}],"git":{"updatedTime":1745139378000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":2,"url":"https://github.com/oycm"}]},"filePathRelative":"linux/problem.md"}');export{r as comp,o as data};
