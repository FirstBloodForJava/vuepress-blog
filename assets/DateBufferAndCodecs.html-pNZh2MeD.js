import{_ as a,c as n,e as s,o as t}from"./app-DO9Fsueg.js";const o={};function c(l,e){return t(),n("div",null,e[0]||(e[0]=[s(`<h1 id="数据缓冲区和编解码器" tabindex="-1"><a class="header-anchor" href="#数据缓冲区和编解码器"><span>数据缓冲区和编解码器</span></a></h1><p>Java NIO提供了<code>ByteBuffer</code>，但许多库在此基础上构建了自己的字节缓冲区API，特别是对于重用缓冲区和/或使用直接缓冲区有利于提高性能的网络操作。例如，Netty有<code>ByteBuf</code>层次结构，Undertow使用<code>XNIO</code>， Jetty使用池字节缓冲区和要释放的回调，等等。<code>spring-core</code>模块提供了一组抽象来处理各种字节缓冲区api，如下所示：</p><ul><li>DataBufferFactory抽象了数据缓冲区的创建。</li><li>DataBuffer表示一个字节缓冲区，它可以被池化。</li><li>DataBufferUtils为数据缓冲区提供了实用程序方法。</li><li>编解码器(Codecs)解码或编码流数据缓冲区流到更高级的对象。</li></ul><h2 id="databufferfactory" tabindex="-1"><a class="header-anchor" href="#databufferfactory"><span>DataBufferFactory</span></a></h2><p>DataBufferFactory用于以两种方式之一创建数据缓冲区：</p><ol><li>分配一个新的数据缓冲区，如果知道大小，可以选择预先指定容量，这样更有效，即使<code>DataBuffer</code>的实现可以根据需要增加和减少。</li><li>包装现有的byte[]或<code>java.nio.ByteBuffer</code>，它使用<code>DataBuffer</code>实现修饰给定的数据，并且不涉及分配。</li></ol><p>注意，WebFlux应用程序并不直接创建<code>DataBufferFactory</code>，而是通过客户端的<code>ServerHttpResponse</code>或<code>ClientHttpRequest</code>来访问它。工厂的类型取决于底层客户端或服务器，例如Reactor Netty为<code>NettyDataBufferFactory</code>，其他为<code>DefaultDataBufferFactory</code>。</p><h2 id="databuffer" tabindex="-1"><a class="header-anchor" href="#databuffer"><span>DataBuffer</span></a></h2><p><code>DataBuffer</code>接口提供了与<code>java.nio.ByteBuffer</code>类似的操作，但也带来了一些额外的好处，其中一些是受Netty <code>ByteBuf</code>的启发。以下是部分好处：</p><ul><li>读取和写入具有独立的位置，即不需要调用<code>flip()</code>来交替读取和写入。</li><li>容量根据需要扩展，就像<code>java.lang.StringBuilder</code>一样。</li><li>池缓冲和引用计数通过<code>PooledDataBuffer</code>。</li><li>将缓冲区视为<code>java.nio.ByteBuffer</code>、<code>InputStream</code>或<code>OutputStream</code>。</li><li>确定给定字节的索引或最后一个索引。</li></ul><h2 id="pooleddatabuffer" tabindex="-1"><a class="header-anchor" href="#pooleddatabuffer"><span>PooledDataBuffer</span></a></h2><p>正如在<code>ByteBuffer</code>的Javadoc中所解释的，字节缓冲区可以是直接的，也可以是非直接的。直接缓冲区可能位于Java堆之外，这<strong>消除了本地I/O操作复制</strong>的需要。这使得直接缓冲区对于通过套接字接收和发送数据特别有用，但是创建和释放它们的成本也更高，这就产生了<strong>池化缓冲区</strong>的想法。</p><p><code>PooledDataBuffer</code>是<code>DataBuffer</code>的扩展，它有助于进行引用计数，这对于<strong>字节缓冲区池</strong>来说是必不可少的。它是如何工作的？当分配PooledDataBuffer时，引用计数为1。对<code>retain()</code>的调用增加计数，而对<code>release()</code>的调用减少计数。只要该<strong>计数大于0</strong>，缓冲区就保证不会被释放。当计数减少到0时，可以<strong>释放池化的缓冲区</strong>，这实际上可能意味着为缓冲区保留的内存返回到内存池中。</p><p>请注意，在大多数情况下，最好使用<code>DataBufferUtils</code>中的便利方法，而不是直接对<code>PooledDataBuffer</code>进行操作，只有当它是<code>PooledDataBuffer</code>的实例时，这些方法才会对DataBuffer<strong>应用release()或retain()</strong>。</p><h2 id="databufferutils" tabindex="-1"><a class="header-anchor" href="#databufferutils"><span>DataBufferUtils</span></a></h2><p>DataBufferUtils提供了许多实用方法来操作数据缓冲区：</p><ul><li>如果底层字节缓冲区API支持，可以通过复合缓冲区将数据缓冲区流连接到一个可能为零副本的缓冲区中。</li><li>将<code>InputStream</code>或<code>NIO Channel</code>转换为Flux&lt;DataBuffer&gt;，反之亦然，将Publisher&lt;DataBuffer&gt;转换为<code>OutputStream</code>或<code>NIO Channel</code>。</li><li>如果缓冲区是<code>PooledDataBuffer</code>的实例，则应用release()或retain()。</li><li>跳过或从字节流中取出，直到达到特定的字节计数。</li></ul><h2 id="codecs" tabindex="-1"><a class="header-anchor" href="#codecs"><span>Codecs</span></a></h2><p><code>org.springframework.core.codec</code>包提供了以下策略接口：</p><ul><li>编码器(Encoder)将Publisher&lt;T&gt;编码为数据缓冲区流。</li><li>解码器()Decoder将Publisher&lt;DataBuffer&gt;解码为更高级别对象的流。</li></ul><p>spring-core模块提供了<code>byte[]</code>、<code>ByteBuffer</code>、<code>DataBuffer</code>、<code>Resource</code>和<code>String</code>编码器和解码器实现。spring-web模块增加了<code>Jackson JSON</code>、<code>Jackson Smile</code>、<code>JAXB2</code>、<code>Protocol Buffers</code>和其他编码器和解码器。</p><h2 id="using-databuffer" tabindex="-1"><a class="header-anchor" href="#using-databuffer"><span>Using DataBuffer</span></a></h2><p>在处理数据缓冲区时，必须特别注意确保缓冲区被释放，因为它们可能被池化。我们将使用编解码器来说明其工作原理，但这些概念更适用于一般情况。让我们看看编解码器必须在内部做些什么来管理数据缓冲区。</p><p>在创建高级对象之前，解码器(Decoder)是最后一个读取输入数据缓冲区的，因此它必须像下面这样释放它们：</p><ol><li>如果解码器(Decoder)只是读取每个输入缓冲区并准备立即释放它，它可以通过<code>DataBufferUtils.release(dataBuffer)</code>来实现。</li><li>如果解码器(Decoder)使用Flux或Mono操作符，例如如<code>flatMap</code>、<code>reduce</code>和其他内部预取(prefetch )和缓存数据项的操作符，或者使用<code>filter</code>、<code>skip</code>等操作符，则必须将<code>doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)</code>添加到组合链中，以确保这些缓冲区在被丢弃之前被释放，也可能导致错误或取消信号。</li><li>如果解码器(Decoder)以任何其他方式持有一个或多个数据缓冲区，它必须确保在<strong>完全读取时释放</strong>它们；或者在读取和释放缓存的数据缓冲区之前发生错误或取消信号，也要释放。</li></ol><p>请注意，<code>DataBufferUtils.join</code>提供了一种安全有效的方式来将数据缓冲流聚合到单个数据缓冲区中。同样，<code>skipUntilByteCount</code>和<code>takeUntilByteCount</code>是解码器使用的额外安全方法。</p><p>编码器(Encoder)分配其他必须读取(释放)到数据缓冲区。所以编码器没有太多事情要做。但是，如果在向缓冲区填充数据时发生序列化错误，编码器<strong>必须注意释放数据缓冲区</strong>。例如:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">DataBuffer</span> buffer <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">allocateBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">boolean</span> release <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// serialize and populate buffer..</span></span>
<span class="line">    release <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>release<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">DataBufferUtils</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">return</span> buffer<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编码器的使用者负责释放它接收到的数据缓冲区。在WebFlux应用程序中，Encoder的输出用于写入HTTP服务器响应或客户端HTTP请求，在这种情况下，释放数据缓冲区是代码<strong>写入服务器响应或客户端请求</strong>的责任。</p><p>请注意，在Netty上运行时，有用于排除缓冲区泄漏的<a href="https://github.com/netty/netty/wiki/Reference-counted-objects#troubleshooting-buffer-leaks" target="_blank" rel="noopener noreferrer">调试选项</a>。</p>`,30)]))}const d=a(o,[["render",c],["__file","DateBufferAndCodecs.html.vue"]]),i=JSON.parse('{"path":"/spring/core/DateBufferAndCodecs.html","title":"数据缓冲区和编解码器","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"DataBufferFactory","slug":"databufferfactory","link":"#databufferfactory","children":[]},{"level":2,"title":"DataBuffer","slug":"databuffer","link":"#databuffer","children":[]},{"level":2,"title":"PooledDataBuffer","slug":"pooleddatabuffer","link":"#pooleddatabuffer","children":[]},{"level":2,"title":"DataBufferUtils","slug":"databufferutils","link":"#databufferutils","children":[]},{"level":2,"title":"Codecs","slug":"codecs","link":"#codecs","children":[]},{"level":2,"title":"Using DataBuffer","slug":"using-databuffer","link":"#using-databuffer","children":[]}],"git":{"updatedTime":1743252154000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":1,"url":"https://github.com/oycm"}]},"filePathRelative":"spring/core/DateBufferAndCodecs.md"}');export{d as comp,i as data};
