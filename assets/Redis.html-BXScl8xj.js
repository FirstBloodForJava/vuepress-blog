import{_ as n,c as a,e,o as p}from"./app-DO9Fsueg.js";const l={};function t(i,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h1><h2 id="什么是redis" tabindex="-1"><a class="header-anchor" href="#什么是redis"><span>什么是Redis</span></a></h2><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>官网：https://redis.io/</p><p>中文网：http://www.redis.cn/</p><p>Redis is an open source (BSD licensed), in-memory data structure store used as a database, cache, message broker, and streaming engine. Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions, and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.</p><p>You can run atomic operations on these types, like appending to a string; incrementing the value in a hash; pushing an element to a list; computing set intersection, union and difference; or getting the member with highest ranking in a sorted set.</p><p>To achieve top performance, Redis works with an in-memory dataset. Depending on your use case, Redis can persist your data either by periodically dumping the dataset to disk or by appending each command to a disk-based log. You can also disable persistence if you just need a feature-rich, networked, in-memory cache.</p><p>Redis supports asynchronous replication, with fast non-blocking synchronization and auto-reconnection with partial resynchronization on net split.</p><p>Redis 是一个开源（BSD 许可）的内存数据结构存储，用作数据库、缓存、消息代理和流引擎。Redis 提供数据结构，例如 字符串、散列、列表、集合、带范围查询的排序集合、位图、超日志、地理空间索引和流。Redis 内置了复制、Lua 脚本、LRU 驱逐、事务和不同级别的磁盘持久性，并通过以下方式提供高可用性Redis Sentinel和Redis Cluster的自动分区。</p><p>您可以 对这些类型运行原子操作，例如附加到字符串； 增加哈希值；将元素推入列表；计算集交、并 、差；或获取排序集中排名最高的成员。</p><p>为了达到最佳性能，Redis 使用 内存中的数据集。根据您的用例，Redis 可以通过定期将数据集转储到磁盘 或将每个命令附加到基于磁盘的日志来持久化您的数据。如果您只需要一个功能丰富的网络内存缓存，您也可以禁用持久性。</p><p>Redis 支持异步复制，具有快速非阻塞同步和自动重新连接以及网络拆分上的部分重新同步。</p><h3 id="windows安装redis" tabindex="-1"><a class="header-anchor" href="#windows安装redis"><span>Windows安装Redis</span></a></h3><p>Redis 是用ANSI C编写的，可以在大多数 POSIX 系统上运行，比如 Linux、BSD 和 Mac OS X，没有外部依赖。Linux 和 OS X 是 Redis 开发和测试最多的两个操作系统，我们推荐使用 Linux 进行部署。Redis 可以在 Solaris 派生的系统（如 SmartOS）中工作，但要尽最大努力提供支持。<strong>Windows 版本没有官方支持</strong>。</p><p>windows下载地址：https://github.com/tporadowski/redis/releases</p><p>windows下载地址：https://github.com/MSOpenTech/redis/releases</p><h3 id="数据库应用演变历程" tabindex="-1"><a class="header-anchor" href="#数据库应用演变历程"><span>数据库应用演变历程</span></a></h3><ul><li>单机数据库时代</li><li>Memcached时代</li><li>读写分离时代</li><li>分表分库时代(集群)</li><li>NoSQL数据库</li></ul><h3 id="什么是nosql" tabindex="-1"><a class="header-anchor" href="#什么是nosql"><span>什么是NoSQL</span></a></h3><p>NoSQL最常见的解释是“non-relational”， “Not Only SQL”也被很多人接受。NoSQL仅仅是一个概念，泛指非关系型的数据库，区别于关系数据库，它们不保证关系数据的ACID特性。</p><p>NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。</p><h4 id="nosql数据库分类" tabindex="-1"><a class="header-anchor" href="#nosql数据库分类"><span>NoSQL数据库分类</span></a></h4><ul><li>KV键值对数据库 Redis</li><li>列存储数据库 HBase</li><li>文档型数据库MongoDb</li><li>图形数据库 Neo4J</li></ul><h3 id="为什么使用nosql" tabindex="-1"><a class="header-anchor" href="#为什么使用nosql"><span>为什么使用NoSQL</span></a></h3><ol><li>进入web2.0时代，无法应对集中的高并发操作。关系型数据库的是IO密集型的应用，硬盘的IO也变为性能瓶颈</li><li>无法简单地通过增加硬件、服务节点来提高系统性能。</li><li>数据整个存储在一个数据库的表中，可扩展性差</li></ol><h3 id="nosql的优点" tabindex="-1"><a class="header-anchor" href="#nosql的优点"><span>NoSQL的优点</span></a></h3><ol><li>NoSQL读写性能非常高，</li><li>可扩展性高</li><li>存储的数据类型灵活</li></ol><h3 id="nosql的缺点" tabindex="-1"><a class="header-anchor" href="#nosql的缺点"><span>NoSQL的缺点</span></a></h3><ol><li>不支持标准的SQL，</li><li>CAP定理（数据一致性问题）</li><li>数据类型不丰富</li></ol><h3 id="_3v和3高" tabindex="-1"><a class="header-anchor" href="#_3v和3高"><span>3V和3高</span></a></h3><ul><li><p>Volume大量</p></li><li><p>Variety多样</p></li><li><p>Velocity速度</p></li><li><p>高并发</p></li><li><p>高可扩</p></li><li><p>高性能</p></li></ul><p>MySQL 和 NoSQL 都有各自的特点和使用的应用场景，两者结合使用。让关系数据库关注在关系上，NoSQL 关注在存储上。</p><h2 id="安装redis" tabindex="-1"><a class="header-anchor" href="#安装redis"><span>安装Redis</span></a></h2><p>压缩包下载地址：http://download.redis.io/releases/</p><ol><li>官网下载redis下载tar.gz安装包。</li><li>解压安装包tar -zxvf 安装包名，安装包放置在linux系统的/opt目录下。</li></ol><p>gcc编译器</p><p>Redis 是使用 c 语言编写的。使用源文件安装方式，需要编译 c 源文件，会使用 gcc 编译器。</p><ul><li>什么是gcc？</li></ul><p>gcc是GNU compiler collection 的缩写，它是 Linux 下一个编译器集合(相当于 javac )，是 c 或 c++程序的编译器。 使用yum进行安装gcc 。执行命令：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#安装gcc编译器</span></span>
<span class="line">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ul><li>查看linux有没有安装gcc编译器</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> gcc</span>
<span class="line">libgcc-4.8.5-11.el7.x86_64</span>
<span class="line"></span>
<span class="line"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> redis-6.0.6.tar.gz</span>
<span class="line"></span></code></pre></div><ol start="3"><li>在解压的redis目录下执行<code>make</code>命令。</li><li>提示安装失败执行<code>make distclean</code>命令，再次执行make命令也不能成功</li></ol><ul><li>升级gcc版本</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> centos-release-scl</span>
<span class="line">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span>
<span class="line">scl <span class="token builtin class-name">enable</span> devtoolset-9 <span class="token function">bash</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ol start="5"><li>执行make命令，得到以下结果表示安装成功</li></ol><figure><img src="http://47.101.155.205/image-20220527170548120.png" alt="image-20220527170548120" tabindex="0" loading="lazy"><figcaption>image-20220527170548120</figcaption></figure><ol start="6"><li>可以进入src目录中发现有redis-cli、redis-server命令</li><li>make install，在没有执行make install命令之前，在<code>/usr/local/bin</code>目录下是没有下面的文件的</li></ol><figure><img src="http://47.101.155.205/image-20220527171007363.png" alt="image-20220527171007363" tabindex="0" loading="lazy"><figcaption>image-20220527171007363</figcaption></figure><ol start="8"><li><strong>daemonize，可以vim 打开配置文件，set nu显示行号，设置daemonize yes后台启动redis，显示行号在222行</strong>。</li></ol><h2 id="启动测试" tabindex="-1"><a class="header-anchor" href="#启动测试"><span>启动测试</span></a></h2><ul><li>启动redis服务端</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 命令后接配置文件位置</span></span>
<span class="line">redis-server redis.config</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ul><li>redis客户端</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">redis-cli <span class="token parameter variable">-p</span> <span class="token number">6379</span></span>
<span class="line"><span class="token function">ping</span> <span class="token comment">#测试是否连接成功</span></span>
<span class="line"><span class="token parameter variable">-h</span> <span class="token operator">&lt;</span>ip<span class="token operator">&gt;</span></span>
<span class="line"><span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> </span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ul><li>关闭redis客户端</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 在客户端连接的窗口下执行shutdown 然后执行exit</span></span>
<span class="line"><span class="token function">shutdown</span></span>
<span class="line"><span class="token builtin class-name">exit</span></span>
<span class="line"><span class="token comment"># 检查redis进程是否关闭</span></span>
<span class="line"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> redis </span>
<span class="line"><span class="token comment"># 检查redis进程是否关闭</span></span>
<span class="line"><span class="token function">netstat</span> <span class="token parameter variable">-anop</span> <span class="token operator">|</span> <span class="token function">grep</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>第二种关闭方式</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 在usr/local/bin 执行</span></span>
<span class="line">redis-cli <span class="token function">shutdown</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>第三种方式</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#使用kill结束进程</span></span>
<span class="line"><span class="token function">kill</span> 进程号 </span>
<span class="line"><span class="token comment"># 可能会丢失数据</span></span>
<span class="line"><span class="token function">kill</span> <span class="token parameter variable">-9</span> 进程号 </span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="redis基本命令学习" tabindex="-1"><a class="header-anchor" href="#redis基本命令学习"><span>redis基本命令学习</span></a></h2><blockquote><p>16个数据库</p><figure><img src="http://47.101.155.205/image-20220527183835205.png" alt="image-20220527183835205" tabindex="0" loading="lazy"><figcaption>image-20220527183835205</figcaption></figure></blockquote><ul><li>切换数据库</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 切换数据库</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token punctuation">[</span><span class="token number">0</span>-databases-15<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ul><li>查看数据大小</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">dbsize</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ul><li>查看当前数据所有的key</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">keys *</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ul><li>清空当前数据库</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"> <span class="token comment">#输入到flush按table自动大写补全flushall</span></span>
<span class="line">flushdb </span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ul><li>清空所有数据库内容</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">flushall</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="redis线程说明" tabindex="-1"><a class="header-anchor" href="#redis线程说明"><span>redis线程说明</span></a></h2><p>redis是一个基于内存的数据库，将所有的数据都放入内存，基于内存操作，使用单线程的操作效率是最高的，多线程会上下文的切换消耗大量的时间。redis的单线程是执行核心命令的模块。（<strong>文件事件分派器队列</strong>的消费是单线程）</p><p>redis操作数据库是基于内存操作，CPU并不是瓶颈，redis的瓶颈是根据机器的内存和网络带宽。redis6.0版本引入了多线程，多线程是在网络I/O处理方面使用的，如网络数据的读写和协议解析等，但是redis执行命令的核心模块还是单线程的。</p><p>redis6.0中，多线程机制默认是关闭的，需要在redis.conf中完成两个设置才能启用多线程。</p><figure><img src="http://47.101.155.205/image-20220527190120061.png" alt="image-20220527190120061" tabindex="0" loading="lazy"><figcaption>image-20220527190120061</figcaption></figure><h2 id="redis的key的操作命令" tabindex="-1"><a class="header-anchor" href="#redis的key的操作命令"><span>redis的key的操作命令</span></a></h2><p><code>exists key</code></p><p><code>move key num</code>移动 key</p><p><code>kyes *</code></p><p><code>expire key seconds</code>设置过期时间</p><p><code>ttl key</code> 查看过期时间</p><p><code>set key value</code>添加</p><p><code>get key</code> 取值</p><p><code>del key</code> 删除</p><p><code>type key</code> 查看数据类型</p><p><code>randomkey</code></p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">exists key<span class="token punctuation">..</span>. <span class="token comment">#可以空格分开传递多个key 存在几个返回几个对应的数值，没有返回0</span></span>
<span class="line">del key<span class="token punctuation">..</span>. <span class="token comment">#可以空格分开传递多个key 删除几个返回几个对应的数值，没有删除返回0</span></span>
<span class="line">keys * <span class="token comment"># *代表任意字符，可以过滤性的展示字符</span></span>
<span class="line">move key db <span class="token comment">#将key移动到数据库db，移动成功返回1，没有key为0，db大小超出报错</span></span>
<span class="line"><span class="token builtin class-name">type</span> key <span class="token comment">#查看key的类型，不存在返回none，存在返回对应的类型</span></span>
<span class="line">ttl key <span class="token comment">#没有设置失效时间返回-1，不存在(失效了)返回-2</span></span>
<span class="line">expire key seconds <span class="token comment">#设置失效时间，如果key不存在返回0，存在返回1</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="redis数据类型" tabindex="-1"><a class="header-anchor" href="#redis数据类型"><span>redis数据类型</span></a></h2><h3 id="五大数据类型" tabindex="-1"><a class="header-anchor" href="#五大数据类型"><span>五大数据类型</span></a></h3><h4 id="string类型" tabindex="-1"><a class="header-anchor" href="#string类型"><span>string类型</span></a></h4><p><code>append key str</code> 追加字符串到key上，key不存在就新建一个</p><p><code>strlen key</code> 获取key的长度</p><p><code>incr key</code> key的数值自增1</p><p><code>decr key</code> 可以的数值自减1</p><p><code>incrby key num</code> key的数值自增num</p><p><code>decrby key num</code> key的数值自减num</p><p><strong>getrange key start end 下标从0开始，是闭区间，-1表示最后一个字符，可以用-5 -1从后面截取</strong></p><p><code>setrange key</code> 开始下标 value 从下标开始用value替换</p><p><code>setex（set with expire） key seconds value</code> 设置key的value及失效时间</p><p><code>setnx （set if not exists）key value</code> 不存在设置</p><p><code>mset key1 value1 key2 value2</code></p><p><code>mget key1 key2 key</code></p><p><code>msetnx k1 v1 k2 v2</code> 一致性，要么都成功，要么都失败</p><p><code>getset key value</code> 获取并且设置值</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">append key value <span class="token comment">#如果key存在，追加成功，如果key不存在，相当于set kkeyey value 并且返回value的长度</span></span>
<span class="line">strlen key <span class="token comment">#key存在返回value的长度，key不存在返回0，set key &#39;&#39; get key 得到 &quot;&quot; 长度为0</span></span>
<span class="line">getrange key start end <span class="token comment">#获取key从下标start到end，闭区间，-1 -1结果是最后一个字符，-1 0空串，0 0首个字符</span></span>
<span class="line">setrange key offset value <span class="token comment">#key存在，第offset位替换位value，如果key原来的长度没有offset的长度，不\\x00，key不存在一样</span></span>
<span class="line">setex key seconds value <span class="token comment">#添加并且key value的失效时间，已有的key，会修改值，并且设置失效时间</span></span>
<span class="line">setnx key value <span class="token comment">#不存在key才添加value到key中，并且结果为1，存在未0</span></span>
<span class="line">mset k1 v1 k2 v2 k3 v3 <span class="token comment">#设置多个对应value到对应的key中去</span></span>
<span class="line">mget k1 k2 k3 <span class="token comment">#按顺序去除key中的值，没有则那一列未nil</span></span>
<span class="line">msetnx k1 v1 k2 v2 <span class="token comment">#如果其中任何一个key存在值都会失败</span></span>
<span class="line"></span>
<span class="line">getset key value <span class="token comment">#取值并且设置值，如果key不存在value，取出nil，设置value为value</span></span>
<span class="line"></span>
<span class="line">incr key <span class="token comment">#key的value要是数字，如果不存在这个key，创建一个key为0，然后自增1返回结果为1</span></span>
<span class="line">decr key <span class="token comment">#key的value要是数字，如果不存在这个key，创建一个key为0，然后自减1返回结果为1</span></span>
<span class="line">incrby key increment <span class="token comment">#key的value要是数字，如果不存在这个key，创建一个key为0，然后自增increment返回结果为1</span></span>
<span class="line">decrby key increment <span class="token comment">#key的value要是数字，如果不存在这个key，创建一个key为0，然后自增increment返回结果为1</span></span>
<span class="line"></span>
<span class="line">mset k1.name name k1.age age <span class="token punctuation">..</span>.</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="list类型" tabindex="-1"><a class="header-anchor" href="#list类型"><span>list类型</span></a></h4><figure><img src="http://47.101.155.205/image-20220527235323286.png" alt="image-20220527235323286" tabindex="0" loading="lazy"><figcaption>image-20220527235323286</figcaption></figure><p>list是一个string列表，按照插入顺序排序，取出元素从左边开始取（头部），lpush往头部插入数据，rpush往尾部插入数据</p><p>lpush lpush rpush</p><p>lpop rpop</p><p>lrange</p><p>lindex</p><p>llen</p><p>lrem</p><p>ltrim</p><p>rpoplpush</p><p>lset</p><p>linsert</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">lpush key element <span class="token punctuation">..</span>. <span class="token comment">#往这个key中的头部添加element元素，如果key不存在，新建一个key，在头部添加元素</span></span>
<span class="line">rpush key element <span class="token punctuation">..</span>. <span class="token comment">#往这个key中的尾部添加element元素，如果key不存在，新建一个key，在尾部添加元素</span></span>
<span class="line">lrange key start stop <span class="token comment">#从下标start开始到下标stop结束，从key中取出元素</span></span>
<span class="line">lindex key index <span class="token comment">#从key中取出下标为index的element，如果没有key，或者index都返回nil</span></span>
<span class="line">llen key <span class="token comment">#获取key中element元素的个数，如果key不存在返回0</span></span>
<span class="line">lpop key <span class="token comment">#从key中的头部移除element元素，并返回其element值，元素都移除之后，返回nil，llen为0</span></span>
<span class="line">rpop key <span class="token comment">#从key中的尾部移除element元素，并返回其element值</span></span>
<span class="line">lrem key count element <span class="token comment">#从key中移除指定的element的count数量，返回成功移除的数量，count为0时，移除所有的element。+-前后</span></span>
<span class="line">ltrim key start stop <span class="token comment">#查找key中的start-top，截取这一段返回覆盖key。语法没有错，都是返回ok</span></span>
<span class="line">lset key index element <span class="token comment">#首先key要存在，index不能超过llen结果-1，index可以为负数，指定位置下标替换element</span></span>
<span class="line">rpoplpush <span class="token builtin class-name">source</span> destination <span class="token comment">#从source key中移除尾部元素添加至destination key中的头部，destination不存在，新建</span></span>
<span class="line">linsert key before<span class="token operator">|</span>after pivot element <span class="token comment">#在key中指定pivot支点前面或者后面插入元素，key不存在返回0，key存在返回新的llen，pivot不存在返回-1。</span></span>
<span class="line"><span class="token comment">##############################总结</span></span>
<span class="line">头部添加，尾部添加</span>
<span class="line">头部移除，尾部移除</span>
<span class="line">遍历element，element数量</span>
<span class="line">截取，移除指定element，获取指定index，key</span>
<span class="line">指定插入，指定替换</span>
<span class="line">尾部元素弹出添加至另一个key头部</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>set</span></a></h4><p><strong>Set类型时一个无序的string集合</strong></p><p>sadd smembers sismember</p><p>scard srem srandmemmber spop</p><p>smove sdiff sinter sunion</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">sadd key member <span class="token punctuation">..</span>. <span class="token comment">#添加一个key的set集合，设置元素member</span></span>
<span class="line">scard key <span class="token comment">#返回key集合元素数量</span></span>
<span class="line">srandmember key count <span class="token comment">#随机遍历key中的member成员count数量，超过scard会返回key，count是负数会返回重复的元素</span></span>
<span class="line">smembers key <span class="token comment">#遍历key中所有的member成员</span></span>
<span class="line">sismember key member <span class="token comment">#查询key中有没有member成员，返回结果1，或者0</span></span>
<span class="line">srem key member<span class="token punctuation">..</span>. <span class="token comment">#移除key中的member成员，返回移除成功数量结果，移除所有元素，自动删除key</span></span>
<span class="line">smove <span class="token builtin class-name">source</span> destination member <span class="token comment">#移动sourcekey中的member成员至destinationkey中</span></span>
<span class="line"><span class="token function">sdiff</span> key key<span class="token punctuation">..</span>. <span class="token comment">#返回第一个key的子集，里面不能有后面key的元素</span></span>
<span class="line">sunion key key<span class="token punctuation">..</span>. <span class="token comment">#返回几个key中的并集,没有重复的元素</span></span>
<span class="line">sinter key key<span class="token punctuation">..</span>. <span class="token comment">#返回几个key的交集</span></span>
<span class="line">spop key count <span class="token comment">#不接count参数弹出一个，key中元素被弹出全部，自动删除key，</span></span>
<span class="line"><span class="token comment">###############总结</span></span>
<span class="line">添加，长度</span>
<span class="line">遍历，随机遍历</span>
<span class="line">删除，随机移除元素，移动</span>
<span class="line">是否存在某个member</span>
<span class="line">交集，并集，差集</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hash" tabindex="-1"><a class="header-anchor" href="#hash"><span>Hash</span></a></h4><p>Hash类型是一个string类型的field和value的映射表，适合存储对象</p><p>hset hget hmset 4.0后弃用 hmget</p><p>hgetall hdel hlen hexists</p><p>hkeys hvals hsetnx</p><p>hincrby</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">hset key field value<span class="token punctuation">[</span>field value<span class="token punctuation">]</span> <span class="token comment">#覆盖不会产生结果计数，没有对应field value对应关系新建关系，计数+1</span></span>
<span class="line">hget key field <span class="token comment">#取key中field对应关系的value的值</span></span>
<span class="line">hmget key field field<span class="token punctuation">..</span>. <span class="token comment">#从key中取field对应关系的value值</span></span>
<span class="line">hmset key field value<span class="token punctuation">[</span>field value<span class="token punctuation">]</span> <span class="token comment">#返回结果时OK</span></span>
<span class="line">hgetall key <span class="token comment">#获取key中的所有的field value对应关系</span></span>
<span class="line">hlen key <span class="token comment">#获取key中有几对field value对应关系</span></span>
<span class="line">hdel key field<span class="token punctuation">[</span>field<span class="token punctuation">]</span> <span class="token comment">#删除field对应关系从key中</span></span>
<span class="line">hexists key field <span class="token comment">#判断key中有么有field对应关系</span></span>
<span class="line">hkeys key <span class="token comment">#获取key的所有field字段</span></span>
<span class="line">hvals key <span class="token comment">#获取key中所有的field字段的value</span></span>
<span class="line">hincrby key field increment <span class="token comment">#没有key field会自动创建这个关系，自增increment，符号位-就自减</span></span>
<span class="line">hsetnx key field value <span class="token comment">#不存在key field关系才创建一个</span></span>
<span class="line"></span>
<span class="line">添加创建，获取一个key field value，获取多个key field field</span>
<span class="line">获取所有的key的field value对应结果，几对field value关系，删除，判断是否存在</span>
<span class="line">获取所有的field，获取所有的value，自增，不存在filed才创建</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="zset" tabindex="-1"><a class="header-anchor" href="#zset"><span>Zset</span></a></h4><p>Zset时有序集合，不允许重复元素出现，可以位Zset集合的每个元素关联一个score属性（可以重复），通过这个来进行元素的排序。默认从小到大。</p><p>zadd zrange zrangebyscore</p><p>zrevrange zrem zcard</p><p>zcount</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">zadd key score member<span class="token punctuation">[</span>score member<span class="token punctuation">]</span> <span class="token comment">#如果member存在修改score的值，结果为0</span></span>
<span class="line">zrem key member <span class="token punctuation">[</span>member<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token comment">#移除member从key中，结果为移除成功的数量</span></span>
<span class="line">zrange key start stop <span class="token punctuation">[</span>withscores<span class="token punctuation">]</span> <span class="token comment">#遍历start到stop，闭区间，有withscores就需要score的值在后面,从小到大</span></span>
<span class="line">zrevrange key start stop <span class="token punctuation">[</span>withscores<span class="token punctuation">]</span> <span class="token comment">#遍历start到stop，闭区间，有withscores就需要score的值在后面,从小到大</span></span>
<span class="line">zrangebyscore key min max <span class="token punctuation">[</span>withscores<span class="token punctuation">]</span> <span class="token punctuation">[</span>LIMIT offset count<span class="token punctuation">]</span> <span class="token comment">#offset下标，-inf +inf</span></span>
<span class="line">zcard key <span class="token comment">#统计所有的member数量</span></span>
<span class="line">zcount key min max <span class="token comment">#统计score在min max区间的member数量</span></span>
<span class="line"></span>
<span class="line">添加，移除 </span>
<span class="line">小到大遍历，大到小遍历，从小到大范围遍历</span>
<span class="line">统计所有数量，统计范围数量</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">zincrby key increment member</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特殊数据类型" tabindex="-1"><a class="header-anchor" href="#特殊数据类型"><span>特殊数据类型</span></a></h3><h4 id="geospatial" tabindex="-1"><a class="header-anchor" href="#geospatial"><span>Geospatial</span></a></h4><p>GEODIST GEOHASH GEOPOS GEORADIUS GEORADIUSBYMEMBER GEORADIUSBYMEMBER_RO GEORADIUS_RO GEOSEARCH GEOSEARCHSTORE</p><p><strong>XX</strong>：只更新已经存在的元素。永远不要添加元素。 <strong>NX</strong>：不要更新已经存在的元素。总是添加新元素。 <strong>CH</strong>：将返回值从添加的新元素数修改为改变的元素总数（CH 是changed的缩写）。更改的元素是添加的新元素和已更新坐标的元素。因此，命令行中指定的与过去得分相同的元素不计算在内。注意：通常情况下，GEOADD 的返回值只计算添加的新元素的数量。</p><p>geoadd</p><p>geopos查询经度纬度</p><p>geodist两个直接的距离</p><p>georadius</p><p>georadiusbymember</p><p>geohash</p><p>type geoadd创建的类型，时zset</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">geoadd key longitude latitude member<span class="token punctuation">[</span>longitude latitude member<span class="token punctuation">]</span> <span class="token comment">#经度纬度member</span></span>
<span class="line"><span class="token builtin class-name">type</span> key <span class="token comment">#结果为zset</span></span>
<span class="line">zrange key <span class="token number">0</span> <span class="token parameter variable">-1</span> withscores <span class="token comment">#为16为的数字</span></span>
<span class="line">geopost key member <span class="token punctuation">[</span>member<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token comment">#查询key中member的经度纬度</span></span>
<span class="line">geodist key member1 member2<span class="token punctuation">[</span>m<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi<span class="token punctuation">]</span> <span class="token comment">#key中的member1和member2的直线距离及使用什么单位</span></span>
<span class="line">georadius key longitude latitude radius m<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi withcoord withdist count count <span class="token punctuation">..</span>.</span>
<span class="line">georadiusbymember key member radius m<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi <span class="token punctuation">..</span>. <span class="token comment">#自己也会查出来</span></span>
<span class="line">geohash key member <span class="token punctuation">[</span>member<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token comment">#11位长度字符串</span></span>
<span class="line"></span></code></pre></div><h4 id="hyperloglog" tabindex="-1"><a class="header-anchor" href="#hyperloglog"><span>hyperloglog</span></a></h4><p>pfadd</p><p>pfcount</p><p>pfmerge</p><p>基数统计0.81%错误lv，12kb内存</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pfadd key element <span class="token punctuation">[</span>element<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token comment">#</span></span>
<span class="line"><span class="token builtin class-name">type</span> key <span class="token comment">#时string类型是一个HyperLogLog string类型</span></span>
<span class="line">pfcount key <span class="token punctuation">[</span>key<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token comment"># element输入a-z结果位25</span></span>
<span class="line">pfmerge destkey sourcekey <span class="token punctuation">[</span>sourcekey<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token comment">#复制到destkey</span></span>
<span class="line">只能使用pfadd方式添加元素到已有的hyperloglog类型的key上</span>
<span class="line"></span></code></pre></div><h4 id="bitmap" tabindex="-1"><a class="header-anchor" href="#bitmap"><span>bitmap</span></a></h4><p>位图，两个状态</p><p>setbit</p><p>getbit</p><p>bitcount</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">setbit key offset vlaue <span class="token comment">#value必须位0或1</span></span>
<span class="line">getbit key offset <span class="token comment">#offset没有被设置值，结果位0，</span></span>
<span class="line">bitcount key <span class="token punctuation">[</span>start end<span class="token punctuation">]</span> <span class="token comment"># ???</span></span>
<span class="line"></span></code></pre></div><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><p>事务是指一系列操作步骤，这一系列的操作步骤，要么完全地执行，要么完全地不执行。</p><p>Redis 中的事务（transaction）是一组命令的集合，至少是两个或两个以上的命令，redis事务保证这些命令被执行时中间不会被任何其他操作打断。</p><p>redis事务不保证完全一致性，单个执行命令具有原子性，命令执行的有序性，执行命令执行中不可被打断</p><p>开启事务multi</p><p>命令入队</p><p>执行事务exec</p><p>取消事务discard</p><p>语法问题出现错误</p><p>语法没有问题，执行出现错误</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">multi <span class="token comment">#开启事务，命令排队，先后顺序，一致性</span></span>
<span class="line">queued排队，队列</span>
<span class="line"><span class="token builtin class-name">exec</span> <span class="token comment">#事务开始执行，事务内的所有执行语句内容，事务被打断，返回 nil</span></span>
<span class="line">discard <span class="token comment">#取消事务</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">####exec执行的两种情况</span></span>
<span class="line"><span class="token comment">#出现命令语法错误</span></span>
<span class="line">EXECABORT Transaction discarded because of previous errors.语法错误</span>
<span class="line">abort 中止</span>
<span class="line"></span>
<span class="line"><span class="token comment">#出现执行命令底层数据类型错误</span></span>
<span class="line"><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">#手动终止事务</span></span>
<span class="line">discard</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="watch" tabindex="-1"><a class="header-anchor" href="#watch"><span>watch</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">watch</span> key <span class="token punctuation">[</span>key<span class="token punctuation">..</span>.<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>监视一个(或多个) key ，如果在事务执行之前这个(或这些) <strong>key 被其他命令所改动</strong>，那么<strong>事务将被打断</strong>。</p><p>watch在事务执行exec，或者discard之后都会取消监视。</p><p>watch命令不能出现在multi命令的队列中。</p><p>情况模拟</p><p>一个账户原来有1000元，账户没有消费，a开始用账户消费，开启redis事务，执行任务排队的时候，b给a的账户存入了1000，之后a的事务才开始执行，后面得到的结果时1900，不会出现mysql那样的情况。</p><p>使用watch情况</p><p>count是2000在开启multi事务之前，使用watch监视count，监视开启之后，b给a的账户存入了1000，a开始执行multi开启事务，进行消费，执行队列里面消费了100，在执行exec的时候就会因为key被其他命令锁改动，事务被打断，就没有执行。</p><h3 id="unwatch" tabindex="-1"><a class="header-anchor" href="#unwatch"><span>unwatch</span></a></h3><p>取消 WATCH 命令对所有 key 的监视。如果在执行 WATCH 命令之后， EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。</p><h2 id="jedis" tabindex="-1"><a class="header-anchor" href="#jedis"><span>Jedis</span></a></h2><ol><li>导入依赖</li><li>连接redis数据库</li><li>通过Jedis创建连接</li></ol><div class="language-xml" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>使用jedis连接不上redis，修改配置文件两个位置</p><figure><img src="http://47.101.155.205/image-20220528184732989.png" alt="image-20220528184732989" tabindex="0" loading="lazy"><figcaption>image-20220528184732989</figcaption></figure><p>多线程下使用jedis是有问题的，出现了以下异常</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>JedisConnectionException</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketTimeoutException</span><span class="token operator">:</span> <span class="token class-name">Read</span> timed out</span>
<span class="line">    </span>
<span class="line"></span></code></pre></div><ul><li>测试出现运行时redis错误，事务的情况</li></ul><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTransaction</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.144.130&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        transaction<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul><li>测试出现语法错误，事务的处理情况</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTransaction</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.144.130&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        jedis<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        transaction<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>IllegalStateException</span><span class="token operator">:</span> <span class="token class-name">Cannot</span> use <span class="token class-name">Jedis</span> when in <span class="token class-name">Multi<span class="token punctuation">.</span> Please</span> use <span class="token class-name">Transaction</span> or reset jedis state<span class="token punctuation">.</span>这种使用redis命令是能插入成功的。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>下面两种情况，使用监视count，导致事务被终端，事务执行的结果为null，没有使用watch监控的情况，会放回执行的结果</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTransaction01</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.144.130&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//jedis.watch(&quot;count&quot;);</span></span>
<span class="line">        <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">decrBy</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">incrBy</span><span class="token punctuation">(</span><span class="token string">&quot;out&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springboot整合redis" tabindex="-1"><a class="header-anchor" href="#springboot整合redis"><span>SpringBoot整合redis</span></a></h2><p>redis是一个数据库，所以是在spring-data框架下的，在spring2.0之后，使用lettuce替换了jedis</p><ol><li>新建springboot项目，导入redis依赖</li><li>编写配置文件，取出需要连接使用的对象</li><li>使用RedisTemplate模板类，发现出现乱码问题</li></ol><figure><img src="http://47.101.155.205/image-20220612044753643.png" alt="image-20220612044753643" tabindex="0" loading="lazy"><figcaption>image-20220612044753643</figcaption></figure><p>出现这个问题可以使用自带的StringRedisTemplate来操作，就不会有这种问题了</p><h3 id="自定义redistemplate" tabindex="-1"><a class="header-anchor" href="#自定义redistemplate"><span>自定义RedisTemplate</span></a></h3><p>源码如下</p><figure><img src="http://47.101.155.205/image-20220612051910290.png" alt="image-20220612051910290" tabindex="0" loading="lazy"><figcaption>image-20220612051910290</figcaption></figure><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTemplateConfig</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFacotory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//设置序列化格式</span></span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        retrun template<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中set...Serializer传递的参数就是序列化的方式，可以根据需求指定自己需要的序列化方式。</p><h2 id="redis-conf配置文件" tabindex="-1"><a class="header-anchor" href="#redis-conf配置文件"><span>Redis.conf配置文件</span></a></h2><p>是客户端的情况下，可以使用config get key，配置文件中的key来获取和设置值</p><ol><li>首先就写了运行redis-server必须要有redis.conf配置文件，大小写不敏感</li><li>includes加载一个或者更多的配置文件</li><li>network网络连接，bind ip，protected-mode保护模式（可以通过config set设置），port端口设置，tcp连接设置，超时设置，</li><li>TLS/SSL设置，默认是关闭的</li><li>general设置，默认不是daemon后台进程，以后台进程需要有pidfile /var/run/redis_6379.pid这个文件·，loglevel日志等级，debug、verbose、notice、warning，logfile，系统日志，数据库数量，启动logo设置，</li><li>snapshotting快照，因为redis是基于内存操作，断电即时去所有数据，内存到硬盘的，没有key修改不保存，15分钟保存一次是最慢的，最快的是60秒内取保存。rdbcompression yes 压缩保存的.rdb文件，会消耗一定的CPU，rdb检查是开启的，dbfilename dump.rdb转存数据名字，<strong>rbd文件副本，这里应该在搭建redis集群需要用到</strong></li><li>replication复制，主从复制需要</li><li>security安全，可以设置requirepass密码</li><li>clients客户端，客户端最大连接数</li><li>memory management内存管理</li><li>append only mode文件追加，Append Only File，RDB和AOP可以同时启用http://redis.io/topics/persistence可以获取更多信息，默认aof模式是关闭的，appendfsync，aof文件写命令数据的策略。</li><li>lua scription lua脚本</li><li>redis cluster redis集群</li><li>cluster docker/NAT support</li><li>Slow log</li><li>latency Monitor延迟监视器</li><li>event notification事件通知</li><li>gopher server</li><li>advanced config</li><li>active defragmentation</li></ol><h2 id="持久化" tabindex="-1"><a class="header-anchor" href="#持久化"><span>持久化</span></a></h2><h3 id="rdb" tabindex="-1"><a class="header-anchor" href="#rdb"><span>RDB</span></a></h3><p>Redis DataBase，就是在指定的时间间隔内将内存中的数据集快照写入磁盘，数据恢复时将快照文件直接再读到内存。</p><p>RDB 保存了在某个时间点的数据集（全部数据）。存储在一个二进制文件中，只有一个文件。默认是 dump.rdb。RDB 技术非常适合做备份，可以保存最近一个小时，一天，一个月的全部数据。保存数据是在单独的进程中写文件，不影响 Redis 的正常使用。RDB 恢复数据时比其他 AOF 速度快。redis通过一定的条件判断，是否需要将内存中数据写入到磁盘中，在服务器启动时会去读取磁盘中的dump.rdb问将数据写入到内存中去。指定时间间隔将数据持久化到硬盘。执行shutdown命令，flushdb会直接将数据写入到硬盘中。</p><p>优点：数据恢复十分方便，比AOF要快</p><p>缺点：</p><ol><li>会丢失最后一次快照以后修改的数据。</li><li>需要分配一个子进程来操作磁盘，会占用一定的CPU。</li></ol><h3 id="aof" tabindex="-1"><a class="header-anchor" href="#aof"><span>AOF</span></a></h3><p>Append-only File（AOF），Redis 每次接收到一条改变数据的命令时，它将把该命令写到一个 AOF 文件中（只记录写操作，读操作不记录），当 Redis 重启时，它通过执行 AOF 文件中所有的命令来恢复数据。</p><p>aof是文件追加，通过记录每次set key的记录，追加到一个文件中，在启动服务器时，将这些命令全部执行过去，大数据时效率较慢</p><p>aof文件被破坏时，可以通过redis-check-aof --fix appendonly.aof 文件明修复，这个过程会丢失部分数据</p><p>config get dir 时/root在root目录下，是因为我启动的时候实在root目录下启动的</p><p>修改appendonly.aof配置文件后，服务端拒绝连接，查看进程是没有启动</p><p>改的不是很乱，数据没有丢失，将这个功能关闭之后，之前写入到appendonly.aof的数据就无法写入到内存中了</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#aof文件写入命令策略</span></span>
<span class="line">appendfsync no <span class="token comment">#不主动进行同步操作，而是完全交由操作系统来做（即每 30 秒一次），比较快但不是很安全。</span></span>
<span class="line">appendfsync always <span class="token comment">#每次执行写入都会执行同步，慢一些但是比较安全。</span></span>
<span class="line">appendfsync everysec <span class="token comment">#每秒执行一次同步操作，比较平衡，介于速度和安全之间。这是默认项。</span></span>
<span class="line">auto-aof-rewrite-min-size<span class="token comment">#允许重写的最小 AOF 文件大小，默认是 64M 。当 aof 文件大于 64M 时，开始整理 aof 文件，去掉无用的操作命令。缩小 aop 文件。</span></span>
<span class="line"></span></code></pre></div><p>优点：数据的完整性比RDB要好。</p><p>缺点：aof文件在操作过程中会越来越大，大数据量启动要比RDB慢。</p><h2 id="过期策略" tabindex="-1"><a class="header-anchor" href="#过期策略"><span>过期策略</span></a></h2><p>Redis 的过期策略指的是在 Redis 中设置过期时间后，当键到达过期时间时如何处理的策略。Redis 实现了多种过期策略，常见的有以下几种：</p><ol><li><p>定时删除策略：Redis 会在键到达过期时间时立即删除该键。这种策略的优点是可以保证内存占用不会超过限制，缺点是在删除大量过期键时会增加 CPU 负载。</p></li><li><p>惰性删除策略：Redis 不会主动删除过期键，而是在客户端尝试访问该键时检查是否过期，如果过期则删除该键。这种策略的优点是可以减少删除操作对 CPU 的影响，缺点是可能会导致内存占用超过限制。</p></li><li><p>定期删除策略：Redis 会每隔一段时间主动删除一批过期键，以保持内存占用在合理范围内。这种策略的优点是可以平衡 CPU 负载和内存占用，缺点是无法保证内存占用不会超过限制。</p></li></ol><p>Redis 默认使用惰性删除策略，但也可以通过配置文件或命令行参数来指定其他的过期策略。选择合适的过期策略需要根据具体的业务需求和系统性能进行权衡。</p><h2 id="订阅通知" tabindex="-1"><a class="header-anchor" href="#订阅通知"><span>订阅通知</span></a></h2><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">subscribe channel <span class="token punctuation">[</span>channel<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token comment">#订阅频道，在服务端订阅频道之后就不能输入命令了，只能通过CTRL+c退出，直接就退出redis-cli</span></span>
<span class="line">publish channel message <span class="token comment">#发布消息，订阅频道的客户端就能接收到消息</span></span>
<span class="line">unsubscribe <span class="token punctuation">[</span>channel <span class="token punctuation">[</span>channel<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">#取消订阅频道</span></span>
<span class="line"></span></code></pre></div><p>reids源码里的pubsub.c文件。</p><figure><img src="http://47.101.155.205/image-20220529095816570.png" alt="image-20220529095816570" tabindex="0" loading="lazy"><figcaption>image-20220529095816570</figcaption></figure><h2 id="redis主从复制" tabindex="-1"><a class="header-anchor" href="#redis主从复制"><span>Redis主从复制</span></a></h2><p>通过持久化功能，Redis 保证了即使在服务器重启的情况下也不会丢失（或少量丢失）数据，但是由于数据是存储在一台服务器上的，如果这台服务器出现故障，比如硬盘坏了，也会导致数据丢失。</p><p>为了避免单点故障，我们需要将数据复制多份部署在多台不同的服务器上，即使有一台服务器出现故障其他服务器依然可以继续提供服务。</p><p>这就要求当一台服务器上的数据更新后，自动将更新的数据同步到其他服务器上，那该怎么实现呢？Redis 的主从复制。</p><p>我们可以通过部署多台 redis，并在配置文件中指定这几台 redis 之间的主从关系，主负责写入数据，同时把写入的数据实时同步到从机器，这种模式叫做主从复制，即master/slave，并且 redis 默认 master 用于写，slave 用于读，向 slave 写数据会导致错误。</p><p>redis默认每个服务端都是master，每个slave只能有一个master</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">info <span class="token punctuation">[</span>section<span class="token punctuation">]</span> <span class="token comment">#打印redis server</span></span>
<span class="line">slaveof <span class="token function">ip</span> port <span class="token comment">#配置从机的主机ip及端口号</span></span>
<span class="line"></span></code></pre></div><p>###VMware搭建多个虚拟机</p><ol><li>虚拟机——&gt;管理——&gt;克隆</li></ol><figure><img src="http://47.101.155.205/image-20220529125217608.png" alt="2克隆源" tabindex="0" loading="lazy"><figcaption>2克隆源</figcaption></figure><figure><img src="http://47.101.155.205/image-20220529125259877.png" alt="3.克隆方式" tabindex="0" loading="lazy"><figcaption>3.克隆方式</figcaption></figure><figure><img src="http://47.101.155.205/image-20220529125857597.png" alt="4.启动查看ip" tabindex="0" loading="lazy"><figcaption>4.启动查看ip</figcaption></figure><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#修改主机名称，主机名称在配置文件中配置/etc/hostname，进入这个文件修改就可以了，修改之后要重启才看可以</span></span>
<span class="line"><span class="token function">vim</span> /etc/hostname</span>
<span class="line"></span>
<span class="line"><span class="token comment">#修改两个克隆出来的虚拟机的ip地址及主机名称</span></span>
<span class="line"><span class="token builtin class-name">cd</span> /etc/sysconfig/network-scripts <span class="token comment">#进入网络配置文件的目录</span></span>
<span class="line"><span class="token function">vim</span> ifcfg-ens33 <span class="token comment">#在文件中添加一个一行IPADDR=196.168.144.129同一网段，前面三位相同，保存退出</span></span>
<span class="line">systemctl restart network <span class="token comment">#重启网络ifconfig查看是否有效</span></span>
<span class="line"></span></code></pre></div><p>确定3台服务器搭建完毕，通过Xshell能连接上</p><p>可以对配置文件进行修改</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">logfile <span class="token string">&quot;6379.log&quot;</span> <span class="token comment">#上面写了会生成在/dev/生成日志，启动测试发现，日志生成在./目录下，启动目录下，而且启动之后就没有启动提示了</span></span>
<span class="line"></span></code></pre></div><h3 id="通过命令建立主从关系" tabindex="-1"><a class="header-anchor" href="#通过命令建立主从关系"><span>通过命令建立主从关系</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">slaveof <span class="token function">host</span> port <span class="token comment">#指定此server为从节点，只能从master读取复制的数据</span></span>
<span class="line">Ok <span class="token comment">#不管是否连接成功都会返回ok</span></span>
<span class="line"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> slaveof <span class="token number">196.168</span>.144.130 <span class="token number">6379</span></span>
<span class="line">OK Already connected to specified master <span class="token comment">#出现这个是因为两次的ip port都一样</span></span>
<span class="line"><span class="token comment">#指定成功会有结果返回</span></span>
<span class="line"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k1 v1</span>
<span class="line"><span class="token punctuation">(</span>error<span class="token punctuation">)</span> READONLY You can&#39;t <span class="token function">write</span> against a <span class="token builtin class-name">read</span> only replica. </span>
<span class="line">slaveof no one <span class="token comment">#</span></span>
<span class="line"><span class="token comment">#使用VMware模拟3台虚拟机，使用失败，采用单机多端口模拟使用</span></span>
<span class="line"></span></code></pre></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#新建一份配置文件，redis.6380.conf</span></span>
<span class="line">include /usr/local/bin/config/redis.conf</span>
<span class="line">port <span class="token number">6380</span></span>
<span class="line">logfile <span class="token string">&quot;6380.log&quot;</span></span>
<span class="line">dbfilename dump6380.rdb</span>
<span class="line">pidfile /var/run/redis_6380.pid</span>
<span class="line"><span class="token comment">#这种方式的配置一定要让include在第一行，这样后面的配置才会覆盖前面的配置</span></span>
<span class="line"><span class="token comment">#新建一份配置文件，redis.6381.conf</span></span>
<span class="line">port <span class="token number">6381</span></span>
<span class="line">logfile <span class="token string">&quot;6381.log&quot;</span></span>
<span class="line">include /usr/local/bin/config/redis.conf</span>
<span class="line">dbfilename dump6381.rdb</span>
<span class="line">pidfile /var/run/redis_6381.pid </span>
<span class="line"></span>
<span class="line"><span class="token comment">#复制一份redis.conf配置文件修改里面的内容</span></span>
<span class="line">port</span>
<span class="line">pidfile</span>
<span class="line">dbfilename</span>
<span class="line">logfile</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单机多端口测试</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">redis-server config/redis.conf <span class="token comment">#6379端口</span></span>
<span class="line">redis-server config/redis6381.conf <span class="token comment">#6381端口</span></span>
<span class="line">redis-server redis6380.conf <span class="token comment">#6380端口</span></span>
<span class="line"><span class="token comment">#启动3个端口，打开3个窗口，使用redis-cli客户端连接</span></span>
<span class="line"><span class="token comment">#查看里面的keys，通过命令设置主从关系</span></span>
<span class="line">slaveof <span class="token number">127.0</span>.0.1 <span class="token number">6379</span> <span class="token comment">#返回结果为OK，这个时候，bin目录下已经生成了dump6380.rdb文件</span></span>
<span class="line">slaveof <span class="token number">127.0</span>.0.1 <span class="token number">6379</span> <span class="token comment">#返回结果为OK，这个时候，bin目录下已经生成了dump6381.rdb文件</span></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20220529154208446.png" alt="命令配置主从关系" tabindex="0" loading="lazy"><figcaption>命令配置主从关系</figcaption></figure><ul><li>服务器宕机</li></ul><figure><img src="http://47.101.155.205/image-20220529155322231.png" alt="6379宕机" tabindex="0" loading="lazy"><figcaption>6379宕机</figcaption></figure><p>主从复制服务器宕机到服务器恢复，从机会自动连接上主机，这个过程应该是由使用redis的订阅发布模块的功能的。</p><ul><li>注意点：</li></ul><ol><li>服务器宕机，手动配置从机执行slaveof no one 命令，主机恢复连接，从机还是主机</li><li>通过命令的方式配置主从关系，重新启动后没有效果</li><li>命令配置从节点，主节点宕机，slaveof no one，从节点为主节点，主节点连接上也没有用</li><li>主节点宕机，可以通过手动设置主节点，从节点的方式重新建立主从复制关系</li><li>一个master可以多个slave，一个slave只能有一个master</li></ol><h3 id="复制原理" tabindex="-1"><a class="header-anchor" href="#复制原理"><span>复制原理</span></a></h3><p>通过测试也能发现，设置server为slave就会在./目录下生成一个配置.rdb文件，就是slave启动之后就会连接到master发送一个同步sync命令，master接到命令，启动后台存盘进程，同时收集所有接收到的用户修改的的数据集的命令，在后台进程执行完毕之后，master将整个数据文件送到slave，并完成一次完全同步。</p><p>全量复制：salve发送一个请求，master将</p><p>增量复制：slave初始化后，开始正常工作，此时master服务器发生的写操作同步到从服务器的过程。</p><p>情况模拟：使用java程序连接一个master服务器，通过循环写入100000条数据，启动java程序后，启动master的slave服务器，这个时候</p><p>54秒，kill -9 9万条数据</p><p>37秒 ，kill 带保存数据的命令12万的数据</p><p>50秒左右 kill -9 11万条数据</p><p>53秒 kill -9 master进程 18万数据在slave master只有10485条数据</p><p>53秒 kill -9 salve 5816条数据</p><p>53秒之后 1秒多 kill -9 master 5816</p><p>53秒 kill -9 salve 0条数据</p><p>53秒之后 1秒多 kill -9 master 4200数据</p><p>全量复制：salve服务在启动后就会连接master发送一个请求，去获取mater当前最新的rdb快照，master不再将临时的写入rfb文件覆盖之前的rdb文件，而是将这个文件传输给slave服务器，在在某种情况下才会覆盖原有的rdb文件。（我的理解）</p><p><strong>无磁盘复制</strong>：子进程直接将RDB通过网络发送给从服务器，不使用磁盘作为中间存储</p><p>master服务器会开启一个后台进程用于将redis中的数据生成一个rdb文件，与此同时，服务器会缓存所有接收到的来自客户端的写命令（包含增、删、改），先将该rdb文件传递给slave服务器，而slave服务器会将rdb文件保存在磁盘并通过读取该文件将数据加载到内存，在此之后master服务器会将在此期间缓存的命令通过redis传输协议发送给slave服务器，然后slave服务器将这些命令依次作用于自己本地的数据集上最终达到数据的一致性。</p><figure><img src="http://47.101.155.205/image-20220529182455514.png" alt="image-20220529182455514" tabindex="0" loading="lazy"><figcaption>image-20220529182455514</figcaption></figure><p>这篇文章：https://blog.csdn.net/MortShi/article/details/122921765</p><p>主从复制特点</p><ol><li>Redis使用异步复制。但从Redis 2.8开始，从服务器会周期性的应答从复制流中处理的数据量。</li><li>一个主服务器可以有多个从服务器。</li><li>从服务器也可以接受其他从服务器的连接。除了多个从服务器连接到一个主服务器之外，多个从服务器也可以连接到一个从服务器上，形成一个图状结构。</li><li>Redis主从复制不阻塞主服务器端。也就是说当若干个从服务器在进行初始同步时，主服务器仍然可以处理请求。</li><li>主从复制也不阻塞从服务器端。当从服务器进行初始同步时，它使用旧版本的数据来应对查询请求，假设你在redis.conf配置文件是这么配置的。否则的话，你可以配置当复制流关闭时让从服务器给客户端返回一个错误。但是，当初始同步完成后，需要删除旧的数据集和加载新的数据集，在这个短暂的时间内，从服务器会阻塞连接进来的请求。</li><li>主从复制可以用来增强扩展性，使用多个从服务器来处理只读的请求（比如，繁重的排序操作可以放到从服务器去做），也可以简单的用来做数据冗余。</li><li>使用主从复制可以为主服务器免除把数据写入磁盘的消耗：在主服务器的redis.conf文件中配置“避免保存”（注释掉所有“保存“命令），然后连接一个配置为“进行保存”的从服务器即可。但是这个配置要确保主服务器不会关机。</li></ol><h3 id="高可用性哨兵模式" tabindex="-1"><a class="header-anchor" href="#高可用性哨兵模式"><span>高可用性哨兵模式</span></a></h3><p>Sentinel 哨兵是 redis 官方提供的高可用方案，可以用它来监控多个 Redis 服务实例的运行情况。Redis Sentinel 是一个运行在特殊模式下的 Redis 服务器。Redis Sentinel 是在多个Sentinel 进程环境下互相协作工作的。</p><p>Sentinel 系统有三个主要任务：</p><ol><li>监控：Sentinel 不断的检查主服务和从服务器是否按照预期正常工作。</li><li>提醒：被监控的 Redis 出现问题时，Sentinel 会通知管理员或其他应用程序。</li><li>自动故障转移：监控的主 Redis 不能正常工作，Sentinel 会开始进行故障迁移操作。将一个从服务器升级新的主服务器。让其他从服务器挂到新的主服务器。同时向客户端提供新的主服务器地址。</li></ol><figure><img src="http://47.101.155.205/image-20220529162503391.png" alt="动力节点redis" tabindex="0" loading="lazy"><figcaption>动力节点redis</figcaption></figure><h3 id="sentinel-conf配置文件" tabindex="-1"><a class="header-anchor" href="#sentinel-conf配置文件"><span>sentinel.conf配置文件</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">port <span class="token number">26379</span> <span class="token comment">#默认配置文件端口号</span></span>
<span class="line">sentinel monitor mymaster <span class="token number">127.0</span>.0.1 <span class="token number">6380</span> <span class="token number">2</span> <span class="token comment">#默认投票数是，在只有一个哨兵进程的情况下，不能投票成功</span></span>
<span class="line">redis-sentinel sentinel.conf配置文件地址 <span class="token comment">#启动哨兵进程命令</span></span>
<span class="line"></span></code></pre></div><p>哨兵进程日志</p><figure><img src="http://47.101.155.205/image-20220529170803139.png" alt="image-20220529170803139" tabindex="0" loading="lazy"><figcaption>image-20220529170803139</figcaption></figure><p>哨兵工作原理</p><ol><li>Sentinel 会不断检查 Master 和 Slave 是否正常。</li><li>如果 Sentinel进程挂了，就无法监控，所以需要多个哨兵，组成 Sentinel 网络，一个健康的Sentinel 至少有 3 个 Sentinel 应用。彼此在独立的物理机器或虚拟机。</li><li>监控同一个 Master 的 Sentinel 会自动连接，组成一个分布式的 Sentinel 网络，互相通信并交换彼此关于被监控服务器的信息。</li><li>当一个 Sentinel 认为被监控的服务器已经下线时，它会向网络中的其它 Sentinel 进行确认，判断该服务器是否真的已经下线。</li><li>如果下线的服务器为主服务器，那么 Sentinel 网络将对下线主服务器进行自动故障转移，通过将下线主服务器的某个从服务器提升为新的主服务器，并让其从服务器转移到新的主服务器下，以此来让系统重新回到正常状态。</li><li>下线的旧主服务器重新上线，Sentinel 会让它成为slave，挂到新的master下。</li></ol><p>哨兵模式会修改redis.conf配置文件</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">user default on nopass ~* +@all <span class="token comment">#最后一行</span></span>
<span class="line"></span></code></pre></div><p>当所有的服务都宕机时，sentinel会说明在一个指定时间之前不会执行故障转移。</p><h2 id="安全设置" tabindex="-1"><a class="header-anchor" href="#安全设置"><span>安全设置</span></a></h2><p>访问 Redis 默认是没有密码的，这样不安全，任意用户都可以访问。可以启用使用密码才能访问 Redis。设置 Redis 的访问密码，修改 redis.conf 中这行 requirepass 密码。密码要比较复杂，不容易破解，而且需要定期修改。因为 redis 速度相当快，所以在一台比较好的服务器下，一个外部的用户可以在一秒钟进行 150K 次的密码尝试，需要指定非常非常强大的密码来防止暴力破解。</p><ul><li>设置密码的方式</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">config <span class="token builtin class-name">set</span> requirepass 密码 <span class="token comment">#客户端连接上之后执行命令，重启即失效</span></span>
<span class="line">requirepass <span class="token string">&quot;&quot;</span> <span class="token comment">#配置文件修改,&quot;&quot;改为密码即可</span></span>
<span class="line"></span></code></pre></div><ul><li>访问有密码的redis服务端</li></ul><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">auth password <span class="token comment">#连接之后输入命令，进行密码验证</span></span>
<span class="line">redis-cli <span class="token parameter variable">-p</span> port <span class="token parameter variable">-a</span> password <span class="token comment">#会提示在命令使用-a或者-u密码连接不安全</span></span>
<span class="line"></span></code></pre></div><h2 id="redis缓存穿透和雪崩" tabindex="-1"><a class="header-anchor" href="#redis缓存穿透和雪崩"><span>Redis缓存穿透和雪崩</span></a></h2><h3 id="redis客户端缓存" tabindex="-1"><a class="header-anchor" href="#redis客户端缓存"><span>Redis客户端缓存</span></a></h3><figure><img src="http://47.101.155.205/image-20220529193447606.png" alt="image-20220529193447606" tabindex="0" loading="lazy"><figcaption>image-20220529193447606</figcaption></figure><h3 id="redis缓存穿透" tabindex="-1"><a class="header-anchor" href="#redis缓存穿透"><span>Redis缓存穿透</span></a></h3><p>大概意思是客户端发来请求，需要查询某个数据，可是这个数据在redis数据库中没有，又去关系型数据库里面查，发起大量的这样请求，导致数据库宕机。</p><p>处理这种请求的方式：</p><ol><li>如果这个数据在缓存中不存在，去数据库查询，不存在，放回一个空的结果，让后让redis保存起来，用户下次再来查询，返回的就是空的结果。</li></ol><p>问题是：频繁这样的操作会让缓存里面多出许多无用的数据，不过这个可以设置key的时间来解决。如果用不同的key做大量的查询，又回到了本质问题了，指标不治本。</p><ol start="2"><li>加过滤器，查询的数据在里面，我才放行，没有直接不让通过。用到了布隆过滤器。准确性问题，说key存在的时候，可能不存在，小概率问题。</li></ol><h3 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿"><span>缓存击穿</span></a></h3><p>一个key设置了有效时间，可是突然在他快失效的时间附近，发生了大量的请求，因为key失效了，所有的请求都到了关系型数据库上。</p><p>解决方法：对过期的key加锁，限制并发，通过第一个进来的请求，将结果放回缓存中。</p><p>单机环境可以使用lock锁，synchronized锁</p><p>分布式使用：分布式锁，基于数据库，基于Redis或者zookeeper的分布式锁</p><h3 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩"><span>缓存雪崩</span></a></h3><p>在某个时间段内，缓存集中失效，这个时候有大量的请求，查询数据大，所有的请求都会到数据库层，引起数据库的宕机</p><p>解决方法：</p><ol><li>数据预热，在正式部署前，把可能访问的数据先访问一遍，存到缓存中</li><li>均匀设置缓存失效时间</li></ol><h2 id="redis远程客户端" tabindex="-1"><a class="header-anchor" href="#redis远程客户端"><span>redis远程客户端</span></a></h2><p>官网地址：https://redisdesktop.com/</p><p>连接Linux的Reids之前需要修改Redis服务器的配置信息。 Redis服务器有安全保护措施，默认只有本机（安装Redis的那台机器）能够访问。配置信息存放在Redis安装目录下的redis.conf文件。修改此文件的两个设置。远程连接redis需要修改redis主目录下的redis.conf配置文件：</p><ol><li>bind ip 绑定ip此行注释</li><li>protected-mode yes 保护模式改为 no</li></ol><p>修改配置文件后，需要使用配置文件重新启动 Reids，默认不加载配置文件。先关闭已经启动的 Redis ，再次启动</p><h2 id="redis-benchmark" tabindex="-1"><a class="header-anchor" href="#redis-benchmark"><span>redis-benchmark</span></a></h2><p>redis测试</p><figure><img src="http://47.101.155.205/image-20220527180841725.png" alt="image-20220527180841725" tabindex="0" loading="lazy"><figcaption>image-20220527180841725</figcaption></figure><figure><img src="http://47.101.155.205/image-20220527180943158.png" alt="image-20220527180943158" tabindex="0" loading="lazy"><figcaption>image-20220527180943158</figcaption></figure><figure><img src="http://47.101.155.205/image-20220527181101712.png" alt="image-20220527181101712" tabindex="0" loading="lazy"><figcaption>image-20220527181101712</figcaption></figure><h2 id="reids编程客户端" tabindex="-1"><a class="header-anchor" href="#reids编程客户端"><span>reids编程客户端</span></a></h2><ul><li>Jedis</li></ul><p>redis 的 Java 编程客户端，Redis 官方首选推荐使用 Jedis，jedis 是一个很小但很健全的redis 的 java 客户端。通过 Jedis 可以像使用 Redis 命令行一样使用 Redis。</p><ul><li>jedis 完全兼容 redis 2.8.x and 3.x.x</li><li>Jedis 源码：https://github.com/xetorthio/jedis</li><li>api 文档：http://xetorthio.github.io/jedis/</li></ul><p>C 、C++ 、C# 、Erlang、Lua 、Objective-C、Perl 、PHP 、Python 、Ruby、Scala 、Go等 40 多种语言都有连接 redis 的编程客户端</p><h2 id="阿里云远程服务器安装redis" tabindex="-1"><a class="header-anchor" href="#阿里云远程服务器安装redis"><span>阿里云远程服务器安装redis</span></a></h2><ol><li>redis官网下载linux安装包。</li><li>将redis的tar.gz的压缩包上传至远程服务器的/opt目录下。</li><li>执行tar -zxvf 安装包全名称。</li><li>查看系统是否安装gcc编译器。没有安装直接yum -y install gcc安装gcc编译器。</li><li>进入解压的文件，执行make命令，等待出现：Leaving directory &#39;/opt/redis-6.0.6/src即安装成功。</li><li>执行make install，将redis的命令安装至/usr/local/bin/中。</li><li>redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-sentinel redis-server。/usr/local/bin/下出现了上面的。</li></ol><div class="language-tex" data-highlighter="prismjs" data-ext="tex" data-title="tex"><pre><code><span class="line">106.15.234.93//公网ip</span>
<span class="line">172.20.30.249//私网ip</span>
<span class="line"></span></code></pre></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> /opt</span>
<span class="line"><span class="token function">wget</span> http://download.redis.io/releases/redis-6.0.8.tar.gz</span>
<span class="line"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> redis-6.0.8.tar.gz</span>
<span class="line"><span class="token builtin class-name">cd</span> redis-6.0.8</span>
<span class="line"><span class="token function">make</span></span>
<span class="line"><span class="token comment">#gcc版本过低，导致安装失败并没有出现redis-server的命令升级gcc之后再次make就可以了</span></span>
<span class="line"><span class="token function">make</span> <span class="token function">install</span> <span class="token comment">#再次cd /usr/local/bin目录中出现了需要的命令</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="lua" tabindex="-1"><a class="header-anchor" href="#lua"><span>lua</span></a></h2><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 不设置条件会导致一直加锁失败</span></span>
<span class="line"><span class="token builtin class-name">eval</span> <span class="token string">&quot;if redis.call(&#39;setnx&#39;,KEYS[1],ARGV[1]) == 1 then redis.call(&#39;expire&#39;,KEYS[1],ARGV[2]) return 1 else return 0 end;&quot;</span> <span class="token number">1</span> k1 v1 <span class="token number">30</span></span>
<span class="line"></span></code></pre></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">该项目为公司的一套电商产品，主打的拍卖模式有竞购、秒拍、普通拍、盲拍。采用微服务架构开发，主要服务有商品服务、支付服务、登录服务、拍卖服务、物流服务、积分服务、优惠券服务，通过邀请机制实现用户裂变，用户和代理可以通过邀请用户获取红包，以及用户的后续购物都会涉及到分层返利计算。</span>
<span class="line"></span></code></pre></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 使用redis.call()或redis.pcall()来执行redis命令</span></span>
<span class="line"><span class="token builtin class-name">eval</span> <span class="token string">&quot;return redis.call(&#39;set&#39;, KEYS[1], ARGV[1])&quot;</span> <span class="token number">1</span> key k1</span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">eval</span> <span class="token string">&quot;return redis.call(&#39;del&#39;, KEYS[1])&quot;</span> <span class="token number">1</span> key</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 少传参数报错不同</span></span>
<span class="line"><span class="token builtin class-name">eval</span> <span class="token string">&quot;return redis.pcall(&#39;set&#39;, KEYS[1], ARGV[1])&quot;</span> <span class="token number">1</span> key k1</span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">eval</span> <span class="token string">&quot;return redis.pcall(&#39;del&#39;, KEYS[1])&quot;</span> <span class="token number">1</span> key</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20240201134830271.png" alt="image-20240201134830271" tabindex="0" loading="lazy"><figcaption>image-20240201134830271</figcaption></figure><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token keyword">false</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line">    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;set&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">true</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- redis分布式原子锁</span></span>
<span class="line"><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token keyword">false</span> <span class="token keyword">else</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;set&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">true</span> <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 可视化界面成功返回的是1,失败是nil</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token keyword">else</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;set&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 使用exists retrun 1/0(不存在) </span></span>
<span class="line"><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;exists&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token keyword">else</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;set&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 使用exists retrun true/false(不存在) </span></span>
<span class="line"><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;exists&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token keyword">false</span> <span class="token keyword">else</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;set&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">true</span> <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">eval</span> <span class="token string">&quot;if redis.call(&#39;exists&#39;, KEYS[1]) == &#39;1&#39; then return false else redis.call(&#39;set&#39;, KEYS[1], ARGV[1], &#39;EX&#39;, ARGV[2]) return true end&quot;</span> <span class="token number">1</span> key value <span class="token number">30</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点"><span>注意点</span></a></h2><p>1.配置文件</p><p>2.序列化</p><p>3.lua脚本设置返回值</p><p>4.key的类型</p><p>5.序列化的类需要有无参构造方法</p>`,357)]))}const o=n(l,[["render",t],["__file","Redis.html.vue"]]),r=JSON.parse('{"path":"/linux/Redis.html","title":"Redis","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"什么是Redis","slug":"什么是redis","link":"#什么是redis","children":[{"level":3,"title":"Windows安装Redis","slug":"windows安装redis","link":"#windows安装redis","children":[]},{"level":3,"title":"数据库应用演变历程","slug":"数据库应用演变历程","link":"#数据库应用演变历程","children":[]},{"level":3,"title":"什么是NoSQL","slug":"什么是nosql","link":"#什么是nosql","children":[]},{"level":3,"title":"为什么使用NoSQL","slug":"为什么使用nosql","link":"#为什么使用nosql","children":[]},{"level":3,"title":"NoSQL的优点","slug":"nosql的优点","link":"#nosql的优点","children":[]},{"level":3,"title":"NoSQL的缺点","slug":"nosql的缺点","link":"#nosql的缺点","children":[]},{"level":3,"title":"3V和3高","slug":"_3v和3高","link":"#_3v和3高","children":[]}]},{"level":2,"title":"安装Redis","slug":"安装redis","link":"#安装redis","children":[]},{"level":2,"title":"启动测试","slug":"启动测试","link":"#启动测试","children":[]},{"level":2,"title":"redis基本命令学习","slug":"redis基本命令学习","link":"#redis基本命令学习","children":[]},{"level":2,"title":"redis线程说明","slug":"redis线程说明","link":"#redis线程说明","children":[]},{"level":2,"title":"redis的key的操作命令","slug":"redis的key的操作命令","link":"#redis的key的操作命令","children":[]},{"level":2,"title":"redis数据类型","slug":"redis数据类型","link":"#redis数据类型","children":[{"level":3,"title":"五大数据类型","slug":"五大数据类型","link":"#五大数据类型","children":[]},{"level":3,"title":"特殊数据类型","slug":"特殊数据类型","link":"#特殊数据类型","children":[]}]},{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[{"level":3,"title":"watch","slug":"watch","link":"#watch","children":[]},{"level":3,"title":"unwatch","slug":"unwatch","link":"#unwatch","children":[]}]},{"level":2,"title":"Jedis","slug":"jedis","link":"#jedis","children":[]},{"level":2,"title":"SpringBoot整合redis","slug":"springboot整合redis","link":"#springboot整合redis","children":[{"level":3,"title":"自定义RedisTemplate","slug":"自定义redistemplate","link":"#自定义redistemplate","children":[]}]},{"level":2,"title":"Redis.conf配置文件","slug":"redis-conf配置文件","link":"#redis-conf配置文件","children":[]},{"level":2,"title":"持久化","slug":"持久化","link":"#持久化","children":[{"level":3,"title":"RDB","slug":"rdb","link":"#rdb","children":[]},{"level":3,"title":"AOF","slug":"aof","link":"#aof","children":[]}]},{"level":2,"title":"过期策略","slug":"过期策略","link":"#过期策略","children":[]},{"level":2,"title":"订阅通知","slug":"订阅通知","link":"#订阅通知","children":[]},{"level":2,"title":"Redis主从复制","slug":"redis主从复制","link":"#redis主从复制","children":[{"level":3,"title":"通过命令建立主从关系","slug":"通过命令建立主从关系","link":"#通过命令建立主从关系","children":[]},{"level":3,"title":"复制原理","slug":"复制原理","link":"#复制原理","children":[]},{"level":3,"title":"高可用性哨兵模式","slug":"高可用性哨兵模式","link":"#高可用性哨兵模式","children":[]},{"level":3,"title":"sentinel.conf配置文件","slug":"sentinel-conf配置文件","link":"#sentinel-conf配置文件","children":[]}]},{"level":2,"title":"安全设置","slug":"安全设置","link":"#安全设置","children":[]},{"level":2,"title":"Redis缓存穿透和雪崩","slug":"redis缓存穿透和雪崩","link":"#redis缓存穿透和雪崩","children":[{"level":3,"title":"Redis客户端缓存","slug":"redis客户端缓存","link":"#redis客户端缓存","children":[]},{"level":3,"title":"Redis缓存穿透","slug":"redis缓存穿透","link":"#redis缓存穿透","children":[]},{"level":3,"title":"缓存击穿","slug":"缓存击穿","link":"#缓存击穿","children":[]},{"level":3,"title":"缓存雪崩","slug":"缓存雪崩","link":"#缓存雪崩","children":[]}]},{"level":2,"title":"redis远程客户端","slug":"redis远程客户端","link":"#redis远程客户端","children":[]},{"level":2,"title":"redis-benchmark","slug":"redis-benchmark","link":"#redis-benchmark","children":[]},{"level":2,"title":"reids编程客户端","slug":"reids编程客户端","link":"#reids编程客户端","children":[]},{"level":2,"title":"阿里云远程服务器安装redis","slug":"阿里云远程服务器安装redis","link":"#阿里云远程服务器安装redis","children":[]},{"level":2,"title":"lua","slug":"lua","link":"#lua","children":[]},{"level":2,"title":"注意点","slug":"注意点","link":"#注意点","children":[]}],"git":{"updatedTime":1744205736000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":1,"url":"https://github.com/oycm"}]},"filePathRelative":"linux/Redis.md"}');export{o as comp,r as data};
