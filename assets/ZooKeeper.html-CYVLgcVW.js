import{_ as o,c as n,e as a,o as i}from"./app-DO9Fsueg.js";const l={};function r(s,e){return i(),n("div",null,e[0]||(e[0]=[a(`<h1 id="zookeeper" tabindex="-1"><a class="header-anchor" href="#zookeeper"><span>ZooKeeper</span></a></h1><p><a href="https://zookeeper.apache.org/" target="_blank" rel="noopener noreferrer">ZooKeeper官网</a></p><p><a href="https://zookeeper.apache.org/doc/current/index.html" target="_blank" rel="noopener noreferrer">ZooKeeper官网文档</a></p><p><a href="https://zookeeper.apache.org/releases.html" target="_blank" rel="noopener noreferrer">ZooKeeper下载地址</a></p><p>ZooKeeper是中心服务，用于维护配置信息、命名、提供分布式同步、提供组服务。</p><h2 id="zookeeper介绍" tabindex="-1"><a class="header-anchor" href="#zookeeper介绍"><span>ZooKeeper介绍</span></a></h2><p>ZooKeeper：用于分布式应用程序的分布式协调服务。它公开了一组简单的<strong>基元</strong>，分布式应用程序可以基于这些基元进行构建，以实现更高级别的同步、配置维护以及组和命名服务。使用<strong>文件系统目录树</strong>结构为数据模型。</p><p><strong>设计</strong>：ZooKeeper允许分布式进程通过共享的分层命名空间（类似于标准文件系统）相互协调。命名空间由数据寄存器(Data Registers)（在ZooKeeper中称为znodes）组成，在ZooKeeper中，数据寄存器类似于文件和目录。与为存储而设计的典型文件系统不同，ZooKeeper数据保存在内存中，可以实现高吞吐量和低延迟。ZooKeeper实现非常重视<strong>高性能</strong>、<strong>高可用</strong>、<strong>严格顺序访问</strong>。可以在大型分布式系统使用；可以用来做分布式锁。</p><p>组成ZooKeeper集群的ZooKeeper服务之间需要彼此了解。客户端连接到单个的ZooKeeper服务器。客户端维持一个TCP连接，通过该连接发送请求、获取响应、获取监听事件以及发送心跳检测。如果与服务器的TCP连接断开，客户端会参试连接到其它服务器。</p><figure><img src="http://47.101.155.205/image-20250619171458573.png" alt="image-20250619171458573" tabindex="0" loading="lazy"><figcaption>image-20250619171458573</figcaption></figure><p><strong>分层命名空间数据模型</strong>：名称是由斜杠<code>/</code>分隔的路径元素序列。ZooKeeper命名空间中的每个节点都有一个路径标识。</p><figure><img src="http://47.101.155.205/image-20250620172356828.png" alt="image-20250620172356828" tabindex="0" loading="lazy"><figcaption>image-20250620172356828</figcaption></figure><p><strong>节点和临时节点</strong>：与标准文件系统不同，ZooKeeper命名空间的每个节点可以具有和其关联的数据的子节点，子节点旨在存储协调数据：状态信息、配置、位置信息等。这个就是<code>znode</code>。znodes维护stat结构，其中包括数据更改、ACL(Access Control List)更改和时间戳的版本号，以允许缓存验证和协调更新。每次znode数据发生变化时，版本号都会增加。命名空间中的znode的数据都是原子读取和写入的。每个节点有个ACL(访问控制列表)，用于限制谁可以执行哪些操作。ZooKeeper还有临时节点的概念，只要创建znode的会话活动，znode就存在。会话结束时，znode被删除。</p><p><strong>条件更新和监控</strong>：客户端可以在znode上设置监控，当znode发生变化时，将触发一个watch，客户端会受到znode更改的数据包。当客户端和其中一个ZooKeeper服务器端口连接，客户端将受到本地通知。<strong>3.6新功能</strong>：客户端可以在znode上设置永久的递归监控，这些监控出发时不会被删除，并且会以递归的方式触发已注册的znode以及任何子节点的更改。</p><p><strong>服务保证</strong>：</p><ul><li>顺序一致性：来自客户端的更新将按顺序应用。</li><li>原子性：要么成功要么失败。</li><li>单个系统镜像：不管客户端连接哪个服务端，都见看到相同的视图。</li><li>可靠性：数据更新后，将从改时间一直存在，直到客户端更新。</li><li>及时性：系统客户端视图在特定时间保证是最新的。</li></ul><p><strong>简单的API</strong>：ZooKeeper服务端设计提供了简单的API</p><ul><li>创建(create)：在树中某个位置创建node</li><li>删除(delete)：删除某个node</li><li>校验是否存在(exists)：校验某个位置是否存在node</li><li>读取(get node)：读取这个node的数据</li><li>写入(set node)：往node写入数据</li><li>读取子节点(get children)：查找这个node的子节点</li><li>同步(sync)：等待数据传播</li></ul><p><strong>高可用数据读写实现</strong>：</p><figure><img src="http://47.101.155.205/image-20250622210635620.png" alt="image-20250620172356828" tabindex="0" loading="lazy"><figcaption>image-20250620172356828</figcaption></figure><p>复制数据库(Replicated Database)包含整个数据树的内存数据库。在更新操作应用内存数据库之前，更新日志被序列化记录到磁盘以实现可恢复性。</p><p>每个ZooKeeper服务端都可以为客户端提供服务。客户端只连接一个服务提交请求。读取请求从服务器数据库的本地副本获取数据。更改服务状态的请求有一致性协议(agreement protocol)处理。</p><p>一致性协议：来自客户端的所有请求都会被转发到单个服务器，称为<code>leader</code>；其余的ZooKeeper服务器被称为<code>followers</code>，接收来自leader的消息建议并就消息传递达成一致。消息传递层负责替换失败的leader，并见followers和leader同步。</p><p>ZooKeeper使用自定义的原子消息传递协议。由于消息收发层是原子的，因此ZooKeeper可以保证本地副本永远不会有分歧(diverge)。当leader受到写请求时，它计算要应用写请求时系统的状态，并将其转换为捕获此新状态的事务。</p><h2 id="zookeeper使用入门" tabindex="-1"><a class="header-anchor" href="#zookeeper使用入门"><span>ZooKeeper使用入门</span></a></h2><p>ZooKeeper部署服务器建议：双核处理器、2GB内存、80GB硬盘内存。</p><h3 id="单机启动" tabindex="-1"><a class="header-anchor" href="#单机启动"><span>单机启动</span></a></h3><p><strong>配置文件conf/zoo.cfg(默认配置文件名称)</strong>：</p><div class="language-conf" data-highlighter="prismjs" data-ext="conf" data-title="conf"><pre><code><span class="line">tickTime=2000</span>
<span class="line">dataDir=/var/lib/zookeeper</span>
<span class="line">clientPort=2181</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>启动命令</strong>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 解压缩包，将apache-zookeeper-3.8.4-bin 修改为 apache-zookeeper-3.8.4</span></span>
<span class="line"><span class="token function">tar</span> <span class="token parameter variable">-zxf</span> apache-zookeeper-3.8.4-bin.tar.gz <span class="token parameter variable">--transform</span> <span class="token string">&#39;s/apache-zookeeper-3.8.4-bin/apache-zookeeper-3.8.4/&#39;</span></span>
<span class="line"></span>
<span class="line">bin/zkServer.sh start</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250625150201074.png" alt="image-20250625150201074" tabindex="0" loading="lazy"><figcaption>image-20250625150201074</figcaption></figure><p><strong>启动携带了jmx相关参数，但是没有指定端口，无法远程连接。</strong></p><figure><img src="http://47.101.155.205/image-20250625165756102.png" alt="image-20250625165756102" tabindex="0" loading="lazy"><figcaption>image-20250625165756102</figcaption></figure><p><strong>暴露JMX端口</strong>：修改<code>zkEnv.sh</code>文件，在命令中添加<code>export JMXPORT=&quot;port&quot;</code>配置JMX暴露端口。</p><figure><img src="http://47.101.155.205/image-20250625172326029.png" alt="image-20250625172326029" tabindex="0" loading="lazy"><figcaption>image-20250625172326029</figcaption></figure><h3 id="客户端命令" tabindex="-1"><a class="header-anchor" href="#客户端命令"><span>客户端命令</span></a></h3><p><a href="https://zookeeper.apache.org/doc/current/zookeeperCLI.html" target="_blank" rel="noopener noreferrer">CLI文档</a></p><p><strong>命令行连接操作：</strong></p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">bin/zkCli.sh <span class="token parameter variable">-server</span> <span class="token number">127.0</span>.0.1:2181</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250625150739437.png" alt="image-20250625150739437" tabindex="0" loading="lazy"><figcaption>image-20250625150739437</figcaption></figure><p><strong>help</strong>：查询可用命令及说明。</p><figure><img src="http://47.101.155.205/image-20250625151144699.png" alt="image-20250625151144699" tabindex="0" loading="lazy"><figcaption>image-20250625151144699</figcaption></figure><ul><li>create path [data]：<code>create /zk_oycm ouyangcm</code>创建名为zk_oycm的znode并和数据相关联。</li><li>ls path：查询znode(目录)的子节点。</li><li>get -s path：查询znode关联的数据，<code>-s</code>。</li><li>set path data：修改znode关联的数据。</li><li>delete path：删除znode节点。</li><li></li></ul><h3 id="集群启动" tabindex="-1"><a class="header-anchor" href="#集群启动"><span>集群启动</span></a></h3><p>集群部署建议使用<strong>奇数</strong>台服务器，最少3台服务器。</p><p><strong>如果三台ZooKeeper服务器，它们的网线都插入了同一个网络交换机，那么交换机的故障将导致整个集群瘫痪。</strong></p><p><strong>conf目录下创建配置文件zoo.cfg：</strong></p><div class="language-conf line-numbers-mode" data-highlighter="prismjs" data-ext="conf" data-title="conf"><pre><code><span class="line">tickTime=2000</span>
<span class="line">initLimit=10</span>
<span class="line">syncLimit=5</span>
<span class="line">dataDir=/opt/zookeeper/data</span>
<span class="line">clientPort=2181</span>
<span class="line"></span>
<span class="line"># 集群节点配置（所有节点配置相同）</span>
<span class="line">server.1=node1:2888:3888</span>
<span class="line">server.2=node2:2888:3888</span>
<span class="line">server.3=node3:2888:3888</span>
<span class="line"># node1 node2 node3需在 /etc/hosts 中配置或使用DNS解析</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>每个服务器创建内容唯一的myid文件</strong></p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">node1 <span class="token number">1</span></span>
<span class="line">node2 <span class="token number">2</span></span>
<span class="line">node3 <span class="token number">3</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>启动命令：</strong></p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">bin/zkServer.sh</span>
<span class="line"></span>
<span class="line"><span class="token function">java</span> <span class="token parameter variable">-cp</span> zookeeper.jar:lib/*:conf org.apache.zookeeper.server.quorum.QuorumPeerMain zoo.conf</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="管理zookeeper" tabindex="-1"><a class="header-anchor" href="#管理zookeeper"><span>管理ZooKeeper</span></a></h2><p>ZooKeeper的可靠性取决于两个假设：</p><ol><li>部署中的服务器只有少数会失败。失败的意思是计算机崩溃，网络中的某些错误将服务器与大多服务器断开连接。</li><li>部署的计算机正常运行。系统时间、存储和网络一起正常运行。</li></ol><p><strong>N个服务的ZooKeeper集群，如果N是奇数，集群能够容忍最多N/2服务故障，而不会丢失任何数据；如果N是偶数，集群能够容忍最多(N/2 -1)服务故障而不会数据丢失，并防止“大脑分裂”问题。</strong></p><p>JVM启动参数：发生<code>OutOfMemoryError</code>错误，停止程序并生成堆转储文件。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># Linux</span></span>
<span class="line"><span class="token parameter variable">-XX:+HeapDumpOnOutOfMemoryError</span> <span class="token parameter variable">-XX:OnOutOfMemoryError</span><span class="token operator">=</span><span class="token string">&#39;kill -9 %p&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Windows</span></span>
<span class="line"><span class="token string">&quot;-XX:+HeapDumpOnOutOfMemoryError&quot;</span> <span class="token string">&quot;-XX:OnOutOfMemoryError=cmd /c taskkill /pid %%%%p /t /f&quot;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="维护" tabindex="-1"><a class="header-anchor" href="#维护"><span>维护</span></a></h3><p><strong>ZooKeeper的数据目录存储快照和事务日志。当对znode进行修改时，修改将追加到事务日志。当日志变大时，所有znodes的当前状态的快照会写入到文件，并为未来的事务创建一个新的事务日志文件。在快照期间，事务继续追加操作到旧的日志文件中。因此，一些比快照更新更快的事务记录会在上一个快照的最后一个事务日志文件中找到。</strong></p><p>使用默认配置时，ZooKeeper服务器不会删除旧的快照和日志文件。</p><p><a href="https://zookeeper.apache.org/doc/current/zookeeperTools.html" target="_blank" rel="noopener noreferrer">ZooKeeper命令介绍文档</a></p><p><strong>故障排查：</strong></p><p><code>A server might not be able to read its database and fail to come up because of some file corruption in the transaction logs of the ZooKeeper server.</code>因为ZooKeeper服务的事务日志文件损坏，服务可能无法读取数据库并无法启动。在加载时会看见ZooKeeper数据库时会看见IOException。在这种情况下，确保集群中的其它服务器启动并运行正常。可以在命令行用<code>stat</code>检测状态，在验证其它服务器已启动时，可以继续清理损坏的数据库文件。删除<code>datadir/version-2</code>和<code>datalogdir/version-2/</code>中的所有文件，并重启。</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><h4 id="最低配置" tabindex="-1"><a class="header-anchor" href="#最低配置"><span>最低配置</span></a></h4><ul><li><p>clientPort：监听客户端的端口。</p></li><li><p>secureClientPort：SSL连接指定端口。</p></li><li><p>observerMasterPort：监听观察者的端口。</p></li><li><p>dataDir：ZooKeeper存储内存中数据的数据库快照位置，除非有指定，否则也存储事务更新记录日志。</p></li><li><p>tickTime：单位毫秒，ZooKeeper使用的基本时间单位。心跳检测时间，最小会话超时时间是tickTime的两倍。</p></li><li><p>autopurge.snapRetainCount：</p></li><li><p>autopurge.purgeInterval：</p></li></ul><h4 id="高级配置" tabindex="-1"><a class="header-anchor" href="#高级配置"><span>高级配置</span></a></h4><p>可选的配置，用来微调ZooKeeper服务器行为。有些可以使用Java系统属性配置，通常采用<code>zookeeper.keyword</code>形式配置。</p><ul><li>dataLogDir：无Java系统属性。指定事务日志写入的位置。这允许使用专用日志设备，并有助于避免日志记录和快照之间的竞争。</li><li>globalOutstandingLimit：<code>zookeeper.globalOutstandingLimit</code>。客户端提交请求的速度比<code>ZooKeeper</code>处理请求的速度要快，尤其是在客户端很多的情况下。为了防止ZooKeeper因排队请求而耗尽内存，ZooKeeper将限制客户端，以便整个集合中不超过<code>globalOutstandingLimit</code>未完成的请求，平均分配。默认限制为1000，例如，如果有<code>3</code>个成员，每个成员将有<code>1000 / 2 = 500</code>个单独的限制。</li><li>preAllocSize：<code>zookeeper.preAllocSize</code>。为避免查找，ZooKeeper 在事务日志文件中以 preAllocSize KB 的块分配空间。默认块大小为 64M。更改块大小的一个原因是，如果更频繁地拍摄快照，则可以减小块大小。</li><li>snapCount：<code>zookeeper.snapCount</code>。为了防止集群中中的所有服务器同时拍摄快照，当事务日志中的事务数达到运行时生成的[snapCount/2+1， snapCount]范围内的随机值时，每个ZooKeeper服务器都将拍摄快照。默认 snapCount 为 100,000。</li><li>commitLogCount：<code>zookeeper.commitLogCount</code>。Zookeeper内存中维护的最后提交请求的列表，以便在<code>Follower</code>不太落后时与<code>Follower</code>快速同步。这可以提高快照较大 (&gt;100,000)时的同步性能。默认值为500，这是建议的最小值。</li><li>snapSizeLimitInKb：<code>zookeeper.snapSizeLimitInKb</code>。ZooKeeper使用快照和事务日志（考虑预写日志）记录其事务。在拍摄快照（并滚动事务日志）之前，事务日志中记录的事务集允许的总字节大小由snapSize决定。为了防止仲裁中的所有机器同时进行快照，当事务日志中的事务集的字节大小达到运行时生成的[snapSize/2+1， snapSize]范围内的随机值时，每个ZooKeeper服务器都会进行快照。每个文件系统都有一个最小标准文件大小，为了有效地发挥该特性的作用，所选的文件大小必须大于该值。默认snapSizeLimitInKb为4,194,304 (4GB)。非正值将禁用该特性。</li><li>txnLogSizeLimitInKb：<code>zookeeper.txnLogSizeLimitInKb</code>。Zookeeper事务日志文件也可以使用txnLogSizeLimitInKb更直接地控制。当使用事务日志完成同步时，较大的txn日志可能导致较慢的跟随者同步。这是因为leader必须扫描磁盘上相应的日志文件，以找到要开始同步的事务。该特性在默认情况下是关闭的，snapCount和snapSizeLimitInKb是限制事务日志大小的仅有的值。启用后，Zookeeper将在达到任何限制时滚动日志。请注意，实际日志大小可能超过此值的序列化事务大小。另一方面，如果这个值设置得太接近（或小于）preAllocSize，它可能会导致Zookeeper滚动每个事务的日志。虽然这不是正确性问题，但这可能会导致性能严重下降。为了避免这种情况并充分利用该特性，建议将该值设置为<code>N*preAllocSize1</code>，其中<code>N&gt;2</code>。</li><li>maxCnxns：<code>zookeeper.maxCnxns</code>。限制zookeeper服务器的并发连接总数（每个服务器的每个客户端端口）。默认值为0，将其设置为0将完全取消对并发连接总数的限制。<code>serverCnxnFactory</code>和<code>secureServerCnxnFactory</code>的连接数是分开计算的，因此一个对等体最多可以托管<code>2*maxCnxns</code>，只要它们是适当的类型。</li><li>maxClientCnxns：限制单个客户端（通过IP地址标识）对ZooKeeper集合中单个成员的并发连接数（在Socket级别）。这是用来防止某些类型的DoS攻击，包括文件描述符耗尽。默认值为60。将其设置为0完全取消了对并发连接的限制。</li><li>clientPortAddress(3.3.0)：监听客户端连接的地址（ipv4、ipv6或hostname）。这是可选的，默认情况下，服务器上任何<code>address/interface/nic</code>到clientPort的连接都将被接受。</li><li>minSessionTimeout(3.3.0)：ZooKeeper服务端允许客户端协商的最小会话超时（单位毫秒）。默认为tickTime的2倍。</li><li>maxSessionTimeout(3.3.0)：ZooKeeper服务端允许客户端协商的最大会话超时（单位毫秒）。默认为tickTime的20倍。</li><li>fsync.warningthresholdms(3.3.4)：<code>zookeeper.fsync.warningthresholdms</code>。只要事务日志中的<code>fsync</code>花费的时间超过这个值，就会向日志输出一条警告消息。单位毫秒，默认值为1000。此值只能设置为系统属性。</li><li>maxResponseCacheSize：<code>zookeeper.maxResponseCacheSize</code>。当设置为正整数时，它决定存储最近读取记录的序列化形式的缓存的大小。有助于节省流行的znode上的序列化成本。指标<code>response_packet_cache_hits</code>和<code>response_packet_cache_misses</code>可用于将此值调优到给定的工作负载。默认情况下开启该功能，值为400，设置为0或负整数以关闭该功能。</li><li>maxGetChildrenResponseCacheSize(3.6.0)：<code>zookeeper.maxGetChildrenResponseCacheSize</code>。类似于<code>maxResponseCacheSize</code>，但适用于获取子请求。指标<code>response_packet_get_children_cache_hits</code>和<code>response_packet_get_children_cache_misses</code>可用于将此值调整到给定的工作负载。默认情况下开启该功能，值为400，设置为0或负整数以关闭该功能。</li><li>autopurge.snapRetainCount(3.4.0)：</li><li>autopurge.purgeInterval(3.4.0)：</li><li>syncEnabled(3.5.4, 3.6.0)：<code>zookeeper.observer.syncEnabled</code>。</li><li>extendedTypesEnabled(3.5.4, 3.6.0)：<code>zookeeper.extendedTypesEnabled</code>。</li><li>emulate353TTLNodes(3.5.4, 3.6.0)：<code>zookeeper.emulate353TTLNodes</code>。</li><li>watchManagerName(3.6.0)：<code>zookeeper.watchManagerName</code>。</li><li>watcherCleanThreadsNum(3.6.0)：<code>zookeeper.watcherCleanThreadsNum</code>。</li><li>watcherCleanThreshold(3.6.0)：<code>zookeeper.watcherCleanThreshold</code>。</li><li>watcherCleanIntervalInSeconds(3.6.0)：<code>zookeeper.watcherCleanIntervalInSeconds</code>。</li><li>maxInProcessingDeadWatchers(3.6.0)：<code>zookeeper.maxInProcessingDeadWatchers</code>。</li><li>bitHashCacheSize(3.6.0)：zookeeper.bitHashCacheSize。</li><li>fastleader.minNotificationInterval：<code>zookeeper.fastleader.minNotificationInterval</code>。</li><li>fastleader.maxNotificationInterval：<code>zookeeper.fastleader.maxNotificationInterval</code>。</li><li>connectionMaxTokens(3.6.0)：<code>zookeeper.connection_throttle_tokens</code>。</li><li>connectionTokenFillTime(3.6.0)：<code>zookeeper.connection_throttle_fill_time</code>。</li><li>connectionTokenFillCount(3.6.0)：<code>zookeeper.connection_throttle_fill_count</code>。</li><li>connectionFreezeTime(3.6.0)：<code>zookeeper.connection_throttle_freeze_time</code>。</li><li>connectionDropIncrease(3.6.0)：<code>zookeeper.connection_throttle_drop_increase</code>。</li><li>connectionDropDecrease(3.6.0)：<code>zookeeper.connection_throttle_drop_decrease</code>。</li><li>connectionDecreaseRatio(3.6.0)：<code>zookeeper.connection_throttle_decrease_ratio</code>。</li><li>zookeeper.connection_throttle_weight_enabled(3.6.0)：。</li><li>zookeeper.connection_throttle_global_session_weight(3.6.0)：。</li><li>zookeeper.connection_throttle_local_session_weight(3.6.0)：。</li><li>zookeeper.connection_throttle_renew_session_weight(3.6.0)：。</li><li>clientPortListenBacklog：</li><li>serverCnxnFactory：<code>zookeeper.serverCnxnFactory</code>。指定<code>ServerCnxnFactory</code>实现。为了使用基于TLS的服务器通信，应该将其设置为<code>NettyServerCnxnFactory</code>。默认为<code>NIOServerCnxnFactory</code>。</li><li>flushDelay：<code>zookeeper.flushDelay</code>。</li><li>maxWriteQueuePollTime：<code>zookeeper.maxWriteQueuePollTime</code>。</li><li>maxBatchSize：<code>zookeeper.maxBatchSize</code>。</li><li>enforceQuota(3.7.0)：<code>zookeeper.enforceQuota</code>。</li><li>requestThrottleLimit：<code>zookeeper.request_throttle_max_requests</code>。</li><li>requestThrottleStallTime：<code>zookeeper.request_throttle_stall_time</code>。</li><li>requestThrottleDropStale：<code>request_throttle_drop_stale</code>。</li><li>requestStaleLatencyCheck：<code>zookeeper.request_stale_latency_check</code>。</li><li>requestStaleConnectionCheck：<code>zookeeper.request_stale_connection_check</code>。</li><li>zookeeper.request_throttler.shutdownTimeout：。</li><li>advancedFlowControlEnabled：<code>zookeeper.netty.advancedFlowControl.enabled</code>。</li><li>enableEagerACLCheck：<code>zookeeper.enableEagerACLCheck</code>。</li><li>maxConcurrentSnapSyncs：<code>zookeeper.leader.maxConcurrentSnapSyncs</code>。</li><li>maxConcurrentDiffSyncs：<code>zookeeper.leader.maxConcurrentDiffSyncs</code>。</li><li>digest.enabled：<code>zookeeper.digest.enabled</code>。</li><li>snapshot.compression：<code>zookeeper.snapshot.compression.method</code>。</li><li>snapshot.trust.empty：<code>zookeeper.snapshot.trust.empty</code>。</li><li>audit.enable：<code>zookeeper.audit.enable</code>。</li><li>audit.impl.class：<code>zookeeper.audit.impl.class</code>。</li><li>largeRequestMaxBytes：<code>zookeeper.largeRequestMaxBytes</code>。</li><li>largeRequestThreshold：<code>zookeeper.largeRequestThreshold</code>。</li><li>outstandingHandshake.limit ：<code>zookeeper.netty.server.outstandingHandshake.limit</code>。</li><li>netty.server.earlyDropSecureConnectionHandshakes：<code>zookeeper.netty.server.earlyDropSecureConnectionHandshakes</code>。</li><li>throttledOpWaitTime：<code>zookeeper.throttled_op_wait_time</code>。</li><li>learner.closeSocketAsync：<code>zookeeper.learner.closeSocketAsync</code>。</li><li>leader.closeSocketAsync：<code>zookeeper.leader.closeSocketAsync</code>。</li><li>learner.asyncSending：<code>zookeeper.learner.asyncSending</code>。</li><li>forward_learner_requests_to_commit_processor_disabled：<code>zookeeper.forward_learner_requests_to_commit_processor_disabled</code>。</li><li>serializeLastProcessedZxid.enabled：<code>zookeeper.serializeLastProcessedZxid.enabled</code>。</li><li></li></ul><h4 id="集群配置" tabindex="-1"><a class="header-anchor" href="#集群配置"><span>集群配置</span></a></h4><ul><li>electionAlg：</li><li>maxTimeToWaitForEpoch：<code>zookeeper.leader.maxTimeToWaitForEpoch</code>。</li><li>initLimit：Follower和Leader完成同步的最大时间，时间单位是tickTime。</li><li>connectToLearnerMasterLimit：<code>zookeeper.connectToLearnerMasterLimit</code>。</li><li>leaderServes：<code>zookeeper.leaderServes</code>。</li><li><code>server.x=[hostname]:port[:port]</code>：组成ZooKeeper集群的服务器。当服务器启动时，它通过在数据目录中查找文件<code>myid</code>来确定它是哪个服务器，它应该与server中的x匹配。客户端使用的ZooKeeper服务器列表必须与每个ZooKeeper服务器所拥有的ZooKeeper服务器列表匹配。有两个端口号。第一个是Followers用来连接Leader，第二个Followers用来选举Leader。如果想在一台机器上测试多个服务器，那么可以为每个服务器使用不同的端口。</li><li>syncLimit：Leader和Follower之间心跳检测或数据同步的最大延迟响应，时间单位是tickTime。</li><li><code>group.x=n1[:n2]</code>：启用分层仲裁结构。<code>x</code>是一个组标识符，<code>=</code>后面的数字对应于服务器标识符。</li><li><code>weight.x=n</code>：它与<code>group</code>一起使用，在形成quorum时为服务器分配权重。该值对应于投票时服务器的权重。ZooKeeper中有几个部分需要投票，比如leader选举和原子广播协议。缺省情况下，服务器的权重为1。如果配置定义了组，但没有定义权重，那么将为所有服务器分配值1。</li><li>cnxTimeout：<code>zookeeper.cnxTimeout</code>。设置领导人选举通知打开连接的超时值。仅适用于使用<code>electionAlg 3</code>的情况。默认5s。</li><li>quorumCnxnTimeoutMs：<code>zookeeper.quorumCnxnTimeoutMs</code>。</li><li>standaloneEnabled：</li><li>reconfigEnabled：</li><li>4lw.commands.whitelist：<code>zookeeper.4lw.commands.whitelist</code>。用户要使用的逗号分隔的四个字母单词命令的列表。默认情况下，白名单中只包含<code>zkServer.sh</code>使用的<code>srvr</code>命令。其余的四个字母的单词命令默认处于禁用状态。例如：<code>4lw.commands.whitelist=stat, ruok, conf, isro</code>、<code>4lw.commands.whitelist=*</code>。</li><li>tcpKeepAlive：<code>zookeeper.tcpKeepAlive</code>。</li><li>clientTcpKeepAlive：<code>zookeeper.clientTcpKeepAlive</code>。</li><li>electionPortBindRetry：<code>zookeeper.electionPortBindRetry</code>。</li><li>observer.reconnectDelayMs：<code>zookeeper.observer.reconnectDelayMs</code>。</li><li>observer.election.DelayMs：<code>zookeeper.observer.election.DelayMs </code>。</li><li>localSessionsEnabled和localSessionsUpgradingEnabled：</li></ul><h3 id="使用netty" tabindex="-1"><a class="header-anchor" href="#使用netty"><span>使用Netty</span></a></h3><p>在3.5+版本，通过将环境变量<code>zookeeper.serverCnxnFactory</code>设置为 <code>org.apache.zookeeper.server.NettyServerCnxnFactory</code>，ZooKeeper服务器可以使用Netty而不是NIO;对于客户端，将<code>zookeeper.clientCnxnSocket</code>设置为<code>org.apache.zookeeper.ClientCnxnSocketNetty</code>。</p><h3 id="命令" tabindex="-1"><a class="header-anchor" href="#命令"><span>命令</span></a></h3><h4 id="四个单词命令" tabindex="-1"><a class="header-anchor" href="#四个单词命令"><span>四个单词命令</span></a></h4><ul><li>conf：打印有关服务配置的详细信息。</li><li>cons：列出连接到此服务器的所有客户机的完整连接/会话详细信息。包括接收/发送的数据包数量、会话id、操作延迟、上次执行的操作等信息。</li><li>crst：重置所有连接的连接/会话统计信息。</li><li>dump：列出未完成的会话和临时节点。</li><li>envi：打印服务环境的详细信息。</li><li>ruok：测试服务器是否在非错误状态下运行。</li><li>srst：重置服务器统计信息。</li><li>srvr：列出服务器的全部详细信息。</li><li>stat：列出服务器和连接的客户端的简要详细信息。</li><li>wchs：列出服务器的监听的简要信息。</li><li>wchc：按会话列出服务器的监听的详细信息。这将输出带有相关监听（路径）的会话（连接）列表。注意，根据监听的数量，此操作可能代价昂贵（即影响服务器性能），请谨慎使用。</li><li>dirs：以字节为单位显示快照和日志文件的总大小。</li><li>wchp：按路径列出服务器的监听的详细信息。这将输出带有关联会话的路径<code>znodes</code>列表。注意，根据监听的数量，此操作可能代价昂贵（即影响服务器性能），请谨慎使用。</li><li>mntr：输出可用于监视集群运行状况的变量列表。</li><li>isro：测试服务器是否以只读模式运行。如果处于只读模式，服务器将使用<code>ro</code>响应，如果不是只读模式，则使用<code>rw</code>响应。</li><li>hash：返回与zxid关联的树摘要的最新历史。</li><li>gtmk：</li><li>stmk：</li><li></li></ul>`,78)]))}const c=o(l,[["render",r],["__file","ZooKeeper.html.vue"]]),p=JSON.parse('{"path":"/springcloud/ZooKeeper.html","title":"ZooKeeper","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"ZooKeeper介绍","slug":"zookeeper介绍","link":"#zookeeper介绍","children":[]},{"level":2,"title":"ZooKeeper使用入门","slug":"zookeeper使用入门","link":"#zookeeper使用入门","children":[{"level":3,"title":"单机启动","slug":"单机启动","link":"#单机启动","children":[]},{"level":3,"title":"客户端命令","slug":"客户端命令","link":"#客户端命令","children":[]},{"level":3,"title":"集群启动","slug":"集群启动","link":"#集群启动","children":[]}]},{"level":2,"title":"管理ZooKeeper","slug":"管理zookeeper","link":"#管理zookeeper","children":[{"level":3,"title":"维护","slug":"维护","link":"#维护","children":[]},{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":3,"title":"使用Netty","slug":"使用netty","link":"#使用netty","children":[]},{"level":3,"title":"命令","slug":"命令","link":"#命令","children":[]}]}],"git":{"updatedTime":1751694918000,"contributors":[{"name":"ouyangcm","username":"ouyangcm","email":"mingorg@163.com","commits":7,"url":"https://github.com/ouyangcm"},{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":2,"url":"https://github.com/oycm"}]},"filePathRelative":"springcloud/ZooKeeper.md"}');export{c as comp,p as data};
