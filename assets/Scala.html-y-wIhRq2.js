import{_ as i,c as r,e as c,b as o,d as e,a as s,f as n,r as u,o as k}from"./app-DO9Fsueg.js";const d={};function m(b,a){const p=u("Tabs");return k(),r("div",null,[a[128]||(a[128]=c(`<h1 id="scala" tabindex="-1"><a class="header-anchor" href="#scala"><span>Scala</span></a></h1><p><a href="https://scala-lang.org/" target="_blank" rel="noopener noreferrer">Scala 官网</a></p><p><a href="https://www.runoob.com/scala/scala-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></p><p><a href="https://scastie.scala-lang.org/" target="_blank" rel="noopener noreferrer">Scala 在线代码编写</a></p><p><a href="https://www.scala-lang.org/api/current/index.html" target="_blank" rel="noopener noreferrer">Scala API 文档</a></p><p>Scala(Scalable Language) 是一种多范式编程语言。运行在 JVM 上：可以调用 Java 库，也可以被 Java 调用。</p><p>两大范式特点：</p><ul><li>面向对象(OOP Object-Oriented Programming)：一切皆对象，和 Java 类似。</li><li>函数式(FP Functional Programming)：支持高阶函数，不可变数据结构、模式匹配等。</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><p><a href="https://www.scala-lang.org/download/" target="_blank" rel="noopener noreferrer">Scala 官网安装介绍地址</a></p><p><a href="https://github.com/coursier/coursier/releases/latest/download/cs-x86_64-pc-win32.zip" target="_blank" rel="noopener noreferrer">Coursier exe 安装下载地址</a></p><figure><img src="http://47.101.155.205/image-20250927210244664.png" alt="image-20250927210244664" tabindex="0" loading="lazy"><figcaption>image-20250927210244664</figcaption></figure><p><a href="https://github.com/scala/scala/" target="_blank" rel="noopener noreferrer">scala2 github 地址</a></p><figure><img src="http://47.101.155.205/image-20250927153815943.png" alt="image-20250927153815943" tabindex="0" loading="lazy"><figcaption>image-20250927153815943</figcaption></figure><p><a href="https://github.com/scala/scala3" target="_blank" rel="noopener noreferrer">scala3 github 地址</a></p><p><a href="https://github.com/VirtusLab/scala-cli/" target="_blank" rel="noopener noreferrer">scala-cli github 地址</a></p><p><strong>Coursier 安装方式</strong></p><ol><li><a href="https://github.com/coursier/coursier/releases/latest/download/cs-x86_64-pc-win32.zip" target="_blank" rel="noopener noreferrer">Coursier 之间下载地址</a>；<a href="https://github.com/coursier/coursier" target="_blank" rel="noopener noreferrer">Coursier Github 地址</a>；</li><li>下载解压后，双击 exe，根据命令行窗口提示配置环境变量：JAVA(<code>%JAVA_HOME%\\bin</code>)、Coursier(<code>%USERPROFILE%\\AppData\\Local\\Coursier\\data\\bin</code>)；</li></ol><figure><img src="http://47.101.155.205/image-20250928093557111.png" alt="image-20250928093557111" tabindex="0" loading="lazy"><figcaption>image-20250928093557111</figcaption></figure><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 安装 scala 开发环境</span></span>
<span class="line">cs setup</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 切换 全局 scala/scalac 版本为 2.12.20</span></span>
<span class="line">cs <span class="token function">install</span> scala:2.12.20 <span class="token operator">&amp;&amp;</span> cs <span class="token function">install</span> scalac:2.12.20</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 切换 3.7.3</span></span>
<span class="line">cs <span class="token function">install</span> scala:3.7.3 <span class="token operator">&amp;&amp;</span> cs <span class="token function">install</span> scalac:3.7.3</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 临时切换 scala 版本</span></span>
<span class="line">cs launch scala:2.12.20</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250928095606292.png" alt="image-20250928095606292" tabindex="0" loading="lazy"><figcaption>image-20250928095606292</figcaption></figure><p><strong>解压缩安装方式：scala github 地址下载压缩包，配置环境变量(SCALA_HOME)。</strong></p><p><strong>HelloWorld</strong></p>`,23)),o(p,{id:"85",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[0]||(a[0]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[1]||(a[1]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[2]||(a[2]=[s("p",null,"hello.scala 编写以下代码",-1),s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" hello "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" main"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token operator"},":"),n(" Array"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("	println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Hello World!"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1),s("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},"scalac hello.scala"),n(`
`),s("span",{class:"line"},"scala hello"),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1),s("p",null,null,-1)])),tab1:e(({value:t,isActive:l})=>a[3]||(a[3]=[s("p",null,[s("strong",null,"scala jdk 版本有要求，3.7.3 要求 jdk 17")],-1),s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token annotation punctuation"},"@main")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" hello"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n()]),n(`
`),s("span",{class:"line"},[n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Hello World!"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1),s("p",null,[s("strong",null,"不支持编译后再运行模式，支持 scala run 编译+运行模式，但是需要下载依赖。")],-1),s("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},"scala run hello.scala"),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1),s("figure",null,[s("img",{src:"http://47.101.155.205/image-20250928103324224.png",alt:"image-20250928103324224",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20250928103324224")],-1)])),_:1}),a[129]||(a[129]=c(`<h2 id="idea" tabindex="-1"><a class="header-anchor" href="#idea"><span>IDEA</span></a></h2><figure><img src="http://47.101.155.205/image-20251022110544492.png" alt="Scala 插件配置" tabindex="0" loading="lazy"><figcaption>Scala 插件配置</figcaption></figure><figure><img src="http://47.101.155.205/image-20251022110326422.png" alt="Scala 编译器配置" tabindex="0" loading="lazy"><figcaption>Scala 编译器配置</figcaption></figure><figure><img src="http://47.101.155.205/image-20251022110821914.png" alt="项目配置 scala" tabindex="0" loading="lazy"><figcaption>项目配置 scala</figcaption></figure><h2 id="repl" tabindex="-1"><a class="header-anchor" href="#repl"><span>REPL</span></a></h2><p>REPL(Read-Evaluate-Print-Loop) 是一个命令行解释器。</p><figure><img src="http://47.101.155.205/image-20250928105254512.png" alt="image-20250928105254512" tabindex="0" loading="lazy"><figcaption>image-20250928105254512</figcaption></figure><h2 id="scala-features" tabindex="-1"><a class="header-anchor" href="#scala-features"><span>Scala Features</span></a></h2><p><strong>高级语言特点：</strong></p><ol><li>高级语言；</li><li>简洁的语法；</li><li>动态类型表现；</li><li>Expressive type system；</li><li>函数式编程语言；</li><li>OOP：所有类型继承超类 <code>Any</code>，<code>Any</code> 的直接子类是 <code>AnyVal</code>(值类型，例如：Int 和 Boolean)和 <code>AnyRef</code>(引用类型)；</li><li>FP 和 OOP 结合：Scala 本质是在类型化设置中融合 FP 和 OOP；</li><li>类型推断；</li><li>客户端和服务端都支持；</li><li>无缝与 Java 结合；</li><li>丰富的库；</li></ol><p><strong>Scala 生态系统：</strong></p><p><a href="https://github.com/lauris/awesome-scala" target="_blank" rel="noopener noreferrer">Scala 开源系统列表</a></p><p><a href="https://index.scala-lang.org/" target="_blank" rel="noopener noreferrer">Scala 库搜索列表</a></p><p>构建工具：</p><ul><li>stb：https://www.scala-sbt.org/</li><li>gradle：</li></ul><h2 id="变量和数据类型" tabindex="-1"><a class="header-anchor" href="#变量和数据类型"><span>变量和数据类型</span></a></h2><p><strong>两种变量类型</strong>：</p><ul><li>val：创建一个不可变的变量，和 Java 的 final 一样。</li><li>var：创建一个可变变量，当且仅当变量随着时间变化才使用。</li></ul><p><strong>变量声明</strong>：显示声明变量类型或隐式声明编译器推断类型。</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">val</span> x<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 显示声明</span></span>
<span class="line"><span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 隐式声明</span></span>
<span class="line"><span class="token keyword">val</span> m <span class="token operator">=</span> Map<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p><strong>内置数据类型</strong>：是类对应的对象，不是原始数据类型。</p><ol><li><code>Boolean</code>：true/false。</li><li><code>Byte</code>：8-bit，-2^7~2^7-1。</li><li><code>Short</code>：16-bit，</li><li><code>Int</code>：32-bit，可以用进制法表示数值 <code>0xACE</code>。</li><li><code>Long</code>：64-bit，隐式声明数值携带后缀 <code>L</code>。</li><li><code>Double</code>：64-bit，隐式声明数值携带后缀 <code>D</code>。</li><li><code>Float</code>：32-bit，隐式声明数值携带后缀 <code>F</code>。</li><li><code>Char</code>：16-bit，<code>val c = &#39;c&#39;</code>。</li><li><code>String</code>：支持字符串插值；创建多行字符串方便。</li></ol><figure><img src="http://47.101.155.205/image-20251010112619373.png" alt="image-20251010112619373" tabindex="0" loading="lazy"><figcaption>image-20251010112619373</figcaption></figure><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// 只能在没有精度丢失情况下才可转换</span></span>
<span class="line"><span class="token keyword">val</span> x<span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> <span class="token number">987654321</span></span>
<span class="line"><span class="token keyword">val</span> y<span class="token operator">:</span> <span class="token builtin">Float</span> <span class="token operator">=</span> x<span class="token punctuation">.</span>toFloat</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>大数值类型：</p><ol><li><code>BigInt</code>：大整数，<code>BigInt(1234567890)</code>。</li><li><code>BigDecimal</code>：<code>BigDecimal(123456.789)</code>。</li></ol><p>Int 和 Double 是默认数字类型，<code>val i = 1</code> 和 <code>val i = 1.0</code> 分别被推断成 <code>Int</code> 和 <code>Double</code> 类型。</p><p><strong>s 插值</strong>：字符串前面添加 <code>s</code> 允许之间在字符串中使用变量。</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string">&quot;zs&quot;</span></span>
<span class="line"><span class="token keyword">val</span> age <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;name </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">, age </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// $$ 使用两个表示转义</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;price </span><span class="token escape symbol">$$</span><span class="token string">10&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// \${} 中可以嵌入任意表达式</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;2 + 2 = </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression"><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3 个 双引号创建多行文本</span></span>
<span class="line"><span class="token keyword">val</span> multiline <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;多行文本</span>
<span class="line">				   继续&quot;&quot;&quot;</span></span>
<span class="line"><span class="token comment">// 多行文本使用 s 插值</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;&quot;&quot;name: &quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;,</span>
<span class="line">           |age: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;&quot;&quot;</span></span><span class="token punctuation">.</span>stripMargin<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3 个双引号对 双引号转义</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;&quot;&quot;{&quot;name&quot;:&quot;James&quot;}&quot;&quot;&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>f 插值</strong>：字符串前面添加 <code>f</code> 允许简单的格式化字符串，类似 printf(String format, Object ... args) 方法。会进行类型校验。变量后不接类型，默认使用 <code>%s</code>。</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">val</span> height <span class="token operator">=</span> <span class="token number">1.8d</span></span>
<span class="line"><span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string">&quot;James&quot;</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">f</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">%s is </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">height</span></span><span class="token string">%2.2f meters tall&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// %% 表示转义</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">f</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">%s is </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">height</span></span><span class="token string">%2.2f meters tall, %%&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>raw 插值</strong>：不对转义字符转义，<code>\\n</code> 就是 <code>\\n</code> 字符。</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string">&quot;cm&quot;</span></span>
<span class="line"><span class="token keyword">val</span> str1 <span class="token operator">=</span> <span class="token string-interpolation"><span class="token id function">raw</span><span class="token string">&quot;hello\\n</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span></span>
<span class="line">println<span class="token punctuation">(</span>str1<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>Type</span></a></h3><p>在 Scala 中，所有值都有一个类型，包括数值和函数。如下图类的结构：</p><figure><img src="http://47.101.155.205/image-20250930111020781.png" alt="image-20250930111020781" tabindex="0" loading="lazy"><figcaption>image-20250930111020781</figcaption></figure><p><code>Any</code> 是所有类型的超类，和 Java 的 Object 类一样定义了通用方法，例如：<code>equals</code>，<code>hashCode</code>，<code>toString</code>。</p><p><code>Any</code> 有一个子类型 <code>Matchable</code>，用于匹配模式下的类型匹配。不能直接使用 <code>Any</code> 类型进行模式匹配，只能对 <code>Matchable</code> 的子类型的值进行模式匹配。</p><p><code>Matchable</code> 有两个子类型：<code>AnyVal</code> 和 <code>AnyRef</code>。</p><p><code>AnyVal</code> 表示值类型，几种已经定义的值类型，是不可为 <code>null</code> 的：<code>Double</code>，<code>Float</code>，<code>Long</code>，<code>Int</code>，<code>Short</code>，<code>Byte</code>，<code>Char</code>，<code>Unit</code>，<code>Boolean</code>。<code>Unit</code> 是一个不携带任何信息的值类型。只有一个 <code>Unit</code> 的实例，可以用 <code>()</code> 表示。</p><p><code>Nothing</code> 是所有类型的子类型，被称为底层类型。用于发出非终止信号，例如：抛出异常，程序退出，无限循环。</p><p><code>Null</code> 是所有引用类型的子类型。用 <code>null</code> 关键字表示值，在 Scala 中几乎不使用。</p><h3 id="自定义插值表达式" tabindex="-1"><a class="header-anchor" href="#自定义插值表达式"><span>自定义插值表达式</span></a></h3><p>自定义一个 p-插值表达式，<code>p&quot;1,-2&quot;</code> 转换成 <code>Point</code> 对象。</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Point<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> pt <span class="token operator">=</span> <span class="token string-interpolation"><span class="token id function">p</span><span class="token string">&quot;1,-2&quot;</span></span>     <span class="token comment">// Point(1.0,-2.0)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,45)),o(p,{id:"358",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[4]||(a[4]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[5]||(a[5]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[6]||(a[6]=[s("p",null,"创建隐式类",-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"// 创建模板")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"implicit"),n(),s("span",{class:"token keyword"},"class"),n(" PointHelper"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"val"),n(" sc"),s("span",{class:"token operator"},":"),n(" StringContext"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(),s("span",{class:"token builtin"},"AnyVal"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" p"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Any"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Point "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token operator"},"?"),s("span",{class:"token operator"},"?"),s("span",{class:"token operator"},"?")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 具体实现逻辑")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"implicit"),n(),s("span",{class:"token keyword"},"class"),n(" PointHelper"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"val"),n(" sc"),s("span",{class:"token operator"},":"),n(" StringContext"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(),s("span",{class:"token builtin"},"AnyVal"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" p"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Point "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"// 使用 s-插值表达式解析然后使用 ',' 分割")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"val"),n(" pts "),s("span",{class:"token operator"},"="),n(" sc"),s("span",{class:"token punctuation"},"."),n("s"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token operator"},":"),n(" _"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("split"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'","'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("map "),s("span",{class:"token punctuation"},"{"),n(" _"),s("span",{class:"token punctuation"},"."),n("toDoubleOption"),s("span",{class:"token punctuation"},"."),n("getOrElse"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"0.0"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    Point"),s("span",{class:"token punctuation"},"("),n("pts"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(" pts"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[7]||(a[7]=[s("p",null,[n("使用 "),s("code",null,"extension"),n(" 方法")],-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"// 创建模板")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"extension"),n(),s("span",{class:"token punctuation"},"("),n("sc"),s("span",{class:"token operator"},":"),n(" StringContext"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" p"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Any"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Point "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token operator"},"?"),s("span",{class:"token operator"},"?"),s("span",{class:"token operator"},"?")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 具体实现逻辑")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"extension"),n(),s("span",{class:"token punctuation"},"("),n("sc"),s("span",{class:"token operator"},":"),n(" StringContext"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" p"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Point "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"val"),n(" pts "),s("span",{class:"token operator"},"="),n(" sc"),s("span",{class:"token punctuation"},"."),n("s"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token operator"},":"),n(" _"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("split"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'","'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("map "),s("span",{class:"token punctuation"},"{"),n(" _"),s("span",{class:"token punctuation"},"."),n("toDoubleOption"),s("span",{class:"token punctuation"},"."),n("getOrElse"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"0.0"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    Point"),s("span",{class:"token punctuation"},"("),n("pts"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(" pts"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[130]||(a[130]=s("h3",{id:"generic",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#generic"},[s("span",null,"Generic")])],-1)),a[131]||(a[131]=s("p",null,[n("泛型 "),s("code",null,"class/trait"),n(" 将类型作为 "),s("code",null,"[...]"),n(" 中的参数。Scala 约定使用单个字母命名参数。可以作用在类中的方法参数或返回值上。")],-1)),o(p,{id:"378",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[8]||(a[8]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[9]||(a[9]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[10]||(a[10]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Stack"),s("span",{class:"token punctuation"},"["),n("A"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"var"),n(" elements"),s("span",{class:"token operator"},":"),n(" List"),s("span",{class:"token punctuation"},"["),n("A"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"="),n(" Nil")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" push"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token operator"},":"),n(" A"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    elements "),s("span",{class:"token operator"},"="),n(" elements"),s("span",{class:"token punctuation"},"."),n("prepended"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" peek"),s("span",{class:"token operator"},":"),n(" A "),s("span",{class:"token operator"},"="),n(" elements"),s("span",{class:"token punctuation"},"."),n("head")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" A "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"val"),n(" currentTop "),s("span",{class:"token operator"},"="),n(" peek")]),n(`
`),s("span",{class:"line"},[n("    elements "),s("span",{class:"token operator"},"="),n(" elements"),s("span",{class:"token punctuation"},"."),n("tail")]),n(`
`),s("span",{class:"line"},"    currentTop"),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" stack "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Stack"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},"]")]),n(`
`),s("span",{class:"line"},[n("stack"),s("span",{class:"token punctuation"},"."),n("push"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("println"),s("span",{class:"token punctuation"},"("),n("stack"),s("span",{class:"token punctuation"},"."),n("pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[11]||(a[11]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Stack"),s("span",{class:"token punctuation"},"["),n("A"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"var"),n(" elements"),s("span",{class:"token operator"},":"),n(" List"),s("span",{class:"token punctuation"},"["),n("A"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"="),n(" Nil")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" push"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token operator"},":"),n(" A"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    elements "),s("span",{class:"token operator"},"="),n(" elements"),s("span",{class:"token punctuation"},"."),n("prepended"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" peek"),s("span",{class:"token operator"},":"),n(" A "),s("span",{class:"token operator"},"="),n(" elements"),s("span",{class:"token punctuation"},"."),n("head")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" A "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"val"),n(" currentTop "),s("span",{class:"token operator"},"="),n(" peek")]),n(`
`),s("span",{class:"line"},[n("    elements "),s("span",{class:"token operator"},"="),n(" elements"),s("span",{class:"token punctuation"},"."),n("tail")]),n(`
`),s("span",{class:"line"},"    currentTop"),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" stack "),s("span",{class:"token operator"},"="),n(" Stack"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},"]")]),n(`
`),s("span",{class:"line"},[n("stack"),s("span",{class:"token punctuation"},"."),n("push"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("println"),s("span",{class:"token punctuation"},"("),n("stack"),s("span",{class:"token punctuation"},"."),n("pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[132]||(a[132]=c(`<h3 id="intersection-type" tabindex="-1"><a class="header-anchor" href="#intersection-type"><span>Intersection Type</span></a></h3><p>在类型上使用 <code>&amp;</code> 运算符创建交集类型(Intersection Type)。<code>A &amp; B</code> 表示值同时属于类型 A 和类型 B。</p><p><strong>仅 Scala 3</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">trait</span> Resettable<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">def</span> reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">trait</span> Growable<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">def</span> add<span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span></span>
<span class="line"><span class="token comment">// 参数 x 需要同时是 Resettable 和 Growable[String] 类型</span></span>
<span class="line"><span class="token keyword">def</span> f<span class="token punctuation">(</span>x<span class="token operator">:</span> Resettable <span class="token operator">&amp;</span> Growable<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span></span>
<span class="line">  x<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  x<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),o(p,{id:"396",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[12]||(a[12]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[13]||(a[13]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[14]||(a[14]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Both"),s("span",{class:"token punctuation"},"["),n("A"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"extends"),n(" Resettable "),s("span",{class:"token keyword"},"with"),n(" Growable"),s("span",{class:"token punctuation"},"["),n("A"),s("span",{class:"token punctuation"},"]")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" f"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token operator"},":"),n(" Both"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit")]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>a[15]||(a[15]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Both"),s("span",{class:"token punctuation"},"["),n("A"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"extends"),n(" Resettable"),s("span",{class:"token punctuation"},","),n(" Growable"),s("span",{class:"token punctuation"},"["),n("A"),s("span",{class:"token punctuation"},"]")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" f"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token operator"},":"),n(" Both"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[133]||(a[133]=c(`<h3 id="union-type-scala-3" tabindex="-1"><a class="header-anchor" href="#union-type-scala-3"><span>Union Type(Scala 3)</span></a></h3><p>在类型上使用 <code>|</code> 运算符创建 Union Type(联合类型)。<code>A | B</code> 表示参数可以是 A 或 B 类型。</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Username<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Password<span class="token punctuation">(</span>hash<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> help<span class="token punctuation">(</span>id<span class="token operator">:</span> Username <span class="token operator">|</span> Password<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token keyword">val</span> user <span class="token operator">=</span> id <span class="token keyword">match</span></span>
<span class="line">    <span class="token keyword">case</span> Username<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> lookupName<span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> Password<span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> lookupPassword<span class="token punctuation">(</span>hash<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>抽象替代联合类型</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">trait</span> UsernameOrPassword</span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Username<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> UsernameOrPassword</span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Password<span class="token punctuation">(</span>hash<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> UsernameOrPassword</span>
<span class="line"><span class="token keyword">def</span> help<span class="token punctuation">(</span>id<span class="token operator">:</span> UsernameOrPassword<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>使用枚举标记并集。Username 不是 UsernameOrPassword 的子类型，需要显示</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">enum</span> UsernameOrPassword<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> IsUsername<span class="token punctuation">(</span>u<span class="token operator">:</span> Username<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">case</span> IsPassword<span class="token punctuation">(</span>p<span class="token operator">:</span> Password<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> help<span class="token punctuation">(</span>id<span class="token operator">:</span> UsernameOrPassword<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token keyword">val</span> user <span class="token operator">=</span> id <span class="token keyword">match</span></span>
<span class="line">    <span class="token keyword">case</span> UsernameOrPassword<span class="token punctuation">.</span>IsUsername<span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> lookupName<span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> UsernameOrPassword<span class="token punctuation">.</span>IsPassword<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> lookupPassword<span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><h3 id="algebraic-data-type" tabindex="-1"><a class="header-anchor" href="#algebraic-data-type"><span>Algebraic Data Type</span></a></h3><p>可以使用 <code>enum</code> 构建 Algebraic Data Type(ADT，代数数据类型)。是一种通过组合积类型（<code>product type</code>）及和类型（<code>sum type</code>）构建数据结构的方式。</p><p><strong>Scala 3 通过 enum 简化了 ADT。</strong></p><p><strong>Sum Type(和类型)</strong>：一个类型有不同的情况，或关系。3 种大的类型：CrustSize(大小)、CrustType(类型)、Topping(加料)。</p>`,11)),o(p,{id:"434",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[16]||(a[16]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[17]||(a[17]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[18]||(a[18]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"sealed"),n(),s("span",{class:"token keyword"},"abstract"),n(),s("span",{class:"token keyword"},"class"),n(" CrustSize")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 大小由不同的表示")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" CrustSize "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"object"),n(" Small "),s("span",{class:"token keyword"},"extends"),n(" CrustSize")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"object"),n(" Medium "),s("span",{class:"token keyword"},"extends"),n(" CrustSize")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"object"),n(" Large "),s("span",{class:"token keyword"},"extends"),n(" CrustSize")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"sealed"),n(),s("span",{class:"token keyword"},"abstract"),n(),s("span",{class:"token keyword"},"class"),n(" CrustType")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" CrustType "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"object"),n(" Thin "),s("span",{class:"token keyword"},"extends"),n(" CrustType")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"object"),n(" Thick "),s("span",{class:"token keyword"},"extends"),n(" CrustType")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"object"),n(" Regular "),s("span",{class:"token keyword"},"extends"),n(" CrustType")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"sealed"),n(),s("span",{class:"token keyword"},"abstract"),n(),s("span",{class:"token keyword"},"class"),n(" Topping")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" Topping "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"object"),n(" Cheese "),s("span",{class:"token keyword"},"extends"),n(" Topping")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"object"),n(" Pepperoni "),s("span",{class:"token keyword"},"extends"),n(" Topping")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"object"),n(" BlackOlives "),s("span",{class:"token keyword"},"extends"),n(" Topping")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"object"),n(" GreenOlives "),s("span",{class:"token keyword"},"extends"),n(" Topping")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"object"),n(" Onions "),s("span",{class:"token keyword"},"extends"),n(" Topping")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,null,-1)])),tab1:e(({value:t,isActive:l})=>a[19]||(a[19]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"enum"),n(" CrustSize"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Small"),s("span",{class:"token punctuation"},","),n(" Medium"),s("span",{class:"token punctuation"},","),n(" Large")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"enum"),n(" CrustType"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Thin"),s("span",{class:"token punctuation"},","),n(" Thick"),s("span",{class:"token punctuation"},","),n(" Regular")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"enum"),n(" Topping"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Cheese"),s("span",{class:"token punctuation"},","),n(" Pepperoni"),s("span",{class:"token punctuation"},","),n(" BlackOlives"),s("span",{class:"token punctuation"},","),n(" GreenOlives"),s("span",{class:"token punctuation"},","),n(" Onions")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1),s("p",null,null,-1)])),_:1}),a[134]||(a[134]=c(`<p><strong>Product Type(积类型)</strong>：一个类型由多个字段组合而成，与关系。Scala 中 case 对象可以用来表示单例对象，可访问但不可变的结构，也可以用 case class 表示</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// 定义 case class</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Person<span class="token punctuation">(</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span></span>
<span class="line">  vocation<span class="token operator">:</span> <span class="token builtin">String</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// case 对象创建</span></span>
<span class="line"><span class="token keyword">val</span> p <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Reginald Kenneth Dwight&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Singer&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 默认的 toString 方法</span></span>
<span class="line">p              </span>
<span class="line"></span>
<span class="line"><span class="token comment">// 可访问，不可变</span></span>
<span class="line">p<span class="token punctuation">.</span>name           </span>
<span class="line"><span class="token comment">// p.name = &quot;Joe&quot; 不能修改数据</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 需要更新返回一个新的对象</span></span>
<span class="line"><span class="token keyword">val</span> p2 <span class="token operator">=</span> p<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Elton John&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="virance-型变" tabindex="-1"><a class="header-anchor" href="#virance-型变"><span>Virance(型变)</span></a></h3><p>Scala 支持 3 种型变方式：</p><ul><li>Invariant Type：不变，既生产又消费。<code>Array[T]</code>。</li><li>Covariant Type：协变，只产生类型 T。<code>List[+T]</code>。</li><li>Contravariant Type：逆变，只消费类型 T。<code>Function[-A, +B]</code>。</li></ul><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">trait</span> Item <span class="token punctuation">{</span> <span class="token keyword">def</span> productNumber<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">trait</span> Buyable <span class="token keyword">extends</span> Item <span class="token punctuation">{</span> <span class="token keyword">def</span> price<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">trait</span> Book <span class="token keyword">extends</span> Buyable <span class="token punctuation">{</span> <span class="token keyword">def</span> isbn<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> RedBook <span class="token keyword">extends</span> Book <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">def</span> productNumber<span class="token operator">:</span> <span class="token builtin">Int</span>  <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">def</span> price<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line">    <span class="token keyword">def</span> isbn<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">&quot;RedBook&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p><strong>Invariant Type(不变类型)</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// invariant type, Pipeline[T] 参数指定类型不可变</span></span>
<span class="line"><span class="token keyword">trait</span> Pipeline<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">def</span> process<span class="token punctuation">(</span>t<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> T</span>
<span class="line"></span>
<span class="line"><span class="token keyword">object</span> PipelineUtil<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">def</span> oneOf<span class="token punctuation">(</span>p1<span class="token operator">:</span> Pipeline<span class="token punctuation">[</span>Buyable<span class="token punctuation">]</span><span class="token punctuation">,</span> p2<span class="token operator">:</span> Pipeline<span class="token punctuation">[</span>Buyable<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token operator">:</span> Buyable<span class="token punctuation">)</span><span class="token operator">:</span> Buyable <span class="token operator">=</span></span>
<span class="line">    <span class="token keyword">val</span> b1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>process<span class="token punctuation">(</span>b<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> b2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>process<span class="token punctuation">(</span>b<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> b1<span class="token punctuation">.</span>price <span class="token operator">&lt;</span> b2<span class="token punctuation">.</span>price then b1 <span class="token keyword">else</span> b2</span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> Pipeline<span class="token punctuation">[</span>Buyable<span class="token punctuation">]</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">def</span> process<span class="token punctuation">(</span>t<span class="token operator">:</span> Buyable<span class="token punctuation">)</span><span class="token operator">:</span> Buyable <span class="token operator">=</span> t</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">val</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> Pipeline<span class="token punctuation">[</span>Book<span class="token punctuation">]</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">def</span> process<span class="token punctuation">(</span>t<span class="token operator">:</span> Book<span class="token punctuation">)</span><span class="token operator">:</span> Book <span class="token operator">=</span> t</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token keyword">new</span> Buyable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">def</span> productNumber<span class="token operator">:</span> <span class="token builtin">Int</span>  <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">def</span> price<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>p1，p2 的类型只能是 <code>Pipeline[Buyable]</code>。虽然<code>Book &lt;: Buyable &lt;: Item</code>，但<code>Pipeline[Buyable]</code> 和 <code>Pipeline[Book]</code> 没有任何关系 。</p><figure><img src="http://47.101.155.205/image-20251013160445359.png" alt="image-20251013160445359" tabindex="0" loading="lazy"><figcaption>image-20251013160445359</figcaption></figure><p><strong>Covariant Type(协变类型)</strong>：可以是该类型或其子类型，该参数类型只能作用<strong>在方法返回类型有效</strong>。<strong>val 作用在构造方法上有效</strong>。</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// covariant type, Producer[+T] 参数指定类型, 可以为其类型或子类型</span></span>
<span class="line"><span class="token keyword">trait</span> Producer<span class="token punctuation">[</span><span class="token operator">+</span>T<span class="token punctuation">]</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">def</span> make<span class="token operator">:</span> T</span>
<span class="line"></span>
<span class="line"><span class="token keyword">object</span> PipelineUtil<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">def</span> makeTwo<span class="token punctuation">(</span>p<span class="token operator">:</span> Producer<span class="token punctuation">[</span>Buyable<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> </span>
<span class="line">    p<span class="token punctuation">.</span>make<span class="token punctuation">.</span>price <span class="token operator">+</span> p<span class="token punctuation">.</span>make<span class="token punctuation">.</span>price</span>
<span class="line"></span>
<span class="line"><span class="token comment">// Producer[RedBook] &lt;: Producer[Buyable], 父(Producer[Buyable]) = 子(Producer[RedBook])</span></span>
<span class="line"><span class="token comment">// 方法返回值, 返回的类型为 T 的子类型, 不影响 Producer 不影响 T 方法编译</span></span>
<span class="line"><span class="token keyword">val</span> pr <span class="token operator">=</span> <span class="token keyword">new</span> Producer<span class="token punctuation">[</span>RedBook<span class="token punctuation">]</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">def</span> make<span class="token operator">:</span> RedBook <span class="token operator">=</span> RedBook<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">val</span> pb<span class="token operator">:</span> Producer<span class="token punctuation">[</span>Buyable<span class="token punctuation">]</span> <span class="token operator">=</span> pr</span>
<span class="line"></span>
<span class="line">PipelineUtil<span class="token punctuation">.</span>makeTwo<span class="token punctuation">(</span>pr<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>协变不能作为方法参数的原因</strong>：</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">class</span> Box<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">def</span> set<span class="token punctuation">(</span>value<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">Cat <span class="token operator">&lt;</span><span class="token operator">:</span> Animal <span class="token keyword">=&gt;</span> Box<span class="token punctuation">[</span>Cat<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">:</span> Box<span class="token punctuation">[</span>Animal<span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 所以</span></span>
<span class="line"><span class="token keyword">val</span> catBox<span class="token operator">:</span> Box<span class="token punctuation">[</span>Cat<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> Box<span class="token punctuation">[</span>Cat<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">val</span> animalBox<span class="token operator">:</span> Box<span class="token punctuation">[</span>Animal<span class="token punctuation">]</span> <span class="token operator">=</span> catBox</span>
<span class="line"><span class="token comment">// 这里逻辑上就会有问题</span></span>
<span class="line">animalBox<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token keyword">new</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p><strong>Contravariant Type(逆变类型)</strong>：该参数类型在<strong>方法参数上</strong>才有效。</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// contravariant type, Consumer[-T] 参数指定类型</span></span>
<span class="line"><span class="token keyword">trait</span> Consumer<span class="token punctuation">[</span><span class="token operator">-</span>T<span class="token punctuation">]</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">def</span> take<span class="token punctuation">(</span>t<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> buy<span class="token operator">:</span> Consumer<span class="token punctuation">[</span>Buyable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> Consumer<span class="token punctuation">[</span>Buyable<span class="token punctuation">]</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">def</span> take<span class="token punctuation">(</span>t<span class="token operator">:</span> Buyable<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> print<span class="token punctuation">(</span><span class="token string">&quot;Buyable: &quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span>price<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Consumer[Buyable] &lt;: Consumer[Book], 父(Consumer[Book]) = 子(Consumer[Buyable])</span></span>
<span class="line"><span class="token comment">// 方法参数, 接收类型为 T, Consumer[Buyable] 转为 Consumer[Book], 意味着该方法参数需要 Book 类型</span></span>
<span class="line"><span class="token comment">// Consumer[Buyable] &lt;: Consumer[Book] 转换关系, 但是类型需要为 T 的子类型</span></span>
<span class="line"><span class="token keyword">val</span> book<span class="token operator">:</span> Consumer<span class="token punctuation">[</span>Book<span class="token punctuation">]</span> <span class="token operator">=</span> buy</span>
<span class="line"></span>
<span class="line"><span class="token keyword">trait</span> Function<span class="token punctuation">[</span><span class="token operator">-</span>A<span class="token punctuation">,</span> <span class="token operator">+</span>B<span class="token punctuation">]</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">def</span> apply<span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> B</span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> f<span class="token operator">:</span> Function<span class="token punctuation">[</span>Buyable<span class="token punctuation">,</span> Buyable<span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token keyword">=&gt;</span> b</span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> g<span class="token operator">:</span> Function<span class="token punctuation">[</span>Buyable<span class="token punctuation">,</span> Item<span class="token punctuation">]</span> <span class="token operator">=</span> f</span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> h<span class="token operator">:</span> Function<span class="token punctuation">[</span>Book<span class="token punctuation">,</span> Buyable<span class="token punctuation">]</span> <span class="token operator">=</span> f</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>逆变类型不能作为返回值的原因</strong></p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">class</span> Box<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">def</span> make<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> A <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">Cat <span class="token operator">&lt;</span><span class="token operator">:</span> Animal <span class="token keyword">=&gt;</span> Box<span class="token punctuation">[</span>Animal<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">:</span> Box<span class="token punctuation">[</span>Cat<span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 则</span></span>
<span class="line"><span class="token keyword">val</span> animalBox<span class="token operator">:</span> Box<span class="token punctuation">[</span>Animal<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> Box<span class="token punctuation">[</span>Animal<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">val</span> catBox<span class="token operator">:</span> Box<span class="token punctuation">[</span>Cat<span class="token punctuation">]</span> <span class="token operator">=</span> animalBox</span>
<span class="line"><span class="token comment">// 这里逻辑上就会有问题</span></span>
<span class="line">catBox<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><h3 id="opaque-type-不透明类型-scala-3" tabindex="-1"><a class="header-anchor" href="#opaque-type-不透明类型-scala-3"><span>Opaque Type(不透明类型)(Scala 3)</span></a></h3><p>将 Double 封装成对数（3就是以10为底，1000的对数），引入一个新的类型。</p><p><strong>为什么使用 REPL 控制执行的结果不符合预期？</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// protected 隐藏 underlying, 使用 Logarithm(2), underlying = log 2; new Logarithm(2), underlying = 2</span></span>
<span class="line"><span class="token comment">// underlying 就是以常数 e 为底, d 的对数</span></span>
<span class="line"><span class="token keyword">class</span> Logarithm<span class="token punctuation">(</span><span class="token keyword">protected</span> <span class="token keyword">val</span> underlying<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 对数还原成 d</span></span>
<span class="line">  <span class="token keyword">def</span> toDouble<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>underlying<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> <span class="token operator">+</span><span class="token punctuation">(</span>that<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span><span class="token operator">:</span> Logarithm <span class="token operator">=</span></span>
<span class="line">    <span class="token comment">// 调用 companion object apply 方法, 省略方法名</span></span>
<span class="line">    Logarithm<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>toDouble <span class="token operator">+</span> that<span class="token punctuation">.</span>toDouble<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> <span class="token operator">*</span><span class="token punctuation">(</span>that<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span><span class="token operator">:</span> Logarithm <span class="token operator">=</span></span>
<span class="line">    <span class="token keyword">new</span> Logarithm<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>underlying <span class="token operator">+</span> that<span class="token punctuation">.</span>underlying<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> logE<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> underlying</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">object</span> Logarithm <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">def</span> apply<span class="token punctuation">(</span>d<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token operator">:</span> Logarithm <span class="token operator">=</span> <span class="token keyword">new</span> Logarithm<span class="token punctuation">(</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> l2 <span class="token operator">=</span> Logarithm<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">val</span> l3 <span class="token operator">=</span> Logarithm<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;x = </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">l2<span class="token punctuation">.</span>toDouble</span><span class="token punctuation">}</span></span><span class="token string">, y = </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">l2<span class="token punctuation">.</span>logE</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;x = </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">l3<span class="token punctuation">.</span>toDouble</span><span class="token punctuation">}</span></span><span class="token string">, y = </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">l3<span class="token punctuation">.</span>logE</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;l2 + l3 = </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression"><span class="token punctuation">(</span>l2 <span class="token operator">+</span> l3<span class="token punctuation">)</span><span class="token punctuation">.</span>toDouble</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;l2 * l3 = </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression"><span class="token punctuation">(</span>l2 <span class="token operator">*</span> l3<span class="token punctuation">)</span><span class="token punctuation">.</span>toDouble</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">(</span>l2 <span class="token operator">*</span> l3<span class="token punctuation">)</span><span class="token punctuation">.</span>toDouble <span class="token comment">// 6.0</span></span>
<span class="line"><span class="token punctuation">(</span>l2 <span class="token operator">+</span> l3<span class="token punctuation">)</span><span class="token punctuation">.</span>toDouble <span class="token comment">// 5.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20251017112338507.png" alt="image-20251017112338507" tabindex="0" loading="lazy"><figcaption>image-20251017112338507</figcaption></figure><figure><img src="http://47.101.155.205/image-20251017112533052.png" alt="image-20251017112533052" tabindex="0" loading="lazy"><figcaption>image-20251017112533052</figcaption></figure><p><strong>使用 Logarithm 存储 Double 的对数，但是每次运算都带来了性能开销（抽象开销）：每次运算都需要提取 underlying 值，然后创建 Logarithm 对象。</strong></p><p>使用模块化抽象，来解决对象频繁创建的问题。但是 <code>LogarithmsImpl</code> 实现的 <code>type Logarithm</code> 固定为 <code>Double</code> 类型。</p><p><strong>问题：出现了定义的 + 和 * 运算没有生效的情况。</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">trait</span> Logarithms <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 以 e 为底, d 的对数值</span></span>
<span class="line">  <span class="token keyword">type</span> Logarithm</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> add<span class="token punctuation">(</span>x<span class="token operator">:</span> Logarithm<span class="token punctuation">,</span> y<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span><span class="token operator">:</span> Logarithm</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> mul<span class="token punctuation">(</span>x<span class="token operator">:</span> Logarithm<span class="token punctuation">,</span> y<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span><span class="token operator">:</span> Logarithm</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> make<span class="token punctuation">(</span>d<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token operator">:</span> Logarithm</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> extract<span class="token punctuation">(</span>x<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">extension</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span><span class="token operator">:</span> Logarithm <span class="token operator">=</span> add<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span><span class="token operator">:</span> Logarithm <span class="token operator">=</span> mul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">object</span> LogarithmsImpl <span class="token keyword">extends</span> Logarithms <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">type</span> Logarithm <span class="token operator">=</span> <span class="token builtin">Double</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> add<span class="token punctuation">(</span>x<span class="token operator">:</span> Logarithm<span class="token punctuation">,</span> y<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span><span class="token operator">:</span> Logarithm <span class="token operator">=</span> make<span class="token punctuation">(</span>extract<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> extract<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> mul<span class="token punctuation">(</span>x<span class="token operator">:</span> Logarithm<span class="token punctuation">,</span> y<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span><span class="token operator">:</span> Logarithm <span class="token operator">=</span> x <span class="token operator">+</span> y</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> make<span class="token punctuation">(</span>d<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token operator">:</span> Logarithm <span class="token operator">=</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>d<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> extract<span class="token punctuation">(</span>x<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20251017150934812.png" alt="image-20251017150934812" tabindex="0" loading="lazy"><figcaption>image-20251017150934812</figcaption></figure><p><strong>Opaque Type（不透明类型）</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">object</span> Logarithms<span class="token operator">:</span></span>
<span class="line">  <span class="token comment">// 定义不透明类型</span></span>
<span class="line">  <span class="token comment">// Logarithm 和 Double 类型相等，仅在 Logarithm 作用域可知，改作用域应用在 Logarithms，且 extension Logarithm 的方法</span></span>
<span class="line">  <span class="token keyword">opaque</span> <span class="token keyword">type</span> Logarithm <span class="token operator">=</span> <span class="token builtin">Double</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">object</span> Logarithm<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">def</span> apply<span class="token punctuation">(</span>d<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token operator">:</span> Logarithm <span class="token operator">=</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>d<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">extension</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> extract<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span><span class="token operator">:</span> Logarithm <span class="token operator">=</span> Logarithm<span class="token punctuation">(</span>math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y<span class="token operator">:</span> Logarithm<span class="token punctuation">)</span><span class="token operator">:</span> Logarithm <span class="token operator">=</span> x <span class="token operator">+</span> y</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20251017152535556.png" alt="image-20251017152535556" tabindex="0" loading="lazy"><figcaption>image-20251017152535556</figcaption></figure><h3 id="structural-type-scala-3" tabindex="-1"><a class="header-anchor" href="#structural-type-scala-3"><span>Structural Type(Scala 3)</span></a></h3><p><strong>使用语法</strong>：仅包含抽象成员的结构</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">type</span> MyType <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">def</span> m1<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span></span>
<span class="line">  <span class="token keyword">val</span> name<span class="token operator">:</span> <span class="token builtin">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 函数参数内联定义</span></span>
<span class="line"><span class="token keyword">def</span> printName<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">val</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span></span>
<span class="line">  println<span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">class</span> Record<span class="token punctuation">(</span>elems<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Selectable<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">val</span> fields <span class="token operator">=</span> elems<span class="token punctuation">.</span>toMap</span>
<span class="line">  <span class="token keyword">def</span> selectDynamic<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> fields<span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Person <span class="token operator">=</span> Record <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> name<span class="token operator">:</span> <span class="token builtin">String</span></span>
<span class="line">  <span class="token keyword">val</span> age<span class="token operator">:</span> <span class="token builtin">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> person <span class="token operator">=</span> Record<span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;name&quot;</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;Emma&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;age&quot;</span> <span class="token operator">-&gt;</span> <span class="token number">42</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>Person<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">person<span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">person<span class="token punctuation">.</span>age</span><span class="token punctuation">}</span></span><span class="token string"> years old.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">person<span class="token punctuation">.</span>selectDynamic<span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span></span>
<span class="line">person<span class="token punctuation">.</span>selectDynamic<span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">type</span> Book <span class="token operator">=</span> Record <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> title<span class="token operator">:</span> <span class="token builtin">String</span></span>
<span class="line">  <span class="token keyword">val</span> author<span class="token operator">:</span> <span class="token builtin">String</span></span>
<span class="line">  <span class="token keyword">val</span> year<span class="token operator">:</span> <span class="token builtin">Int</span></span>
<span class="line">  <span class="token keyword">val</span> rating<span class="token operator">:</span> <span class="token builtin">Double</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> book <span class="token operator">=</span> Record<span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;title&quot;</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;The Catcher in the Rye&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;author&quot;</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;J. D. Salinger&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;year&quot;</span> <span class="token operator">-&gt;</span> <span class="token number">1951</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;rating&quot;</span> <span class="token operator">-&gt;</span> <span class="token number">4.5</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>Book<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dependent-function-type-scala-3" tabindex="-1"><a class="header-anchor" href="#dependent-function-type-scala-3"><span>Dependent Function Type(Scala 3)</span></a></h3><h2 id="控制语句" tabindex="-1"><a class="header-anchor" href="#控制语句"><span>控制语句</span></a></h2><p><strong>EOP(expression-oriented programming)</strong>：编写的表达式返回一个值时，这样的称为面向表达式编程。不返回值的称为语句。</p><h3 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else"><span>if/else</span></a></h3>`,41)),o(p,{id:"559",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[20]||(a[20]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[21]||(a[21]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[22]||(a[22]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("x "),s("span",{class:"token operator"},"<"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// 语句")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"negative"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("x "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"zero"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"positive"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 返回值, 类似三目运算符, EOP")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" x "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("a "),s("span",{class:"token operator"},"<"),n(" b"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" a "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(" b "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 作为方法主体返回值")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" compare"),s("span",{class:"token punctuation"},"("),n("a"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},","),n(" b"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("a "),s("span",{class:"token operator"},"<"),n(" b"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token operator"},"-"),s("span",{class:"token number"},"1")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("a "),s("span",{class:"token operator"},"=="),n(" b"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token number"},"0")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"else")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token number"},"1")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,null,-1)])),tab1:e(({value:t,isActive:l})=>a[23]||(a[23]=[s("p",null,"与 Scala 2对比，用 then 替换了 {}。",-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"if"),n(" x "),s("span",{class:"token operator"},"<"),n(),s("span",{class:"token number"},"0"),n(" then")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"negative"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(" x "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token number"},"0"),n(" then")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"zero"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"else")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"positive"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 返回值, 类似三目运算符, EOP")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" x "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"if"),n(" a "),s("span",{class:"token operator"},"<"),n(" b then a "),s("span",{class:"token keyword"},"else"),n(" b")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 仅 Scala 3 支持，在表达结尾添加 end if")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"if"),n(" x "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token number"},"1"),n(" then")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"x is 1, as you can see:"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("end "),s("span",{class:"token keyword"},"if")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 作为方法主体")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" compare"),s("span",{class:"token punctuation"},"("),n("a"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},","),n(" b"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),n(" a "),s("span",{class:"token operator"},"<"),n(" b then")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token operator"},"-"),s("span",{class:"token number"},"1")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(" a "),s("span",{class:"token operator"},"=="),n(" b then")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token number"},"0")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"else")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token number"},"1")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[135]||(a[135]=s("h3",{id:"for-循环",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#for-循环"},[s("span",null,"for 循环")])],-1)),o(p,{id:"576",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[24]||(a[24]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[25]||(a[25]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[26]||(a[26]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" ints "),s("span",{class:"token operator"},"="),n(" List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// p <- e, for 循环生成模板")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"("),n("i "),s("span",{class:"token keyword"},"<-"),n(" ints"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" x "),s("span",{class:"token operator"},"="),n(" i "),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token number"},"2")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"i = '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"i")]),s("span",{class:"token string"},", x = "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"x")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 嵌套 for 循环, 执行 2x2x2 = 8 次. 注意: () 变成 {}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  i "),s("span",{class:"token keyword"},"<-"),n(),s("span",{class:"token number"},"1"),n(" to "),s("span",{class:"token number"},"2")]),n(`
`),s("span",{class:"line"},[n("  j "),s("span",{class:"token keyword"},"<-"),n(),s("span",{class:"token char"},"'a'"),n(" to "),s("span",{class:"token char"},"'b'")]),n(`
`),s("span",{class:"line"},[n("  k "),s("span",{class:"token keyword"},"<-"),n(),s("span",{class:"token number"},"1"),n(" to "),s("span",{class:"token number"},"10"),n(" by "),s("span",{class:"token number"},"5")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"i = '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"i")]),s("span",{class:"token string"},", j = "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"j")]),s("span",{class:"token string"},", k = "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"k")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 循环中增加条件, 支持多条件")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"("),n("i "),s("span",{class:"token keyword"},"<-"),n(" ints "),s("span",{class:"token keyword"},"if"),n(" i "),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),n("i"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 嵌套 for 循环 + 条件")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  i "),s("span",{class:"token keyword"},"<-"),n(),s("span",{class:"token number"},"1"),n(" to "),s("span",{class:"token number"},"3")]),n(`
`),s("span",{class:"line"},[n("  j "),s("span",{class:"token keyword"},"<-"),n(),s("span",{class:"token char"},"'a'"),n(" to "),s("span",{class:"token char"},"'c'")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),n(" i "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token number"},"2")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),n(" j "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token char"},"'b'")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"i = '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"i")]),s("span",{class:"token string"},", j = "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"j")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")"),n("   "),s("span",{class:"token comment"},'// prints: "i = 2, j = b"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// for 表达式, EOP. for yield 返回新的结果")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" doubles "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"("),n("i "),s("span",{class:"token keyword"},"<-"),n(" ints"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"yield"),n(" i "),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token number"},"2")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" doubles "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"("),n("i "),s("span",{class:"token keyword"},"<-"),n(" ints"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"yield"),n(),s("span",{class:"token punctuation"},"("),n("i "),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" doubles "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"{"),n(" i "),s("span",{class:"token keyword"},"<-"),n(" ints "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"yield"),n(),s("span",{class:"token punctuation"},"("),n("i "),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// for if yield")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" fruits "),s("span",{class:"token operator"},"="),n(" List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"apple"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"banana"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"lime"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"orange"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" fruitLengths "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"("),n("f "),s("span",{class:"token keyword"},"<-"),n(" fruits "),s("span",{class:"token keyword"},"if"),n(" f"),s("span",{class:"token punctuation"},"."),n("length "),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"yield"),n(" f"),s("span",{class:"token punctuation"},"."),n("length")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 作为方法体返回结果")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" between3and10"),s("span",{class:"token punctuation"},"("),n("xs"),s("span",{class:"token operator"},":"),n(" List"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" List"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    x "),s("span",{class:"token keyword"},"<-"),n(" xs")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"if"),n(" x "),s("span",{class:"token operator"},">="),n(),s("span",{class:"token number"},"3")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"if"),n(" x "),s("span",{class:"token operator"},"<="),n(),s("span",{class:"token number"},"10")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"yield"),n(" x")]),n(`
`),s("span",{class:"line"},[n("between3and10"),s("span",{class:"token punctuation"},"("),n("List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"7"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"11"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// Map for 循环")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" states "),s("span",{class:"token operator"},"="),n(" Map"),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token string"},'"AK"'),n(),s("span",{class:"token operator"},"->"),n(),s("span",{class:"token string"},'"Alaska"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token string"},'"AL"'),n(),s("span",{class:"token operator"},"->"),n(),s("span",{class:"token string"},'"Alabama"'),s("span",{class:"token punctuation"},","),n()]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token string"},'"AZ"'),n(),s("span",{class:"token operator"},"->"),n(),s("span",{class:"token string"},'"Arizona"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),n("abbrev"),s("span",{class:"token punctuation"},","),n(" fullName"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"<-"),n(" states"),s("span",{class:"token punctuation"},")"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"abbrev")]),s("span",{class:"token string"},": "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"fullName")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,null,-1)])),tab1:e(({value:t,isActive:l})=>a[27]||(a[27]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" ints "),s("span",{class:"token operator"},"="),n(" List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// p <- e, for 循环生成模板")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"for"),n(" i "),s("span",{class:"token keyword"},"<-"),n(" ints "),s("span",{class:"token keyword"},"do"),n(" println"),s("span",{class:"token punctuation"},"("),n("i"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 嵌套 for 循环, 执行 2x2x2 = 8 次")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"for")]),n(`
`),s("span",{class:"line"},[n("  i "),s("span",{class:"token keyword"},"<-"),n(),s("span",{class:"token number"},"1"),n(" to "),s("span",{class:"token number"},"2")]),n(`
`),s("span",{class:"line"},[n("  j "),s("span",{class:"token keyword"},"<-"),n(),s("span",{class:"token char"},"'a'"),n(" to "),s("span",{class:"token char"},"'b'")]),n(`
`),s("span",{class:"line"},[n("  k "),s("span",{class:"token keyword"},"<-"),n(),s("span",{class:"token number"},"1"),n(" to "),s("span",{class:"token number"},"10"),n(" by "),s("span",{class:"token number"},"5")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"do")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"i = '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"i")]),s("span",{class:"token string"},", j = "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"j")]),s("span",{class:"token string"},", k = "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"k")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 循环中增加条件, 支持多条件")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"for")]),n(`
`),s("span",{class:"line"},[n("  i "),s("span",{class:"token keyword"},"<-"),n(" ints")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),n(" i "),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"2")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"do")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),n("i"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 嵌套 for 循环 + 条件")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"for")]),n(`
`),s("span",{class:"line"},[n("  i "),s("span",{class:"token keyword"},"<-"),n(),s("span",{class:"token number"},"1"),n(" to "),s("span",{class:"token number"},"3")]),n(`
`),s("span",{class:"line"},[n("  j "),s("span",{class:"token keyword"},"<-"),n(),s("span",{class:"token char"},"'a'"),n(" to "),s("span",{class:"token char"},"'c'")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),n(" i "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token number"},"2")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),n(" j "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token char"},"'b'")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"do")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"i = '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"i")]),s("span",{class:"token string"},", j = "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"j")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// for yield 返回新的结果")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" doubles "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"for"),n(" i "),s("span",{class:"token keyword"},"<-"),n(" ints "),s("span",{class:"token keyword"},"yield"),n(" i "),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token number"},"2")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" doubles "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"("),n("i "),s("span",{class:"token keyword"},"<-"),n(" ints"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"yield"),n(" i "),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token number"},"2")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" doubles "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"("),n("i "),s("span",{class:"token keyword"},"<-"),n(" ints"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"yield"),n(),s("span",{class:"token punctuation"},"("),n("i "),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" doubles "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"{"),n(" i "),s("span",{class:"token keyword"},"<-"),n(" ints "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"yield"),n(),s("span",{class:"token punctuation"},"("),n("i "),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// for if yield")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" fruits "),s("span",{class:"token operator"},"="),n(" List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"apple"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"banana"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"lime"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"orange"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" fruitLengths "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"for")]),n(`
`),s("span",{class:"line"},[n("  f "),s("span",{class:"token keyword"},"<-"),n(" fruits")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"if"),n(" f"),s("span",{class:"token punctuation"},"."),n("length "),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"4")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"yield")]),n(`
`),s("span",{class:"line"},[n("  f"),s("span",{class:"token punctuation"},"."),n("length")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 作为方法体返回结果")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" between3and10"),s("span",{class:"token punctuation"},"("),n("xs"),s("span",{class:"token operator"},":"),n(" List"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" List"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"for")]),n(`
`),s("span",{class:"line"},[n("    x "),s("span",{class:"token keyword"},"<-"),n(" xs")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"if"),n(" x "),s("span",{class:"token operator"},">="),n(),s("span",{class:"token number"},"3")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"if"),n(" x "),s("span",{class:"token operator"},"<="),n(),s("span",{class:"token number"},"10")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"yield"),n(" x")]),n(`
`),s("span",{class:"line"},[n("between3and10"),s("span",{class:"token punctuation"},"("),n("List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"7"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"11"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// Map for 循环")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" states "),s("span",{class:"token operator"},"="),n(" Map"),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token string"},'"AK"'),n(),s("span",{class:"token operator"},"->"),n(),s("span",{class:"token string"},'"Alaska"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token string"},'"AL"'),n(),s("span",{class:"token operator"},"->"),n(),s("span",{class:"token string"},'"Alabama"'),s("span",{class:"token punctuation"},","),n()]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token string"},'"AZ"'),n(),s("span",{class:"token operator"},"->"),n(),s("span",{class:"token string"},'"Arizona"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"("),n("abbrev"),s("span",{class:"token punctuation"},","),n(" fullName"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"<-"),n(" states "),s("span",{class:"token keyword"},"do"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"abbrev")]),s("span",{class:"token string"},": "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"fullName")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[136]||(a[136]=s("h3",{id:"while-循环",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#while-循环"},[s("span",null,"while 循环")])],-1)),o(p,{id:"590",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[28]||(a[28]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[29]||(a[29]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[30]||(a[30]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"var"),n(" x "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"1")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"while"),n(),s("span",{class:"token punctuation"},"("),n("x "),s("span",{class:"token operator"},"<"),n(),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  x "),s("span",{class:"token operator"},"+="),n(),s("span",{class:"token number"},"1")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1),s("p",null,null,-1)])),tab1:e(({value:t,isActive:l})=>a[31]||(a[31]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"var"),n(" x "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"1")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"while")]),n(`
`),s("span",{class:"line"},[n("  x "),s("span",{class:"token operator"},"<"),n(),s("span",{class:"token number"},"3")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"do")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  x "),s("span",{class:"token operator"},"+="),n(),s("span",{class:"token number"},"1")]),n(`
`),s("span",{class:"line"})])])],-1),s("p",null,null,-1)])),_:1}),a[137]||(a[137]=c('<h3 id="match-表达式" tabindex="-1"><a class="header-anchor" href="#match-表达式"><span>match 表达式</span></a></h3><p>match 表达式支持匹配的类型：</p><ul><li>普通常量：<code>case 3 =&gt;</code></li><li>集合：<code>case List(els : _*) =&gt;</code></li><li>Tuple：<code>case (x, y) =&gt;</code></li><li>构造方法：<code>case Person(first, last) =&gt;</code></li><li>类：<code>case p: Person =&gt;</code></li></ul><p><strong>match 的类型没用和 case 中的类型匹配，则会抛出 MatchError。</strong></p>',4)),o(p,{id:"640",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[32]||(a[32]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[33]||(a[33]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[34]||(a[34]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" i "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"1")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 作为表达式返回结果")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" result "),s("span",{class:"token operator"},"="),n(" i "),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"one"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"2"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"two"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// _ 表示任意")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"other"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("i "),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"one"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"2"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"two"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"other"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 变量匹配(变量名大写) + 获取未匹配的变量值")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" N "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"42")]),n(`
`),s("span",{class:"line"},[n("i "),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"0"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"1"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"2"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" N "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"42"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" n "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"You gave me: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"n")]),s("span",{class:"token string"},'"')]),n(),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 多种情况匹配 ")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" evenOrOdd "),s("span",{class:"token operator"},"="),n(" i "),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"3"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"5"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"7"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"9"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"odd"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"2"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"4"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"6"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"8"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"10"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"even"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"some other number"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 结合 if 匹配")]),n(`
`),s("span",{class:"line"},[n("i "),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"one, a lonely number"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" x "),s("span",{class:"token keyword"},"if"),n(" x "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token number"},"2"),n(),s("span",{class:"token operator"},"||"),n(" x "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token number"},"3"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"two’s company, three’s a crowd"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" x "),s("span",{class:"token keyword"},"if"),n(" x "),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"3"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"4+, that’s a party"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"i’m guessing your number is zero or less"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 范围匹配")]),n(`
`),s("span",{class:"line"},[n("i "),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" a "),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token number"},"0"),n(" to "),s("span",{class:"token number"},"9"),n(" contains a "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"0-9 range: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"a")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" b "),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token number"},"10"),n(" to "),s("span",{class:"token number"},"19"),n(" contains b "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"10-19 range: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"b")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" c "),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token number"},"20"),n(" to "),s("span",{class:"token number"},"29"),n(" contains c "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"20-29 range: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"c")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Hmmm..."'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 类型匹配")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" p "),s("span",{class:"token operator"},"="),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Fred"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("p "),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Person"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"if"),n(" name "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'"Fred"'),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"},' says, Yubba dubba doo"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Person"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"if"),n(" name "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'"Bam Bam"'),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"},' says, Bam bam!"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Watch the Flintstones!"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 作为方法体")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" getClassAsString"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Any"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(" x "),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" s"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},`"'`),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"s")]),s("span",{class:"token string"},`' is a String"`)])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" i"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"Int"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" d"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"Double"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" l"),s("span",{class:"token operator"},":"),n(" List"),s("span",{class:"token punctuation"},"["),n("_"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"List"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"Unknown"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("getClassAsString"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("getClassAsString"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"hello"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("getClassAsString"),s("span",{class:"token punctuation"},"("),n("List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 将匹配的值绑定到变量")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Animal "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"class"),n(" Cat"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Animal "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" meow"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Meow"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"class"),n(" Dog"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Animal "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" bark"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Bark"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" speak"),s("span",{class:"token punctuation"},"("),n("animal"),s("span",{class:"token operator"},":"),n(" Animal"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" animal "),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" c @ Cat"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"if"),n(" name "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'"Felix"'),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"}," says, "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("c"),s("span",{class:"token punctuation"},"."),n("meow")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'!"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" d @ Dog"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"if"),n(" name "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'"Rex"'),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"}," says, "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("d"),s("span",{class:"token punctuation"},"."),n("bark")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'!"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},`"I don't know you!"`),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("speak"),s("span",{class:"token punctuation"},"("),n("Cat"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Felix"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token comment"},'// "Felix says, Meow!"')]),n(`
`),s("span",{class:"line"},[n("speak"),s("span",{class:"token punctuation"},"("),n("Dog"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Rex"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n("   "),s("span",{class:"token comment"},'// "Rex says, Bark!"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" pattern"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token operator"},":"),n(" Matchable"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(" x "),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// constant patterns")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"0"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"zero"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token boolean"},"true"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"true"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token string"},'"hello"'),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},`"you said 'hello'"`)]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Nil "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"an empty List"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// sequence patterns")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},","),n(" _"),s("span",{class:"token punctuation"},","),n(" _"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"a 3-element list with 0 as the first element"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(" _"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"list, starts with 1, has any number of elements"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Vector"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(" _"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"vector, starts w/ 1, has any number of elements"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// tuple patterns")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token punctuation"},"("),n("a"),s("span",{class:"token punctuation"},","),n(" b"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"got '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"a")]),s("span",{class:"token string"}," and "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"b")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token punctuation"},"("),n("a"),s("span",{class:"token punctuation"},","),n(" b"),s("span",{class:"token punctuation"},","),n(" c"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"got '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"a")]),s("span",{class:"token string"},", "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"b")]),s("span",{class:"token string"},", and "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"c")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// constructor patterns")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Person"),s("span",{class:"token punctuation"},"("),n("first"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"Alexander"'),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"Alexander, first name = '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"first")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Dog"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Zeus"'),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"found a dog named Zeus"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// type test patterns")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" s"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"got a string: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"s")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" i"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"got an int: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"i")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" f"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Float"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"got a float: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"f")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" a"),s("span",{class:"token operator"},":"),n(" Array"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"array of int: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("a"),s("span",{class:"token punctuation"},"."),n("mkString"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'","'),s("span",{class:"token punctuation"},")")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" as"),s("span",{class:"token operator"},":"),n(" Array"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"string array: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("as"),s("span",{class:"token punctuation"},"."),n("mkString"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'","'),s("span",{class:"token punctuation"},")")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" d"),s("span",{class:"token operator"},":"),n(" Dog "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"dog: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("d"),s("span",{class:"token punctuation"},"."),n("name")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" list"),s("span",{class:"token operator"},":"),n(" List"),s("span",{class:"token punctuation"},"["),s("span",{class:"token operator"},"?"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"got a List: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"list")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" m"),s("span",{class:"token operator"},":"),n(" Map"),s("span",{class:"token punctuation"},"["),s("span",{class:"token operator"},"?"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token operator"},"?"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"=>"),n(" m"),s("span",{class:"token punctuation"},"."),n("toString")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// the default wildcard pattern")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"Unknown"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,null,-1)])),tab1:e(({value:t,isActive:l})=>a[35]||(a[35]=[s("p",null,[n("相比 Scala2，省略了 match 后的 "),s("code",null,"{}")],-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" i "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"1")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 作为表达式返回结果")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" result "),s("span",{class:"token operator"},"="),n(" i "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"one"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"2"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"two"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// _ 表示任意")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"other"')]),n(`
`),s("span",{class:"line"},[n("i "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"one"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"2"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"two"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"other"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 变量匹配(变量名大写) + 获取未匹配的变量值")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" N "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"42")]),n(`
`),s("span",{class:"line"},[n("i "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"0"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"1"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"2"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" N "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"42"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" n "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"You gave me: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"n")]),s("span",{class:"token string"},'"')]),n(),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 多种情况匹配 ")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" evenOrOdd "),s("span",{class:"token operator"},"="),n(" i "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"3"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"5"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"7"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"9"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"odd"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"2"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"4"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"6"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"8"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"10"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"even"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"some other number"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 结合 if 匹配")]),n(`
`),s("span",{class:"line"},[n("i "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"one, a lonely number"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" x "),s("span",{class:"token keyword"},"if"),n(" x "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token number"},"2"),n(),s("span",{class:"token operator"},"||"),n(" x "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token number"},"3"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"two’s company, three’s a crowd"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" x "),s("span",{class:"token keyword"},"if"),n(" x "),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"3"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"4+, that’s a party"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"i’m guessing your number is zero or less"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 范围匹配")]),n(`
`),s("span",{class:"line"},[n("i "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" a "),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token number"},"0"),n(" to "),s("span",{class:"token number"},"9"),n(" contains a "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"0-9 range: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"a")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" b "),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token number"},"10"),n(" to "),s("span",{class:"token number"},"19"),n(" contains b "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"10-19 range: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"b")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" c "),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token number"},"20"),n(" to "),s("span",{class:"token number"},"29"),n(" contains c "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"20-29 range: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"c")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Hmmm..."'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 类型匹配")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" p "),s("span",{class:"token operator"},"="),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Fred"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("p "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Person"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"if"),n(" name "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'"Fred"'),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"},' says, Yubba dubba doo"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Person"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"if"),n(" name "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'"Bam Bam"'),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"},' says, Bam bam!"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Watch the Flintstones!"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 作为方法体")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" getClassAsString"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token operator"},":"),n(" Matchable"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(" x "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" s"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},`"'`),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"s")]),s("span",{class:"token string"},`' is a String"`)])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" i"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"Int"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" d"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"Double"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" l"),s("span",{class:"token operator"},":"),n(" List"),s("span",{class:"token punctuation"},"["),s("span",{class:"token operator"},"?"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"List"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"Unknown"')]),n(`
`),s("span",{class:"line"},[n("getClassAsString"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("getClassAsString"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"hello"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("getClassAsString"),s("span",{class:"token punctuation"},"("),n("List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 将匹配的值绑定到变量")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Animal"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"class"),n(" Cat"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Animal"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" meow"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Meow"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"class"),n(" Dog"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Animal"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" bark"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Bark"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" speak"),s("span",{class:"token punctuation"},"("),n("animal"),s("span",{class:"token operator"},":"),n(" Animal"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" animal "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" c @ Cat"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"if"),n(" name "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'"Felix"'),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"}," says, "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("c"),s("span",{class:"token punctuation"},"."),n("meow")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'!"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" d @ Dog"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"if"),n(" name "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'"Rex"'),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"}," says, "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("d"),s("span",{class:"token punctuation"},"."),n("bark")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'!"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},`"I don't know you!"`),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("speak"),s("span",{class:"token punctuation"},"("),n("Cat"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Felix"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token comment"},'// "Felix says, Meow!"')]),n(`
`),s("span",{class:"line"},[n("speak"),s("span",{class:"token punctuation"},"("),n("Dog"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Rex"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n("   "),s("span",{class:"token comment"},'// "Rex says, Bark!"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" pattern"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token operator"},":"),n(" Matchable"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(" x "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// constant patterns")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"0"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"zero"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token boolean"},"true"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"true"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token string"},'"hello"'),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},`"you said 'hello'"`)]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Nil "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"an empty List"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// sequence patterns")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},","),n(" _"),s("span",{class:"token punctuation"},","),n(" _"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"a 3-element list with 0 as the first element"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(" _"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"list, starts with 1, has any number of elements"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Vector"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(" _"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"vector, starts w/ 1, has any number of elements"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// tuple patterns")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token punctuation"},"("),n("a"),s("span",{class:"token punctuation"},","),n(" b"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"got '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"a")]),s("span",{class:"token string"}," and "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"b")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token punctuation"},"("),n("a"),s("span",{class:"token punctuation"},","),n(" b"),s("span",{class:"token punctuation"},","),n(" c"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"got '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"a")]),s("span",{class:"token string"},", "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"b")]),s("span",{class:"token string"},", and "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"c")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// constructor patterns")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Person"),s("span",{class:"token punctuation"},"("),n("first"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"Alexander"'),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"Alexander, first name = '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"first")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Dog"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Zeus"'),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"found a dog named Zeus"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// type test patterns")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" s"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"got a string: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"s")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" i"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"got an int: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"i")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" f"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Float"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"got a float: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"f")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" a"),s("span",{class:"token operator"},":"),n(" Array"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"array of int: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("a"),s("span",{class:"token punctuation"},"."),n("mkString"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'","'),s("span",{class:"token punctuation"},")")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" as"),s("span",{class:"token operator"},":"),n(" Array"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"string array: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("as"),s("span",{class:"token punctuation"},"."),n("mkString"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'","'),s("span",{class:"token punctuation"},")")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" d"),s("span",{class:"token operator"},":"),n(" Dog "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"dog: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("d"),s("span",{class:"token punctuation"},"."),n("name")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" list"),s("span",{class:"token operator"},":"),n(" List"),s("span",{class:"token punctuation"},"["),s("span",{class:"token operator"},"?"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"got a List: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"list")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" m"),s("span",{class:"token operator"},":"),n(" Map"),s("span",{class:"token punctuation"},"["),s("span",{class:"token operator"},"?"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token operator"},"?"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"=>"),n(" m"),s("span",{class:"token punctuation"},"."),n("toString")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// the default wildcard pattern")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"Unknown"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,[s("strong",null,"仅 Scala 3 支持")],-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"// 链式匹配")]),n(`
`),s("span",{class:"line"},[n("i "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" odd"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token keyword"},"if"),n(" odd "),s("span",{class:"token operator"},"%"),n(),s("span",{class:"token number"},"2"),n(),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"odd"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" even"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token keyword"},"if"),n(" even "),s("span",{class:"token operator"},"%"),n(),s("span",{class:"token number"},"2"),n(),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token number"},"0"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"even"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"not an integer"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token string"},'"even"'),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token boolean"},"true")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token boolean"},"false")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 属性 match")]),n(`
`),s("span",{class:"line"},[n("List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"."),n("map"),s("span",{class:"token punctuation"},"("),n("_ "),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"."),n("headOption")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"."),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"case"),n(" Some"),s("span",{class:"token punctuation"},"("),n("value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"The head is: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"value")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"case"),n(" None "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"The list is empty"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[138]||(a[138]=s("h3",{id:"try-catch-finally",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#try-catch-finally"},[s("span",null,"try/catch/finally")])],-1)),o(p,{id:"663",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[36]||(a[36]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[37]||(a[37]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[38]||(a[38]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"try"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  writeTextToFile"),s("span",{class:"token punctuation"},"("),n("text"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"catch"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" ioe"),s("span",{class:"token operator"},":"),n(" IOException "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Got an IOException."'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" nfe"),s("span",{class:"token operator"},":"),n(" NumberFormatException "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Got a NumberFormatException."'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"finally"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Clean up your resources here."'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>a[39]||(a[39]=[s("p",null,[n("相比 Scala2，省略了 match 后的 "),s("code",null,"{}")],-1),s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"try")]),n(`
`),s("span",{class:"line"},[n("  writeTextToFile"),s("span",{class:"token punctuation"},"("),n("text"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"catch")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" ioe"),s("span",{class:"token operator"},":"),n(" IOException "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Got an IOException."'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" nfe"),s("span",{class:"token operator"},":"),n(" NumberFormatException "),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Got a NumberFormatException."'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"finally")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Clean up your resources here."'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1),s("p",null,null,-1)])),_:1}),a[139]||(a[139]=c(`<h2 id="domain-modeling" tabindex="-1"><a class="header-anchor" href="#domain-modeling"><span>Domain Modeling</span></a></h2><h3 id="tools" tabindex="-1"><a class="header-anchor" href="#tools"><span>Tools</span></a></h3><p>Scala 提供了许多结构，以便进行建模。</p><ul><li>Class</li><li>Object</li><li>Companion Object</li><li>Trait</li><li>Abstract Class</li><li>Enum（<strong>仅Scala 3</strong>）</li><li>Case Class</li><li>Case Object</li></ul><h4 id="class" tabindex="-1"><a class="header-anchor" href="#class"><span>Class</span></a></h4><p>定义一个 <code>Class</code> 的语法，<code>var</code> 表示属性可变的，使用 <code>val</code> 表示属性仅可读。</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">class</span> Person<span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token keyword">var</span> vocation<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> Book<span class="token punctuation">(</span><span class="token keyword">var</span> title<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token keyword">var</span> author<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token keyword">var</span> year<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> Movie<span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token keyword">var</span> director<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token keyword">var</span> year<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,7)),o(p,{id:"735",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[40]||(a[40]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[41]||(a[41]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[42]||(a[42]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" p "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"oycm"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"Java Development"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("p"),s("span",{class:"token punctuation"},"."),n("name")]),n(`
`),s("span",{class:"line"},[n("p"),s("span",{class:"token punctuation"},"."),n("vocation")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 修改")]),n(`
`),s("span",{class:"line"},[n("p"),s("span",{class:"token punctuation"},"."),n("name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"zs"')]),n(`
`),s("span",{class:"line"},[n("p"),s("span",{class:"token punctuation"},"."),n("vocation "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"C++ Development"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>a[43]||(a[43]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" p "),s("span",{class:"token operator"},"="),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"oycm"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"Java Development"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("p"),s("span",{class:"token punctuation"},"."),n("name")]),n(`
`),s("span",{class:"line"},[n("p"),s("span",{class:"token punctuation"},"."),n("vocation")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 修改")]),n(`
`),s("span",{class:"line"},[n("p"),s("span",{class:"token punctuation"},"."),n("name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"zs"')]),n(`
`),s("span",{class:"line"},[n("p"),s("span",{class:"token punctuation"},"."),n("vocation "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"C++ Development"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[140]||(a[140]=s("p",null,[s("strong",null,"定义属性和方法")],-1)),o(p,{id:"746",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[44]||(a[44]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[45]||(a[45]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[46]||(a[46]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"var"),n(" firstName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"var"),n(" lastName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"initialization begins"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" fullName "),s("span",{class:"token operator"},"="),n(" firstName "),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token string"},'" "'),n(),s("span",{class:"token operator"},"+"),n(" lastName")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" printFullName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    println"),s("span",{class:"token punctuation"},"("),n("fullName"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},"  printFullName"),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"initialization ends"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[47]||(a[47]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"var"),n(" firstName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"var"),n(" lastName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"initialization begins"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" fullName "),s("span",{class:"token operator"},"="),n(" firstName "),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token string"},'" "'),n(),s("span",{class:"token operator"},"+"),n(" lastName")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" printFullName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    println"),s("span",{class:"token punctuation"},"("),n("fullName"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},"  printFullName"),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"initialization ends"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[141]||(a[141]=s("p",null,[s("strong",null,"定义属性默认参数值")],-1)),o(p,{id:"757",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[48]||(a[48]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[49]||(a[49]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[50]||(a[50]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Socket"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"val"),n(" timeout"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"5000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"val"),n(" linger"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"5000"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" toString "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"timeout: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"timeout")]),s("span",{class:"token string"},", linger: "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"linger")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 创建对象的方式")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Socket"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n("                  "),s("span",{class:"token comment"},"// timeout: 5000, linger: 5000")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Socket"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2500"),s("span",{class:"token punctuation"},")"),n("              "),s("span",{class:"token comment"},"// timeout: 2500, linger: 5000")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Socket"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"10000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"10000"),s("span",{class:"token punctuation"},")"),n("      "),s("span",{class:"token comment"},"// timeout: 10000, linger: 10000")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Socket"),s("span",{class:"token punctuation"},"("),n("timeout "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"10000"),s("span",{class:"token punctuation"},")"),n("   "),s("span",{class:"token comment"},"// timeout: 10000, linger: 5000")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Socket"),s("span",{class:"token punctuation"},"("),n("linger "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"10000"),s("span",{class:"token punctuation"},")"),n("    "),s("span",{class:"token comment"},"// timeout: 5000, linger: 10000")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[51]||(a[51]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Socket"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"val"),n(" timeout"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"5000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"val"),n(" linger"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"5000"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" toString "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"timeout: '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"timeout")]),s("span",{class:"token string"},", linger: "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"linger")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 创建对象的方式")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s "),s("span",{class:"token operator"},"="),n(" Socket"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n("                  "),s("span",{class:"token comment"},"// timeout: 5000, linger: 5000")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s "),s("span",{class:"token operator"},"="),n(" Socket"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2500"),s("span",{class:"token punctuation"},")"),n("              "),s("span",{class:"token comment"},"// timeout: 2500, linger: 5000")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s "),s("span",{class:"token operator"},"="),n(" Socket"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"10000"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"10000"),s("span",{class:"token punctuation"},")"),n("      "),s("span",{class:"token comment"},"// timeout: 10000, linger: 10000")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s "),s("span",{class:"token operator"},"="),n(" Socket"),s("span",{class:"token punctuation"},"("),n("timeout "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"10000"),s("span",{class:"token punctuation"},")"),n("   "),s("span",{class:"token comment"},"// timeout: 10000, linger: 5000")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s "),s("span",{class:"token operator"},"="),n(" Socket"),s("span",{class:"token punctuation"},"("),n("linger "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"10000"),s("span",{class:"token punctuation"},")"),n("    "),s("span",{class:"token comment"},"// timeout: 5000, linger: 10000")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[142]||(a[142]=s("p",null,[s("strong",null,"多种构造方法")],-1)),o(p,{id:"768",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[52]||(a[52]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[53]||(a[53]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[54]||(a[54]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("java"),s("span",{class:"token punctuation"},"."),n("time"),s("span",{class:"token punctuation"},".")]),n("_")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 主要的构造方法")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Student"),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"var"),n(" name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"var"),n(" govtId"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"var"),n(" _applicationDate"),s("span",{class:"token operator"},":"),n(" Option"),s("span",{class:"token punctuation"},"["),n("LocalDate"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"="),n(" None")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"var"),n(" _studentId"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// 构造方法, 也可以执行参数默认值")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("    name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    govtId"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    applicationDate"),s("span",{class:"token operator"},":"),n(" LocalDate")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},","),n(" govtId"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    _applicationDate "),s("span",{class:"token operator"},"="),n(" Some"),s("span",{class:"token punctuation"},"("),n("applicationDate"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("    name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    govtId"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    studentId"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},","),n(" govtId"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    _studentId "),s("span",{class:"token operator"},"="),n(" studentId")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[55]||(a[55]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("java"),s("span",{class:"token punctuation"},"."),n("time"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token operator"},"*")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// [1] the primary constructor")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Student"),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"var"),n(" name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"var"),n(" govtId"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"var"),n(" _applicationDate"),s("span",{class:"token operator"},":"),n(" Option"),s("span",{class:"token punctuation"},"["),n("LocalDate"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"="),n(" None")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"var"),n(" _studentId"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// [2] a constructor for when the student has completed")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// their application")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("    name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    govtId"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    applicationDate"),s("span",{class:"token operator"},":"),n(" LocalDate")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},","),n(" govtId"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    _applicationDate "),s("span",{class:"token operator"},"="),n(" Some"),s("span",{class:"token punctuation"},"("),n("applicationDate"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// [3] a constructor for when the student is approved")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// and now has a student id")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("    name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    govtId"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    studentId"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},","),n(" govtId"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    _studentId "),s("span",{class:"token operator"},"="),n(" studentId")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[143]||(a[143]=s("h4",{id:"object",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#object"},[s("span",null,"Object")])],-1)),a[144]||(a[144]=s("p",null,"Object 是只有一个实例的类。在访问其成员时才进行初始化。",-1)),o(p,{id:"782",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[56]||(a[56]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[57]||(a[57]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[58]||(a[58]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" StringUtils "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" truncate"),s("span",{class:"token punctuation"},"("),n("s"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(" length"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(" s"),s("span",{class:"token punctuation"},"."),n("take"),s("span",{class:"token punctuation"},"("),n("length"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" containsWhitespace"),s("span",{class:"token punctuation"},"("),n("s"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Boolean"),n(),s("span",{class:"token operator"},"="),n(" s"),s("span",{class:"token punctuation"},"."),n("matches"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'".*\\\\s.*"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" isNullOrEmpty"),s("span",{class:"token punctuation"},"("),n("s"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Boolean"),n(),s("span",{class:"token operator"},"="),n(" s "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),n(),s("span",{class:"token operator"},"||"),n(" s"),s("span",{class:"token punctuation"},"."),n("trim"),s("span",{class:"token punctuation"},"."),n("isEmpty")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 使用方式")]),n(`
`),s("span",{class:"line"},[n("StringUtils"),s("span",{class:"token punctuation"},"."),n("truncate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Chuck Bartowski"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 导入所有成员使用")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(" StringUtils"),s("span",{class:"token punctuation"},"."),n("_")]),n(`
`),s("span",{class:"line"},[n("truncate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Chuck Bartowski"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},")"),n("       "),s("span",{class:"token comment"},'// "Chuck"')]),n(`
`),s("span",{class:"line"},[n("containsWhitespace"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Sarah Walker"'),s("span",{class:"token punctuation"},")"),n("   "),s("span",{class:"token comment"},"// true")]),n(`
`),s("span",{class:"line"},[n("isNullOrEmpty"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"John Casey"'),s("span",{class:"token punctuation"},")"),n("          "),s("span",{class:"token comment"},"// false")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 导入指定的成员使用")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(" StringUtils"),s("span",{class:"token punctuation"},"."),s("span",{class:"token punctuation"},"{"),n("truncate"),s("span",{class:"token punctuation"},","),n(" containsWhitespace"),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("truncate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Charles Carmichael"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"7"),s("span",{class:"token punctuation"},")"),n("       "),s("span",{class:"token comment"},'// "Charles"')]),n(`
`),s("span",{class:"line"},[n("containsWhitespace"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Captain Awesome"'),s("span",{class:"token punctuation"},")"),n("   "),s("span",{class:"token comment"},"// true")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 访问属性")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" MathConstants "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" PI "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"3.14159")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" E "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"2.71828")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("println"),s("span",{class:"token punctuation"},"("),n("MathConstants"),s("span",{class:"token punctuation"},"."),n("PI"),s("span",{class:"token punctuation"},")"),n("   "),s("span",{class:"token comment"},"// 3.14159")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[59]||(a[59]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" StringUtils"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" truncate"),s("span",{class:"token punctuation"},"("),n("s"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(" length"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(" s"),s("span",{class:"token punctuation"},"."),n("take"),s("span",{class:"token punctuation"},"("),n("length"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" containsWhitespace"),s("span",{class:"token punctuation"},"("),n("s"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Boolean"),n(),s("span",{class:"token operator"},"="),n(" s"),s("span",{class:"token punctuation"},"."),n("matches"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'".*\\\\s.*"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" isNullOrEmpty"),s("span",{class:"token punctuation"},"("),n("s"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Boolean"),n(),s("span",{class:"token operator"},"="),n(" s "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),n(),s("span",{class:"token operator"},"||"),n(" s"),s("span",{class:"token punctuation"},"."),n("trim"),s("span",{class:"token punctuation"},"."),n("isEmpty")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 使用方式")]),n(`
`),s("span",{class:"line"},[n("StringUtils"),s("span",{class:"token punctuation"},"."),n("truncate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Chuck Bartowski"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 导入所有成员使用")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(" StringUtils"),s("span",{class:"token punctuation"},"."),n("*")]),n(`
`),s("span",{class:"line"},[n("truncate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Chuck Bartowski"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},")"),n("       "),s("span",{class:"token comment"},'// "Chuck"')]),n(`
`),s("span",{class:"line"},[n("containsWhitespace"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Sarah Walker"'),s("span",{class:"token punctuation"},")"),n("   "),s("span",{class:"token comment"},"// true")]),n(`
`),s("span",{class:"line"},[n("isNullOrEmpty"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"John Casey"'),s("span",{class:"token punctuation"},")"),n("          "),s("span",{class:"token comment"},"// false")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 导入指定的成员使用")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(" StringUtils"),s("span",{class:"token punctuation"},"."),s("span",{class:"token punctuation"},"{"),n("truncate"),s("span",{class:"token punctuation"},","),n(" containsWhitespace"),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("truncate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Charles Carmichael"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"7"),s("span",{class:"token punctuation"},")"),n("       "),s("span",{class:"token comment"},'// "Charles"')]),n(`
`),s("span",{class:"line"},[n("containsWhitespace"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Captain Awesome"'),s("span",{class:"token punctuation"},")"),n("   "),s("span",{class:"token comment"},"// true")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 访问属性")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" MathConstants"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" PI "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"3.14159")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" E "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"2.71828")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("println"),s("span",{class:"token punctuation"},"("),n("MathConstants"),s("span",{class:"token punctuation"},"."),n("PI"),s("span",{class:"token punctuation"},")"),n("   "),s("span",{class:"token comment"},"// 3.14159")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[145]||(a[145]=c('<h4 id="companion-object" tabindex="-1"><a class="header-anchor" href="#companion-object"><span>Companion Object</span></a></h4><p>在声明一个类的文件中，还有一个 Object 类，两个类的名称一致。class 类能访问 object 类私有的成员。</p><p>Companion Object 对象用法：</p><ul><li>一个命名空间下的静态方法组</li><li><code>apply</code> 方法，构建对象的工厂模式。<strong>调用该方法可以省略方法名</strong>。</li><li><code>unapply</code>，结构对象，用于匹配模式。<a href="https://docs.scala-lang.org/scala3/reference/changed-features/pattern-matching.html" target="_blank" rel="noopener noreferrer">使用介绍</a></li></ul>',4)),o(p,{id:"816",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[60]||(a[60]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[61]||(a[61]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[62]||(a[62]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"// 为了导入 Pi, pow")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("scala"),s("span",{class:"token punctuation"},"."),n("math"),s("span",{class:"token punctuation"},".")]),n("_")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Circle"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"val"),n(" radius"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" area"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),n(),s("span",{class:"token operator"},"="),n(" Circle"),s("span",{class:"token punctuation"},"."),n("calculateArea"),s("span",{class:"token punctuation"},"("),n("radius"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" Circle "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"def"),n(" calculateArea"),s("span",{class:"token punctuation"},"("),n("radius"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),n(),s("span",{class:"token operator"},"="),n(" Pi "),s("span",{class:"token operator"},"*"),n(" pow"),s("span",{class:"token punctuation"},"("),n("radius"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"2.0"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" circle1 "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Circle"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"5.0"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("circle1"),s("span",{class:"token punctuation"},"."),n("area")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// apply 方法应用")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Person "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"var"),n(" name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'""')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"var"),n(" age "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" toString "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"}," is "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"age")]),s("span",{class:"token string"},' years old"')])]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" Person "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// factory method")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" apply"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Person "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"var"),n(" p "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Person")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("name "),s("span",{class:"token operator"},"="),n(" name")]),n(`
`),s("span",{class:"line"},"    p"),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},"    "),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" apply"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(" age"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Person "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"var"),n(" p "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Person")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("name "),s("span",{class:"token operator"},"="),n(" name")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("age "),s("span",{class:"token operator"},"="),n(" age")]),n(`
`),s("span",{class:"line"},"    p"),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" joe "),s("span",{class:"token operator"},"="),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Joe"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" fred "),s("span",{class:"token operator"},"="),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Fred"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"29"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[63]||(a[63]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"// 为了导入 Pi, pow")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("scala"),s("span",{class:"token punctuation"},"."),n("math"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token operator"},"*")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Circle"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"val"),n(" radius"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" area"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),n(),s("span",{class:"token operator"},"="),n(" Circle"),s("span",{class:"token punctuation"},"."),n("calculateArea"),s("span",{class:"token punctuation"},"("),n("radius"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" Circle"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"def"),n(" calculateArea"),s("span",{class:"token punctuation"},"("),n("radius"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),n(),s("span",{class:"token operator"},"="),n(" Pi "),s("span",{class:"token operator"},"*"),n(" pow"),s("span",{class:"token punctuation"},"("),n("radius"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"2.0"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" circle1 "),s("span",{class:"token operator"},"="),n(" Circle"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"5.0"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("circle1"),s("span",{class:"token punctuation"},"."),n("area")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// apply 方法应用")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Person"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"var"),n(" name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'""')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"var"),n(" age "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" toString "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"}," is "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"age")]),s("span",{class:"token string"},' years old"')])]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" Person"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// factory method")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" apply"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Person "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"var"),n(" p "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Person")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("name "),s("span",{class:"token operator"},"="),n(" name")]),n(`
`),s("span",{class:"line"},"    p"),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" apply"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(" age"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Person "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"var"),n(" p "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Person")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("name "),s("span",{class:"token operator"},"="),n(" name")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("age "),s("span",{class:"token operator"},"="),n(" age")]),n(`
`),s("span",{class:"line"},"    p"),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},"end Person"),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" joe "),s("span",{class:"token operator"},"="),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Joe"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" fred "),s("span",{class:"token operator"},"="),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Fred"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"29"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[146]||(a[146]=s("h4",{id:"trait",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#trait"},[s("span",null,"Trait")])],-1)),a[147]||(a[147]=s("p",null,"类似 Java8 中的接口，有以下特征：",-1)),a[148]||(a[148]=s("ul",null,[s("li",null,"抽象方法和属性"),s("li",null,"实例方法和属性")],-1)),o(p,{id:"842",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[64]||(a[64]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[65]||(a[65]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[66]||(a[66]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"// 作为接口，定义其它实现类的抽象成员")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Employee "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" id"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" firstName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" lastName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 定义抽象成员+实例成员")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" HasLegs "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" numLegs"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" walk"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" stop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Stopped walking"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" HasTail "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" tailColor"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" wagTail"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Tail is wagging"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" stopTail"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Tail is stopped"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 类实现")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" IrishSetter"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" HasLegs "),s("span",{class:"token keyword"},"with"),n(" HasTail "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" numLegs "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"4")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" tailColor "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Red"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" walk"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"I’m walking"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" toString "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"},' is a Dog"')])]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[67]||(a[67]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"// 作为接口，定义其它实现类的抽象成员")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Employee"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" id"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" firstName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" lastName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 定义抽象成员+实例成员")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" HasLegs"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" numLegs"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" walk"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" stop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Stopped walking"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" HasTail"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" tailColor"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" wagTail"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Tail is wagging"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" stopTail"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Tail is stopped"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 类实现")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" IrishSetter"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" HasLegs"),s("span",{class:"token punctuation"},","),n(" HasTail"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" numLegs "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"4")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" tailColor "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Red"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" walk"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"I’m walking"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" toString "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"},' is a Dog"')])]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[149]||(a[149]=s("h4",{id:"abstract-class",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#abstract-class"},[s("span",null,"Abstract Class")])],-1)),a[150]||(a[150]=s("p",null,"一个类需要有抽象成员，可以定义 Trait 或 Abstract 类。大多数情况下使用 Trait 类，两种情况下使用 Abstract 类：",-1)),a[151]||(a[151]=s("ul",null,[s("li",null,"使用构造方法参数创建对象"),s("li",null,"代码将会被 java 使用")],-1)),o(p,{id:"868",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[68]||(a[68]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[69]||(a[69]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[70]||(a[70]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"abstract"),n(),s("span",{class:"token keyword"},"class"),n(" Pet"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" greeting"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" age"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" toString "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"My name is '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"},", I say "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"greeting")]),s("span",{class:"token string"},", and I’m "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"age")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Dog"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"var"),n(" age"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Pet"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" greeting "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Woof"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" d "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Dog"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Fido"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[71]||(a[71]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"abstract"),n(),s("span",{class:"token keyword"},"class"),n(" Pet"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" greeting"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" age"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" toString "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"My name is '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"},", I say "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"greeting")]),s("span",{class:"token string"},", and I’m "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"age")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Dog"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"var"),n(" age"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Pet"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" greeting "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Woof"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" d "),s("span",{class:"token operator"},"="),n(" Dog"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Fido"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,[s("strong",null,"在 Scala 3中，Trait 也可以携带参数")],-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Pet"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" greeting"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" age"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" toString "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"My name is '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"},", I say "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"greeting")]),s("span",{class:"token string"},", and I’m "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"age")]),s("span",{class:"token string"},'"')])]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Dog"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"var"),n(" age"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Pet"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" greeting "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Woof"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" d "),s("span",{class:"token operator"},"="),n(" Dog"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Fido"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[152]||(a[152]=c(`<h4 id="enum-scala-3" tabindex="-1"><a class="header-anchor" href="#enum-scala-3"><span>Enum(Scala 3)</span></a></h4><p>enum 用于定义一组有限命名值组成的类型。</p><p>用于定义 披萨特征的枚举：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">enum</span> CrustSize<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> Small<span class="token punctuation">,</span> Medium<span class="token punctuation">,</span> Large</span>
<span class="line"><span class="token comment">// 相当于下面的简写</span></span>
<span class="line"><span class="token keyword">enum</span> CrustSize<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> Small <span class="token keyword">extends</span> CrustSize</span>
<span class="line">  <span class="token keyword">case</span> Medium <span class="token keyword">extends</span> CrustSize</span>
<span class="line">  <span class="token keyword">case</span> Large <span class="token keyword">extends</span> CrustSize</span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> CrustType<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> Thin<span class="token punctuation">,</span> Thick<span class="token punctuation">,</span> Regular</span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> Topping<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> Cheese<span class="token punctuation">,</span> Pepperoni<span class="token punctuation">,</span> BlackOlives<span class="token punctuation">,</span> GreenOlives<span class="token punctuation">,</span> Onions</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>枚举的特征：属性和方法</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">enum</span> Color<span class="token punctuation">(</span><span class="token keyword">val</span> rgb<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> Red   <span class="token keyword">extends</span> Color<span class="token punctuation">(</span><span class="token number">0xFF0000</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">case</span> Green <span class="token keyword">extends</span> Color<span class="token punctuation">(</span><span class="token number">0x00FF00</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">case</span> Blue  <span class="token keyword">extends</span> Color<span class="token punctuation">(</span><span class="token number">0x0000FF</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> Planet<span class="token punctuation">(</span>mass<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">,</span> radius<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">val</span> G <span class="token operator">=</span> <span class="token number">6.67300</span>E<span class="token operator">-</span><span class="token number">11</span></span>
<span class="line">  <span class="token keyword">def</span> surfaceGravity <span class="token operator">=</span> G <span class="token operator">*</span> mass <span class="token operator">/</span> <span class="token punctuation">(</span>radius <span class="token operator">*</span> radius<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">def</span> surfaceWeight<span class="token punctuation">(</span>otherMass<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">    otherMass <span class="token operator">*</span> surfaceGravity</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">case</span> Mercury <span class="token keyword">extends</span> Planet<span class="token punctuation">(</span><span class="token number">3.303</span>e<span class="token operator">+</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">2.4397e6</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">case</span> Earth   <span class="token keyword">extends</span> Planet<span class="token punctuation">(</span><span class="token number">5.976</span>e<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">6.37814e6</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Scala 枚举应用到 Java：继承 java.lang.Enum</strong></p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">enum</span> Color <span class="token keyword">extends</span> Enum<span class="token punctuation">[</span>Color<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">case</span> Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="case-class" tabindex="-1"><a class="header-anchor" href="#case-class"><span>Case Class</span></a></h4><p><code>case class</code> 定义类的属性都是不可变的。</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Person<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> relation<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> christina <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Christina&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;niece&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>由于 case 字段的不可变性，Scala 编译器为该类生成了许多方法：</p><ul><li><code>unapply</code> 方法，可以直接用于匹配模式，<code>case Person(n, r) =&gt; ...)</code></li><li><code>copy </code> 方法创建实例的修改副本</li><li>重写 <code>equals</code> 和 <code>hashcode</code> 方法</li><li>生成默认的 <code>toString</code> 方法</li></ul>`,13)),o(p,{id:"930",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[72]||(a[72]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[73]||(a[73]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[74]||(a[74]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"// match 匹配模式")]),n(`
`),s("span",{class:"line"},[n("christina "),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Person"),s("span",{class:"token punctuation"},"("),n("n"),s("span",{class:"token punctuation"},","),n(" r"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"name is "'),n(),s("span",{class:"token operator"},"+"),n(" n"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 重写 equals 和 hashcode 方法")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" hannah "),s("span",{class:"token operator"},"="),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Christina"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"niece"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("christina "),s("span",{class:"token operator"},"=="),n(" hannah       "),s("span",{class:"token comment"},"// true")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 默认 toString 方法")]),n(`
`),s("span",{class:"line"},[n("println"),s("span",{class:"token punctuation"},"("),n("christina"),s("span",{class:"token punctuation"},")"),n("        "),s("span",{class:"token comment"},"// Person(Christina,niece)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// copy")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" o "),s("span",{class:"token operator"},"="),n(" hannah"),s("span",{class:"token punctuation"},"."),n("copy"),s("span",{class:"token punctuation"},"("),n("name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"oycm"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[75]||(a[75]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[n("christina "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Person"),s("span",{class:"token punctuation"},"("),n("n"),s("span",{class:"token punctuation"},","),n(" r"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"name is "'),n(),s("span",{class:"token operator"},"+"),n(" n"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" hannah "),s("span",{class:"token operator"},"="),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Christina"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"niece"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("christina "),s("span",{class:"token operator"},"=="),n(" hannah       "),s("span",{class:"token comment"},"// true")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("println"),s("span",{class:"token punctuation"},"("),n("christina"),s("span",{class:"token punctuation"},")"),n("        "),s("span",{class:"token comment"},"// Person(Christina,niece)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// copy")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" o "),s("span",{class:"token operator"},"="),n(" hannah"),s("span",{class:"token punctuation"},"."),n("copy"),s("span",{class:"token punctuation"},"("),n("name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"oycm"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[153]||(a[153]=c(`<h4 id="case-object" tabindex="-1"><a class="header-anchor" href="#case-object"><span>Case Object</span></a></h4><p><code>case object</code> 就像 <code>object</code> 类，像 <code>case class</code> 比 <code>class</code> 类多一些特点。<code>case object</code> 有以下特点：</p><ul><li>可序列化</li><li>有默认的 <code>hashCode</code> 实现</li><li><code>toString</code> 实现</li><li>用于创建枚举</li><li>不能有构造方法参数</li><li>用于传递不可变的消息</li></ul><p><strong>定义消息的类型</strong></p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">sealed</span> <span class="token keyword">trait</span> Message</span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> PlaySong<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Message</span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> IncreaseVolume<span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Message</span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> DecreaseVolume<span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Message</span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">object</span> StopPlaying <span class="token keyword">extends</span> Message</span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,5)),o(p,{id:"980",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[76]||(a[76]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[77]||(a[77]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[78]||(a[78]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" handleMessages"),s("span",{class:"token punctuation"},"("),n("message"),s("span",{class:"token operator"},":"),n(" Message"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" message "),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" PlaySong"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),n("         "),s("span",{class:"token keyword"},"=>"),n(" playSong"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" IncreaseVolume"),s("span",{class:"token punctuation"},"("),n("amount"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(" changeVolume"),s("span",{class:"token punctuation"},"("),n("amount"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" DecreaseVolume"),s("span",{class:"token punctuation"},"("),n("amount"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(" changeVolume"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"-"),n("amount"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" StopPlaying            "),s("span",{class:"token keyword"},"=>"),n(" stopPlayingSong"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>a[79]||(a[79]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" handleMessages"),s("span",{class:"token punctuation"},"("),n("message"),s("span",{class:"token operator"},":"),n(" Message"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" message "),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" PlaySong"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")"),n("         "),s("span",{class:"token keyword"},"=>"),n(" playSong"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" IncreaseVolume"),s("span",{class:"token punctuation"},"("),n("amount"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(" changeVolume"),s("span",{class:"token punctuation"},"("),n("amount"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" DecreaseVolume"),s("span",{class:"token punctuation"},"("),n("amount"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(" changeVolume"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"-"),n("amount"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" StopPlaying            "),s("span",{class:"token keyword"},"=>"),n(" stopPlayingSong"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[154]||(a[154]=s("h3",{id:"oop-modeling",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#oop-modeling"},[s("span",null,"OOP Modeling")])],-1)),a[155]||(a[155]=s("p",null,[n("OOP 主要使用 "),s("code",null,"trait"),n(" 和 "),s("code",null,"class"),n(" 关键字。")],-1)),a[156]||(a[156]=s("p",null,[s("code",null,"traid"),n("：可以用作简单的 "),s("code",null,"interface"),n(" ，但它可以包含抽象的和具体的方法和属性。")],-1)),o(p,{id:"997",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[80]||(a[80]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[81]||(a[81]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[82]||(a[82]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Speaker "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" speak"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" TailWagger "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" startTail"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"tail is wagging"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" stopTail"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"tail is stopped"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Runner "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" startRunning"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"I’m running"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" stopRunning"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Stopped running"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 继承 trait")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Dog"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Speaker "),s("span",{class:"token keyword"},"with"),n(" TailWagger "),s("span",{class:"token keyword"},"with"),n(" Runner "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" speak"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Woof!"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Cat"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Speaker "),s("span",{class:"token keyword"},"with"),n(" TailWagger "),s("span",{class:"token keyword"},"with"),n(" Runner "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" speak"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Meow"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" startRunning"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Yeah ... I don’t run"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" stopRunning"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"No need to stop"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[83]||(a[83]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Speaker"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" speak"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" TailWagger"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" startTail"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"tail is wagging"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" stopTail"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"tail is stopped"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Runner"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" startRunning"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"I’m running"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" stopRunning"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Stopped running"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 继承 trait")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Dog"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Speaker"),s("span",{class:"token punctuation"},","),n(" TailWagger"),s("span",{class:"token punctuation"},","),n(" Runner"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" speak"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Woof!"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Cat"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Speaker"),s("span",{class:"token punctuation"},","),n(" TailWagger"),s("span",{class:"token punctuation"},","),n(" Runner"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" speak"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Meow"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" startRunning"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Yeah ... I don’t run"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token keyword"},"def"),n(" stopRunning"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"No need to stop"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,null,-1)])),_:1}),a[157]||(a[157]=s("p",null,[s("code",null,"class"),n("：")],-1)),o(p,{id:"1011",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[84]||(a[84]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[85]||(a[85]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[86]||(a[86]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"var"),n(" firstName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"var"),n(" lastName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" printFullName"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"firstName")]),s("span",{class:"token string"}," "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"lastName")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" p "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"John"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"Stephens"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("println"),s("span",{class:"token punctuation"},"("),n("p"),s("span",{class:"token punctuation"},"."),n("firstName"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("p"),s("span",{class:"token punctuation"},"."),n("lastName "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Legend"')]),n(`
`),s("span",{class:"line"},[n("p"),s("span",{class:"token punctuation"},"."),n("printFullName"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" p "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"John"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"Stephens"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,null,-1)])),tab1:e(({value:t,isActive:l})=>a[87]||(a[87]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"var"),n(" firstName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"var"),n(" lastName"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" printFullName"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"firstName")]),s("span",{class:"token string"}," "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"lastName")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" p "),s("span",{class:"token operator"},"="),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"John"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"Stephens"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("println"),s("span",{class:"token punctuation"},"("),n("p"),s("span",{class:"token punctuation"},"."),n("firstName"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("p"),s("span",{class:"token punctuation"},"."),n("lastName "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Legend"')]),n(`
`),s("span",{class:"line"},[n("p"),s("span",{class:"token punctuation"},"."),n("printFullName"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" p "),s("span",{class:"token operator"},"="),n(" Person"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"John"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"Stephens"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,null,-1)])),_:1}),a[158]||(a[158]=c('<h4 id="trait-1" tabindex="-1"><a class="header-anchor" href="#trait-1"><span>Trait</span></a></h4><p>Scala 中用 <code>trait</code> 来分解具体。</p><ul><li>抽象成员要求子类必须实现</li><li>实例成员可以提供给子类使用</li><li>抽象方法 <code>def m(): T</code></li><li>抽象属性 <code>val x: T</code></li><li>泛型抽象属性 <code>type T</code>，边界泛型 <code>type T &lt;: S</code></li><li><strong>Scala 3</strong>：给的抽象类型 <code>given t: T</code></li></ul>',3)),o(p,{id:"1063",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[88]||(a[88]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[89]||(a[89]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[90]||(a[90]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Showable "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" show"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" showHtml "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"<p>"'),n(),s("span",{class:"token operator"},"+"),n(" show "),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token string"},'"</p>"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// Document 继承 Showable")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Document"),s("span",{class:"token punctuation"},"("),n("text"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Showable "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" show "),s("span",{class:"token operator"},"="),n(" text")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>a[91]||(a[91]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" Showable"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" show"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" showHtml "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"<p>"'),n(),s("span",{class:"token operator"},"+"),n(" show "),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token string"},'"</p>"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// Document 继承 Showable")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" Document"),s("span",{class:"token punctuation"},"("),n("text"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Showable"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" show "),s("span",{class:"token operator"},"="),n(" text")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[159]||(a[159]=s("h4",{id:"mixin-composition",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#mixin-composition"},[s("span",null,"Mixin Composition")])],-1)),a[160]||(a[160]=s("p",null,[n("Scala 的 "),s("code",null,"trait"),n(" 不仅支持抽象和具体的定义，还支持组合多个 "),s("code",null,"trait"),n("，这称为 "),s("code",null,"Mixin Composition"),n("。")],-1)),o(p,{id:"1077",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[92]||(a[92]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[93]||(a[93]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[94]||(a[94]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" GreetingService "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" translate"),s("span",{class:"token punctuation"},"("),n("text"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" sayHello "),s("span",{class:"token operator"},"="),n(" translate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Hello"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" TranslationService "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" translate"),s("span",{class:"token punctuation"},"("),n("text"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"..."')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// ComposedService 组合了 2 个 trait")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" ComposedService "),s("span",{class:"token keyword"},"extends"),n(" GreetingService "),s("span",{class:"token keyword"},"with"),n(" TranslationService")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[95]||(a[95]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" GreetingService"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" translate"),s("span",{class:"token punctuation"},"("),n("text"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" sayHello "),s("span",{class:"token operator"},"="),n(" translate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Hello"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" TranslationService"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" translate"),s("span",{class:"token punctuation"},"("),n("text"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"..."')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// ComposedService 组合了 2 个 trait")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" ComposedService "),s("span",{class:"token keyword"},"extends"),n(" GreetingService"),s("span",{class:"token punctuation"},","),n(" TranslationService")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[161]||(a[161]=c('<h4 id="class-1" tabindex="-1"><a class="header-anchor" href="#class-1"><span>Class</span></a></h4><p><code>class</code> 与 <code>trait</code> 一样，可以 <code>extends</code> 多个 <code>trait</code>，但是只能由一个 <code>super class</code>。</p>',2)),o(p,{id:"1091",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[96]||(a[96]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[97]||(a[97]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[98]||(a[98]=[s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"class"),s("th",null,"语法")])]),s("tbody",null,[s("tr",null,[s("td",null,"trait"),s("td",null,"trait T1, trait T2, trait T3")]),s("tr",null,[s("td",null,"Composition trait"),s("td",null,"S1 extends T1 with T2 with ...")]),s("tr",null,[s("td",null,"class"),s("td",null,"C extends S1 with T2 with ...")]),s("tr",null,[s("td",null,"实例"),s("td",null,"new C()")]),s("tr",null,[s("td",null,"实例"),s("td",null,"new C() with T3")])])],-1)])),tab1:e(({value:t,isActive:l})=>a[99]||(a[99]=[s("p",null,[s("strong",null,"支持 open class")],-1),s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"class"),s("th",null,"语法")])]),s("tbody",null,[s("tr",null,[s("td",null,"trait"),s("td",null,"trait T1, trait T2, trait T3")]),s("tr",null,[s("td",null,"Composition trait"),s("td",null,"S1 extends T1, T2, ...")]),s("tr",null,[s("td",null,"class"),s("td",null,"C extends S1, T2, ...")]),s("tr",null,[s("td",null,"实例"),s("td",null,"C()")])])],-1),s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"// 仅 Scala 3 支持")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"open"),n(),s("span",{class:"token keyword"},"class"),n(" Person"),s("span",{class:"token punctuation"},"("),n("name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[162]||(a[162]=c('<h4 id="access-modifier" tabindex="-1"><a class="header-anchor" href="#access-modifier"><span>Access Modifier</span></a></h4><p>在 Scala 中，默认所有的成员定义都是 <code>public</code>。要隐藏具体的定义，可以使用 <code>private</code> 或 <code>protected</code> 修饰成员(method, field, type)。<code>private</code> 成员仅对 <code>class/trait</code> 自己可见，以及 <code>companion object</code> 可见。<code>protected</code> 对类的子类可见。</p><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4>',3)),o(p,{id:"1210",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[100]||(a[100]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[101]||(a[101]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[102]||(a[102]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" SubjectObserver "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"type"),n(" S "),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},":"),n(" Subject")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"type"),n(" O "),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},":"),n(" Observer")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"trait"),n(" Subject "),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token operator"},":"),n(" S "),s("span",{class:"token keyword"},"=>")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"var"),n(" observers"),s("span",{class:"token operator"},":"),n(" List"),s("span",{class:"token punctuation"},"["),n("O"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"="),n(" List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"def"),n(" subscribe"),s("span",{class:"token punctuation"},"("),n("obs"),s("span",{class:"token operator"},":"),n(" O"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("      observers "),s("span",{class:"token operator"},"="),n(" obs "),s("span",{class:"token operator"},"::"),n(" observers")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"def"),n(" publish"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token punctuation"},"("),n(" obs "),s("span",{class:"token keyword"},"<-"),n(" observers "),s("span",{class:"token punctuation"},")"),n(" obs"),s("span",{class:"token punctuation"},"."),n("notify"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"trait"),n(" Observer "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"def"),n(" notify"),s("span",{class:"token punctuation"},"("),n("sub"),s("span",{class:"token operator"},":"),n(" S"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,[s("code",null,"SubjectObserver"),n(" 中定义了 2 个 "),s("code",null,"trait"),n("："),s("code",null,"Subject"),n("，"),s("code",null,"Observer"),n("。")],-1),s("p",null,[s("code",null,"type S <: Subject"),n(" 表示上界，S 是 "),s("code",null,"Subject"),n(" 的子类。")],-1),s("p",null,[s("code",null,"self: S =>"),n(" self 是 "),s("code",null,"this"),n(" 的别名(自引用)，附带一个类型约束，当使用 this 或 self，表示的静态类型是 "),s("code",null,"S"),n("。必须是 "),s("code",null,"S"),n(" 的子类型。")],-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" SensorReader "),s("span",{class:"token keyword"},"extends"),n(" SubjectObserver "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"type"),n(" S "),s("span",{class:"token operator"},"="),n(" Sensor")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"type"),n(" O "),s("span",{class:"token operator"},"="),n(" Display")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"class"),n(" Sensor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"val"),n(" label"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Subject "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"var"),n(" currentValue "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0.0")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"def"),n(" value "),s("span",{class:"token operator"},"="),n(" currentValue")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"def"),n(" changeValue"),s("span",{class:"token punctuation"},"("),n("v"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("      currentValue "),s("span",{class:"token operator"},"="),n(" v")]),n(`
`),s("span",{class:"line"},[n("      publish"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"class"),n(" Display "),s("span",{class:"token keyword"},"extends"),n(" Observer "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"def"),n(" notify"),s("span",{class:"token punctuation"},"("),n("sub"),s("span",{class:"token operator"},":"),n(" Sensor"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("      println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("sub"),s("span",{class:"token punctuation"},"."),n("label")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"}," has value "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("sub"),s("span",{class:"token punctuation"},"."),n("value")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,[n("定义了一个单例类 "),s("code",null,"SensorReader"),n("。")],-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(" SensorReader"),s("span",{class:"token punctuation"},"."),n("_")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s1 "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Sensor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"sensor1"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s2 "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Sensor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"sensor2"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" d1 "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Display"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" d2 "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Display"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("s1"),s("span",{class:"token punctuation"},"."),n("subscribe"),s("span",{class:"token punctuation"},"("),n("d1"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("s1"),s("span",{class:"token punctuation"},"."),n("subscribe"),s("span",{class:"token punctuation"},"("),n("d2"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("s2"),s("span",{class:"token punctuation"},"."),n("subscribe"),s("span",{class:"token punctuation"},"("),n("d1"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("s1"),s("span",{class:"token punctuation"},"."),n("changeValue"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("s2"),s("span",{class:"token punctuation"},"."),n("changeValue"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,null,-1)])),tab1:e(({value:t,isActive:l})=>a[103]||(a[103]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"trait"),n(" SubjectObserver"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"type"),n(" S "),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},":"),n(" Subject")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"type"),n(" O "),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},":"),n(" Observer")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"trait"),n(" Subject"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"self"),s("span",{class:"token operator"},":"),n(" S "),s("span",{class:"token keyword"},"=>")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"var"),n(" observers"),s("span",{class:"token operator"},":"),n(" List"),s("span",{class:"token punctuation"},"["),n("O"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"="),n(" List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"def"),n(" subscribe"),s("span",{class:"token punctuation"},"("),n("obs"),s("span",{class:"token operator"},":"),n(" O"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("        observers "),s("span",{class:"token operator"},"="),n(" obs "),s("span",{class:"token operator"},"::"),n(" observers")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"def"),n(" publish"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"for"),n(" obs "),s("span",{class:"token keyword"},"<-"),n(" observers "),s("span",{class:"token keyword"},"do"),n(" obs"),s("span",{class:"token punctuation"},"."),n("notify"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"trait"),n(" Observer"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"def"),n(" notify"),s("span",{class:"token punctuation"},"("),n("sub"),s("span",{class:"token operator"},":"),n(" S"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,[s("code",null,"SubjectObserver"),n(" 中定义了 2 个 "),s("code",null,"trait"),n("："),s("code",null,"Subject"),n("，"),s("code",null,"Observer"),n("。")],-1),s("p",null,[s("code",null,"type S <: Subject"),n(" 表示上界，S 是 "),s("code",null,"Subject"),n(" 的子类。")],-1),s("p",null,[s("code",null,"self: S =>"),n(" self 是 "),s("code",null,"this"),n(" 的别名(自引用)，附带一个类型约束，当使用 this 或 self，表示的静态类型是 "),s("code",null,"S"),n("。必须是 "),s("code",null,"S"),n(" 的子类型。")],-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" SensorReader "),s("span",{class:"token keyword"},"extends"),n(" SubjectObserver"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"type"),n(" S "),s("span",{class:"token operator"},"="),n(" Sensor")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"type"),n(" O "),s("span",{class:"token operator"},"="),n(" Display")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"class"),n(" Sensor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"val"),n(" label"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"extends"),n(" Subject"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"var"),n(" currentValue "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0.0")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"def"),n(" value "),s("span",{class:"token operator"},"="),n(" currentValue")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"def"),n(" changeValue"),s("span",{class:"token punctuation"},"("),n("v"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("      currentValue "),s("span",{class:"token operator"},"="),n(" v")]),n(`
`),s("span",{class:"line"},[n("      publish"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"class"),n(" Display "),s("span",{class:"token keyword"},"extends"),n(" Observer"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"def"),n(" notify"),s("span",{class:"token punctuation"},"("),n("sub"),s("span",{class:"token operator"},":"),n(" Sensor"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("      println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"'),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("sub"),s("span",{class:"token punctuation"},"."),n("label")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"}," has value "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("sub"),s("span",{class:"token punctuation"},"."),n("value")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,[n("定义了一个单例类 "),s("code",null,"SensorReader"),n("。")],-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(" SensorReader"),s("span",{class:"token punctuation"},"."),n("*")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s1 "),s("span",{class:"token operator"},"="),n(" Sensor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"sensor1"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" s2 "),s("span",{class:"token operator"},"="),n(" Sensor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"sensor2"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" d1 "),s("span",{class:"token operator"},"="),n(" Display"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" d2 "),s("span",{class:"token operator"},"="),n(" Display"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("s1"),s("span",{class:"token punctuation"},"."),n("subscribe"),s("span",{class:"token punctuation"},"("),n("d1"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("s1"),s("span",{class:"token punctuation"},"."),n("subscribe"),s("span",{class:"token punctuation"},"("),n("d2"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("s2"),s("span",{class:"token punctuation"},"."),n("subscribe"),s("span",{class:"token punctuation"},"("),n("d1"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("s1"),s("span",{class:"token punctuation"},"."),n("changeValue"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("s2"),s("span",{class:"token punctuation"},"."),n("changeValue"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[163]||(a[163]=c(`<h3 id="fp-modeling" tabindex="-1"><a class="header-anchor" href="#fp-modeling"><span>FP Modeling</span></a></h3><p>FP 编程，两个核心概念：</p><ul><li>代数数据类型(ADT Algebraic Data Types) 是一种构建数据模型的方式，核心思想是使用有限的组合规则定义复杂的数据结构。两类主要组合方式：和类型(Sum Type)、积类型(Product Type)。</li><li>数据本身只是结构，但往往需要在数据上定义行为/功能。</li></ul><p><strong>函数式方法指的是使用函数式编程(FP)的风格或特性来编写代码的方法。函数式编程是一种编程范式，它将计算视为数学函数的求值，并避免使用程序状态和可变数据。在函数式编程中，函数是一等公民，意味着函数可以作为参数传递，也可以作为返回值返回（HOF），并且常常使用不可变数据和无副作用的函数。函数式方法特点：</strong></p><ul><li>不可变性(Immutability)：数据一旦创建，就不能被改变。任何修改都会创建一个新的数据副本。</li><li>纯函数(Pure Functions)：函数的输出只依赖于输入，并且不会产生副作用（例如修改全局变量、修改输入参数等）。</li><li>高阶函数(Higher-order Functions)：函数可以作为参数传递给其他函数，也可以作为函数的返回值。</li><li>递归(Recursion)：用递归来代替循环，因为循环通常需要改变循环变量（状态）。</li><li>函数组合(Function Composition)：将多个函数组合成一个新的函数。</li></ul><h4 id="data-model" tabindex="-1"><a class="header-anchor" href="#data-model"><span>Data Model</span></a></h4><p><strong>sum type(和类型)</strong>：CrustSize、CrustType、Topping。</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">enum</span> CrustSize<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> Small<span class="token punctuation">,</span> Medium<span class="token punctuation">,</span> Large</span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> CrustType<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> Thin<span class="token punctuation">,</span> Thick<span class="token punctuation">,</span> Regular</span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> Topping<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> Cheese<span class="token punctuation">,</span> Pepperoni<span class="token punctuation">,</span> BlackOlives<span class="token punctuation">,</span> GreenOlives<span class="token punctuation">,</span> Onions</span>
<span class="line"></span></code></pre></div><p><strong>product type(积类型)</strong>：Pizza。</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">import</span> CrustSize<span class="token punctuation">.</span>*</span>
<span class="line"><span class="token keyword">import</span> CrustType<span class="token punctuation">.</span>*</span>
<span class="line"><span class="token keyword">import</span> Topping<span class="token punctuation">.</span>*</span>
<span class="line"></span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Pizza<span class="token punctuation">(</span></span>
<span class="line">  <span class="token comment">// Pizza 大小</span></span>
<span class="line">  crustSize<span class="token operator">:</span> CrustSize<span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// Pizza 类型</span></span>
<span class="line">  crustType<span class="token operator">:</span> CrustType<span class="token punctuation">,</span></span>
<span class="line">  toppings<span class="token operator">:</span> Seq<span class="token punctuation">[</span>Topping<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// 地址</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Address<span class="token punctuation">(</span></span>
<span class="line">  street1<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span></span>
<span class="line">  street2<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  city<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span></span>
<span class="line">  state<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span></span>
<span class="line">  zipCode<span class="token operator">:</span> <span class="token builtin">String</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 客户</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Customer<span class="token punctuation">(</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span></span>
<span class="line">  phone<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span></span>
<span class="line">  address<span class="token operator">:</span> Address</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 订单</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Order<span class="token punctuation">(</span></span>
<span class="line">  pizzas<span class="token operator">:</span> Seq<span class="token punctuation">[</span>Pizza<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  customer<span class="token operator">:</span> Customer</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="operation-model" tabindex="-1"><a class="header-anchor" href="#operation-model"><span>Operation Model</span></a></h4><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">def</span> pizzaPrice<span class="token punctuation">(</span>p<span class="token operator">:</span> Pizza<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> p <span class="token keyword">match</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> Pizza<span class="token punctuation">(</span>crustSize<span class="token punctuation">,</span> crustType<span class="token punctuation">,</span> toppings<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> base  <span class="token operator">=</span> <span class="token number">6.00</span></span>
<span class="line">    <span class="token keyword">val</span> crust <span class="token operator">=</span> crustPrice<span class="token punctuation">(</span>crustSize<span class="token punctuation">,</span> crustType<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> tops  <span class="token operator">=</span> toppings<span class="token punctuation">.</span>map<span class="token punctuation">(</span>toppingPrice<span class="token punctuation">)</span><span class="token punctuation">.</span>sum</span>
<span class="line">    base <span class="token operator">+</span> crust <span class="token operator">+</span> tops</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Topping 的价格函数</span></span>
<span class="line"><span class="token keyword">def</span> toppingPrice<span class="token punctuation">(</span>t<span class="token operator">:</span> Topping<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> t <span class="token keyword">match</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> Cheese <span class="token operator">|</span> Onions <span class="token keyword">=&gt;</span> <span class="token number">0.5</span></span>
<span class="line">  <span class="token keyword">case</span> Pepperoni <span class="token operator">|</span> BlackOlives <span class="token operator">|</span> GreenOlives <span class="token keyword">=&gt;</span> <span class="token number">0.75</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 面包的价格</span></span>
<span class="line"><span class="token keyword">def</span> crustPrice<span class="token punctuation">(</span>s<span class="token operator">:</span> CrustSize<span class="token punctuation">,</span> t<span class="token operator">:</span> CrustType<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token keyword">match</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Small | Medium 大小, 任意大小固定</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">(</span>Small <span class="token operator">|</span> Medium<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token number">0.25</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">(</span>Large<span class="token punctuation">,</span> Thin<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token number">0.50</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">(</span>Large<span class="token punctuation">,</span> Regular<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token number">0.75</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">(</span>Large<span class="token punctuation">,</span> Thick<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token number">1.00</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="功能规划" tabindex="-1"><a class="header-anchor" href="#功能规划"><span>功能规划</span></a></h4><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Pizza<span class="token punctuation">(</span></span>
<span class="line">  crustSize<span class="token operator">:</span> CrustSize<span class="token punctuation">,</span></span>
<span class="line">  crustType<span class="token operator">:</span> CrustType<span class="token punctuation">,</span></span>
<span class="line">  toppings<span class="token operator">:</span> Seq<span class="token punctuation">[</span>Topping<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">object</span> Pizza <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">def</span> price<span class="token punctuation">(</span>p<span class="token operator">:</span> Pizza<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> p <span class="token keyword">match</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> Pizza<span class="token punctuation">(</span>crustSize<span class="token punctuation">,</span> crustType<span class="token punctuation">,</span> toppings<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> base  <span class="token operator">=</span> <span class="token number">6.00</span></span>
<span class="line">    <span class="token keyword">val</span> crust <span class="token operator">=</span> crustPrice<span class="token punctuation">(</span>crustSize<span class="token punctuation">,</span> crustType<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> tops  <span class="token operator">=</span> toppings<span class="token punctuation">.</span>map<span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">.</span>sum</span>
<span class="line">    base <span class="token operator">+</span> crust <span class="token operator">+</span> tops</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">sealed</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> Topping</span>
<span class="line"></span>
<span class="line"><span class="token keyword">object</span> Topping <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token keyword">object</span> Cheese <span class="token keyword">extends</span> Topping</span>
<span class="line">  <span class="token keyword">case</span> <span class="token keyword">object</span> Pepperoni <span class="token keyword">extends</span> Topping</span>
<span class="line">  <span class="token keyword">case</span> <span class="token keyword">object</span> BlackOlives <span class="token keyword">extends</span> Topping</span>
<span class="line">  <span class="token keyword">case</span> <span class="token keyword">object</span> GreenOlives <span class="token keyword">extends</span> Topping</span>
<span class="line">  <span class="token keyword">case</span> <span class="token keyword">object</span> Onions <span class="token keyword">extends</span> Topping</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> price<span class="token punctuation">(</span>t<span class="token operator">:</span> Topping<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> </span>
<span class="line">    <span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token keyword">match</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Small | Medium 大小, 任意大小固定</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">(</span>Small <span class="token operator">|</span> Medium<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token number">0.25</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">(</span>Large<span class="token punctuation">,</span> Thin<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token number">0.50</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">(</span>Large<span class="token punctuation">,</span> Regular<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token number">0.75</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">(</span>Large<span class="token punctuation">,</span> Thick<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token number">1.00</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="extension-method" tabindex="-1"><a class="header-anchor" href="#extension-method"><span>Extension Method</span></a></h4>`,16)),o(p,{id:"1320",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[104]||(a[104]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[105]||(a[105]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[106]||(a[106]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"class"),n(" Pizza"),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("  crustSize"),s("span",{class:"token operator"},":"),n(" CrustSize"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  crustType"),s("span",{class:"token operator"},":"),n(" CrustType"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  toppings"),s("span",{class:"token operator"},":"),n(" Seq"),s("span",{class:"token punctuation"},"["),n("Topping"),s("span",{class:"token punctuation"},"]")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 隐式类")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"implicit"),n(),s("span",{class:"token keyword"},"class"),n(" PizzaOps"),s("span",{class:"token punctuation"},"("),n("p"),s("span",{class:"token operator"},":"),n(" Pizza"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" price"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    pizzaPrice"),s("span",{class:"token punctuation"},"("),n("p"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token comment"},"// implementation from above")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" addTopping"),s("span",{class:"token punctuation"},"("),n("t"),s("span",{class:"token operator"},":"),n(" Topping"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Pizza "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("copy"),s("span",{class:"token punctuation"},"("),n("toppings "),s("span",{class:"token operator"},"="),n(" p"),s("span",{class:"token punctuation"},"."),n("toppings "),s("span",{class:"token operator"},":"),s("span",{class:"token operator"},"+"),n(" t"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" removeAllToppings"),s("span",{class:"token operator"},":"),n(" Pizza "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("copy"),s("span",{class:"token punctuation"},"("),n("toppings "),s("span",{class:"token operator"},"="),n(" Seq"),s("span",{class:"token punctuation"},"."),n("empty"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" updateCrustSize"),s("span",{class:"token punctuation"},"("),n("cs"),s("span",{class:"token operator"},":"),n(" CrustSize"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Pizza "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("copy"),s("span",{class:"token punctuation"},"("),n("crustSize "),s("span",{class:"token operator"},"="),n(" cs"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" updateCrustType"),s("span",{class:"token punctuation"},"("),n("ct"),s("span",{class:"token operator"},":"),n(" CrustType"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Pizza "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("copy"),s("span",{class:"token punctuation"},"("),n("crustType "),s("span",{class:"token operator"},"="),n(" ct"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[107]||(a[107]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token keyword"},"class"),n(" Pizza"),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("  crustSize"),s("span",{class:"token operator"},":"),n(" CrustSize"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  crustType"),s("span",{class:"token operator"},":"),n(" CrustType"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  toppings"),s("span",{class:"token operator"},":"),n(" Seq"),s("span",{class:"token punctuation"},"["),n("Topping"),s("span",{class:"token punctuation"},"]")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"extension"),n(),s("span",{class:"token punctuation"},"("),n("p"),s("span",{class:"token operator"},":"),n(" Pizza"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" price"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Double"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    pizzaPrice"),s("span",{class:"token punctuation"},"("),n("p"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token comment"},"// implementation from above")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" addTopping"),s("span",{class:"token punctuation"},"("),n("t"),s("span",{class:"token operator"},":"),n(" Topping"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Pizza "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("copy"),s("span",{class:"token punctuation"},"("),n("toppings "),s("span",{class:"token operator"},"="),n(" p"),s("span",{class:"token punctuation"},"."),n("toppings "),s("span",{class:"token operator"},":"),s("span",{class:"token operator"},"+"),n(" t"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" removeAllToppings"),s("span",{class:"token operator"},":"),n(" Pizza "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("copy"),s("span",{class:"token punctuation"},"("),n("toppings "),s("span",{class:"token operator"},"="),n(" Seq"),s("span",{class:"token punctuation"},"."),n("empty"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" updateCrustSize"),s("span",{class:"token punctuation"},"("),n("cs"),s("span",{class:"token operator"},":"),n(" CrustSize"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Pizza "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("copy"),s("span",{class:"token punctuation"},"("),n("crustSize "),s("span",{class:"token operator"},"="),n(" cs"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" updateCrustType"),s("span",{class:"token punctuation"},"("),n("ct"),s("span",{class:"token operator"},":"),n(" CrustType"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Pizza "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    p"),s("span",{class:"token punctuation"},"."),n("copy"),s("span",{class:"token punctuation"},"("),n("crustType "),s("span",{class:"token operator"},"="),n(" ct"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[164]||(a[164]=s("h2",{id:"方法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#方法"},[s("span",null,"方法")])],-1)),a[165]||(a[165]=s("h3",{id:"方法定义",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#方法定义"},[s("span",null,"方法定义")])],-1)),a[166]||(a[166]=s("p",null,[n("在 Scala 2中，class、case class、trait、object和 case object 中都可以方法。在 Scala 3中，可以在这些结构之外定义，可以称为 "),s("code",null,"top-level"),n("。方法定义语法如下：")],-1)),o(p,{id:"1337",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[108]||(a[108]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[109]||(a[109]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[110]||(a[110]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" methodName"),s("span",{class:"token punctuation"},"("),n("param1"),s("span",{class:"token operator"},":"),n(" Type1"),s("span",{class:"token punctuation"},","),n(" param2"),s("span",{class:"token operator"},":"),n(" Type2"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" ReturnType "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// 方法体")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>a[111]||(a[111]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"def"),n(" methodName"),s("span",{class:"token punctuation"},"("),n("param1"),s("span",{class:"token operator"},":"),n(" Type1"),s("span",{class:"token punctuation"},","),n(" param2"),s("span",{class:"token operator"},":"),n(" Type2"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" ReturnType "),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// 方法体")]),n(`
`),s("span",{class:"line"},[n("end methodName   "),s("span",{class:"token comment"},"// 可选")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[167]||(a[167]=c(`<div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">def</span> methodName<span class="token punctuation">(</span>param1<span class="token operator">:</span> Type1<span class="token punctuation">,</span> param2<span class="token operator">:</span> Type2<span class="token punctuation">)</span><span class="token operator">:</span> ReturnType <span class="token operator">=</span></span>
<span class="line">  <span class="token comment">// 方法体</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> sum<span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> a <span class="token operator">+</span> b</span>
<span class="line"><span class="token comment">// 省略方法的返回类型</span></span>
<span class="line"><span class="token keyword">def</span> sum<span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> a <span class="token operator">+</span> b</span>
<span class="line"></span>
<span class="line"><span class="token comment">// Scala 2 需要 {}, Scala 3 不需要 {}</span></span>
<span class="line"><span class="token keyword">def</span> getStackTraceAsString<span class="token punctuation">(</span>t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> StringWriter</span>
<span class="line">  t<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span><span class="token keyword">new</span> PrintWriter<span class="token punctuation">(</span>sw<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  sw<span class="token punctuation">.</span>toString</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方法参数默认值, 默认值参数可以省略(应该只能在后面,或以参数名调用方法), </span></span>
<span class="line"><span class="token keyword">def</span> makeConnection<span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> timeout<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span></span>
<span class="line">  println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;url=</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">url</span></span><span class="token string">, timeout=</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">timeout</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">makeConnection<span class="token punctuation">(</span><span class="token string">&quot;https://localhost&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 调用方法使用参数名称</span></span>
<span class="line">makeConnection<span class="token punctuation">(</span></span>
<span class="line">  url <span class="token operator">=</span> <span class="token string">&quot;https://localhost&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  timeout <span class="token operator">=</span> <span class="token number">2500</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 无参数方法, 在不执行其它代码的情况下, 可以省略 (); 例如集合的 size</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>仅 scala 3 支持</strong>：<code>extension</code> 关键字扩展方法，</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// 定义的参数, 作为调用入口,也作为方法参数</span></span>
<span class="line"><span class="token keyword">extension</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">def</span> makeInt<span class="token punctuation">(</span>radix<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>parseInt<span class="token punctuation">(</span>s<span class="token punctuation">,</span> radix<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span>makeInt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">// Int = 1</span></span>
<span class="line"><span class="token string">&quot;10&quot;</span><span class="token punctuation">.</span>makeInt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// Int = 2</span></span>
<span class="line"><span class="token string">&quot;100&quot;</span><span class="token punctuation">.</span>makeInt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">// Int = 4</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="main" tabindex="-1"><a class="header-anchor" href="#main"><span>main</span></a></h3>`,4)),o(p,{id:"1353",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[112]||(a[112]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[113]||(a[113]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[114]||(a[114]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"object"),n(" happyBirthday "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"def"),n(" happyBirthday"),s("span",{class:"token punctuation"},"("),n("age"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},","),n(" name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(" others"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"."),s("span",{class:"token punctuation"},"."),s("span",{class:"token punctuation"},"."),n(),s("span",{class:"token comment"},"// same as before")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" main"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token operator"},":"),n(" Array"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"// :_* 用于传递可变参数")]),n(`
`),s("span",{class:"line"},[n("    happyBirthday"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("toInt"),s("span",{class:"token punctuation"},","),n(" args"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(" args"),s("span",{class:"token punctuation"},"."),n("drop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("toIndexedSeq"),s("span",{class:"token operator"},":"),n("_"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>a[115]||(a[115]=[s("p",null,[n("Scala 3 支持向方法添加 "),s("code",null,"@main"),n(" 注解，将其作为可执行程序的入口。文件名不用匹配方法名。")],-1),s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token annotation punctuation"},"@main"),n(),s("span",{class:"token keyword"},"def"),n(" hello"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Hello, World"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// scala run Hello.scala 启动命令")]),n(`
`),s("span",{class:"line"})])])],-1),s("p",null,[s("strong",null,"命令添加参数")],-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"// String* 表示 可变 String 参数")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token annotation punctuation"},"@main"),n(),s("span",{class:"token keyword"},"def"),n(" happyBirthday"),s("span",{class:"token punctuation"},"("),n("age"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},","),n(" name"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},","),n(" others"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" suffix "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"("),n("age "),s("span",{class:"token operator"},"%"),n(),s("span",{class:"token number"},"100"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"11"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"12"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token number"},"13"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"th"')]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token punctuation"},"("),n("age "),s("span",{class:"token operator"},"%"),n(),s("span",{class:"token number"},"10"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"match")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"st"')]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"2"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"nd"')]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"case"),n(),s("span",{class:"token number"},"3"),n(),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"rd"')]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"case"),n(" _ "),s("span",{class:"token keyword"},"=>"),n(),s("span",{class:"token string"},'"th"')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"val"),n(" sb "),s("span",{class:"token operator"},"="),n(" StringBuilder"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"Happy '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"age")]),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"suffix")]),s("span",{class:"token string"}," birthday, "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"$"),s("span",{class:"token expression"},"name")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"for"),n(" other "),s("span",{class:"token keyword"},"<-"),n(" others "),s("span",{class:"token keyword"},"do"),n(" sb"),s("span",{class:"token punctuation"},"."),n("append"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'" and "'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("append"),s("span",{class:"token punctuation"},"("),n("other"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),n("sb"),s("span",{class:"token punctuation"},"."),n("toString"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// scala run happyBirthday.scala -- 23 Lisa Peter -- 后添加参数")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,[s("strong",null,"自定义参数类型")],-1),s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"enum"),n(" Color"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"case"),n(" Red"),s("span",{class:"token punctuation"},","),n(" Green"),s("span",{class:"token punctuation"},","),n(" Blue")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// scala.util.CommandLineParser.FromString 会解析 run 方法参数为 Color 类型")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"given"),n(" CommandLineParser"),s("span",{class:"token punctuation"},"."),n("FromString"),s("span",{class:"token punctuation"},"["),n("Color"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token keyword"},"with")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token namespace"},"def"),n(" fromString"),s("span",{class:"token punctuation"},"("),n("value"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" Color "),s("span",{class:"token operator"},"="),n(" Color"),s("span",{class:"token punctuation"},"."),n("valueOf"),s("span",{class:"token punctuation"},"("),n("value"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token annotation punctuation"},"@main"),n(),s("span",{class:"token keyword"},"def"),n(" run"),s("span",{class:"token punctuation"},"("),n("color"),s("span",{class:"token operator"},":"),n(" Color"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("  println"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-interpolation"},[s("span",{class:"token id function"},"s"),s("span",{class:"token string"},'"The color is '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"${"),s("span",{class:"token expression"},[n("color"),s("span",{class:"token punctuation"},"."),n("toString")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"})])])],-1),s("p",null,[s("strong",null,"@main 注解运行原理"),n("："),s("code",null,"happyBirthday"),n(" 的等价代码")],-1),s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"final"),n(),s("span",{class:"token keyword"},"class"),n(" happyBirthday "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("scala"),s("span",{class:"token punctuation"},"."),n("util"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token punctuation"},"{"),n("CommandLineParser as CLP"),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token comment"},"// static 表示静态方法, 不适用自己编写的代码")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token keyword"},"static"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token keyword"},"def"),n(" main"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token operator"},":"),n(" Array"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"try")]),n(`
`),s("span",{class:"line"},[n("      happyBirthday"),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("          CLP"),s("span",{class:"token punctuation"},"."),n("parseArgument"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"Int"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("          CLP"),s("span",{class:"token punctuation"},"."),n("parseArgument"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("          CLP"),s("span",{class:"token punctuation"},"."),n("parseRemainingArguments"),s("span",{class:"token punctuation"},"["),s("span",{class:"token builtin"},"String"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},"("),n("args"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"catch"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token keyword"},"case"),n(" error"),s("span",{class:"token operator"},":"),n(" CLP"),s("span",{class:"token punctuation"},"."),n("ParseError "),s("span",{class:"token keyword"},"=>"),n(" CLP"),s("span",{class:"token punctuation"},"."),n("showError"),s("span",{class:"token punctuation"},"("),n("error"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,null,-1)])),_:1}),a[168]||(a[168]=c(`<h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><p><strong>方法和函数的主要区别在于：函数是一个对象，即它是一个类的实例，并且有自己的方法。</strong></p><p>Scala 支持的函数：匿名函数(anonymous function)、部分函数(partial function)、高阶函数(higher-order function)。</p><p>Scala 具有函数式编程中的大多数功能：</p><ul><li>Lambdas-匿名函数</li><li>HOF-高阶函数：可以接受其他函数作为参数，或者将函数作为返回值的函数。</li><li>不可变的集合</li></ul><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数"><span>匿名函数</span></a></h3><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">val</span> ints <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 自定义匿名函数</span></span>
<span class="line"><span class="token keyword">val</span> doubledInts <span class="token operator">=</span> ints<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>匿名函数长格式写法</strong></p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">val</span> doubledInts <span class="token operator">=</span> ints<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> doubledInts <span class="token operator">=</span> ints<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> doubledInts <span class="token operator">=</span> ints<span class="token punctuation">.</span>map<span class="token punctuation">(</span>i <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p><strong>缩短匿名函数</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// 最完整写法</span></span>
<span class="line"><span class="token keyword">val</span> doubledInts <span class="token operator">=</span> ints<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// Scala 支持类型推断，可以省略 Int 类型</span></span>
<span class="line"><span class="token keyword">val</span> doubledInts <span class="token operator">=</span> ints<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 只有一个参数，可以省略 ()</span></span>
<span class="line"><span class="token keyword">val</span> doubledInts <span class="token operator">=</span> ints<span class="token punctuation">.</span>map<span class="token punctuation">(</span>i <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// Scala 中支持 _ 替代变量名称, 当参数在函数中仅使用一次</span></span>
<span class="line"><span class="token keyword">val</span> doubledInts <span class="token operator">=</span> ints<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">ints<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> println<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">ints<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>i <span class="token keyword">=&gt;</span> println<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">ints<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 匿名函数只接收一个参数, 且被要给方法调用</span></span>
<span class="line">ints<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数变量" tabindex="-1"><a class="header-anchor" href="#函数变量"><span>函数变量</span></a></h3><p>将匿名函数作为一个变量赋值给变量。</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">val</span> double <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line"><span class="token keyword">val</span> triple <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 List Map 存储</span></span>
<span class="line"><span class="token keyword">val</span> functionList <span class="token operator">=</span> List<span class="token punctuation">(</span>double<span class="token punctuation">,</span> triple<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> functionMap <span class="token operator">=</span> Map<span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;2x&quot;</span> <span class="token operator">-&gt;</span> double<span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;3x&quot;</span> <span class="token operator">-&gt;</span> triple</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><h3 id="部分函数" tabindex="-1"><a class="header-anchor" href="#部分函数"><span>部分函数</span></a></h3><p>部分函数是不会为其参数类型定义类型的函数。在 Scala 中，部分函数是实现 <code>PartialFunction[A, B]</code> trait 的一元函数，其中 A 是参数类型，B 是结果类型。</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">val</span> doubledOdds<span class="token operator">:</span> PartialFunction<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> i <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 使用 isDefinedAt 为参数检查是否定义了部分函数</span></span>
<span class="line">doubledOdds<span class="token punctuation">.</span>isDefinedAt<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line">doubledOdds<span class="token punctuation">.</span>isDefinedAt<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></span>
<span class="line"></span></code></pre></div><p><strong>部分函数使用</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// 作为参数使用</span></span>
<span class="line"><span class="token keyword">val</span> res <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">case</span> i <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">=&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// List(2, 6)</span></span>
<span class="line"><span class="token comment">// 参数不匹配时执行逻辑</span></span>
<span class="line">doubledOdds<span class="token punctuation">.</span>applyOrElse<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> _ <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 两个部分函数通过 orElse 组合</span></span>
<span class="line"><span class="token keyword">val</span> incrementedEvens<span class="token operator">:</span> PartialFunction<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> i <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">=&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> res2 <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span>doubledOdds<span class="token punctuation">.</span>orElse<span class="token punctuation">(</span>incrementedEvens<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// List(2, 3, 6)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="eta-expansion" tabindex="-1"><a class="header-anchor" href="#eta-expansion"><span>ETA-Expansion</span></a></h3><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// Scala List 中 map 函数定义</span></span>
<span class="line"><span class="token comment">// f 表示应用于每个元素的函数, 背后的过程就是 ETA-Expansion</span></span>
<span class="line"><span class="token keyword">def</span> map<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">(</span>f<span class="token operator">:</span> A <span class="token keyword">=&gt;</span> B<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>B<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方法</span></span>
<span class="line"><span class="token keyword">def</span> times10<span class="token punctuation">(</span>i<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">10</span></span>
<span class="line"><span class="token comment">// 方法不是一个可以传递的值, 只能通过 times(10) 来调用</span></span>
<span class="line"><span class="token comment">// 通过创建一个函数值将方法转换为值, 该函数值在提供所需参数时调用该方法, 这个过程就是 ETA-Expansion</span></span>
<span class="line">List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>times10<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 自动将 方法引用(不需要参数) 转换为调用该方法的匿名函数</span></span>
<span class="line">List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=&gt;</span> times10<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ETA-Expansion</code> 是依赖上下文的语法糖。</p><p><strong>在 Scala 2 中，只有当预期类型是函数类型时，ETA-Expansion 才会发生。</strong></p><p><strong>在 Scala 3 中，方法可以在任何地方作为值使用</strong></p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">def</span> isLessThan<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> x <span class="token operator">&lt;</span> y</span>
<span class="line"><span class="token comment">// Scala 2 中将报错</span></span>
<span class="line"><span class="token keyword">val</span> methods <span class="token operator">=</span> List<span class="token punctuation">(</span>isLessThan<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p><strong>手动使用 ETA-Expansion</strong></p>`,26)),o(p,{id:"1455",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[116]||(a[116]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[117]||(a[117]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[118]||(a[118]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" methodsA "),s("span",{class:"token operator"},"="),n(" List"),s("span",{class:"token punctuation"},"("),n("isLessThan _"),s("span",{class:"token punctuation"},")"),n("               "),s("span",{class:"token comment"},"// way 1: Scala 3 不支持")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" methodsB "),s("span",{class:"token operator"},"="),n(" List"),s("span",{class:"token punctuation"},"("),n("isLessThan"),s("span",{class:"token punctuation"},"("),n("_"),s("span",{class:"token punctuation"},","),n(" _"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n("           "),s("span",{class:"token comment"},"// way 2: 通配符扩展")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" methodsC "),s("span",{class:"token operator"},"="),n(" List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token punctuation"},","),n(" y"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(" isLessThan"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token punctuation"},","),n(" y"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token comment"},"// way 3: 匿名函数")]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>a[119]||(a[119]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" methodsA "),s("span",{class:"token operator"},"="),n(" List"),s("span",{class:"token punctuation"},"("),n("isLessThan"),s("span",{class:"token punctuation"},"("),n("_"),s("span",{class:"token punctuation"},","),n(" _"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n("           "),s("span",{class:"token comment"},"// way 1: 通配符扩展")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"val"),n(" methodsB "),s("span",{class:"token operator"},"="),n(" List"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token punctuation"},","),n(" y"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"=>"),n(" isLessThan"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token punctuation"},","),n(" y"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token comment"},"// way 2: 匿名函数")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[169]||(a[169]=c(`<h3 id="hof" tabindex="-1"><a class="header-anchor" href="#hof"><span>HOF</span></a></h3><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// p 表示方法接收名为 p 的函数</span></span>
<span class="line"><span class="token comment">// List[+A] 的 A 类型能在函数中使用, 是因为函数 Function1[-T1,+R] 定义</span></span>
<span class="line"><span class="token keyword">def</span> filter<span class="token punctuation">(</span>p<span class="token operator">:</span> A <span class="token keyword">=&gt;</span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>自定义 HOF</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">def</span> sayHello<span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token builtin">Unit</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> helloJoe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> println<span class="token punctuation">(</span><span class="token string">&quot;Hello, Joe&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// sayHello 调用</span></span>
<span class="line">sayHello<span class="token punctuation">(</span>helloJoe<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 函数和其它参数一起使用</span></span>
<span class="line"><span class="token keyword">def</span> operation<span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> i<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> j<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> f<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> add<span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> a <span class="token operator">+</span> b</span>
<span class="line"><span class="token keyword">def</span> subtract<span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> a <span class="token operator">-</span> b</span>
<span class="line"><span class="token keyword">def</span> multiply<span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> a <span class="token operator">*</span> b</span>
<span class="line">operation<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> executeNTimes<span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token builtin">Unit</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token keyword">for</span> i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token namespace">n</span> <span class="token keyword">do</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">executeNTimes<span class="token punctuation">(</span>helloJoe<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数变量和函数参数的关系</strong></p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// 定义一个函数变量</span></span>
<span class="line"><span class="token keyword">val</span> f<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> a <span class="token operator">+</span> b</span>
<span class="line"><span class="token comment">// 定义一个接收函数的参数</span></span>
<span class="line"><span class="token keyword">def</span> operation<span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre></div><p><strong>自定义 map 方法</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// List[Int] =&gt; 转换成任意类型</span></span>
<span class="line"><span class="token keyword">def</span> map<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> A<span class="token punctuation">,</span> xs<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">for</span> x <span class="token keyword">&lt;-</span> xs <span class="token keyword">yield</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span><span class="token punctuation">(</span>f<span class="token operator">:</span> A <span class="token keyword">=&gt;</span> B<span class="token punctuation">,</span> xs<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>B<span class="token punctuation">]</span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token keyword">for</span> x <span class="token keyword">&lt;-</span> xs <span class="token keyword">yield</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> double<span class="token punctuation">(</span>i <span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line">map<span class="token punctuation">(</span>double<span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> strlen<span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>length</span>
<span class="line">map<span class="token punctuation">(</span>strlen<span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法返回一个函数</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token comment">// greet 方法返回一个函数, 接收一个 Stirng 参数, 并打印它</span></span>
<span class="line"><span class="token keyword">def</span> greet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token keyword">=&gt;</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> greetFunction <span class="token operator">=</span> greet<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">greetFunction<span class="token punctuation">(</span><span class="token string">&quot;World !&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 改进方法</span></span>
<span class="line"><span class="token keyword">def</span> greet<span class="token punctuation">(</span>theGreeting<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token keyword">=&gt;</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">theGreeting</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> hello <span class="token operator">=</span> greet<span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line">hello<span class="token punctuation">(</span><span class="token string">&quot;World !&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 函数工厂, 根据方法的参数类型, 返回不同的函数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="package-和-import" tabindex="-1"><a class="header-anchor" href="#package-和-import"><span>package 和 import</span></a></h2><p>Scala 使用 package 创建命名空间，支持模块化编程，编码命名空间的冲突。Scala 支持使用 Java 的命名格式，以及 <code>C++</code> 和 <code>C#</code> 等语言使用 <code>{}</code> 表示命名空间。</p><p>Scala 的 import 和 Java 类似，并且更灵活：</p><ul><li>import package、class、object、trait、method；</li><li>import 支持在任意位置；</li><li>隐藏和重命名导入的成员。</li></ul><h3 id="package" tabindex="-1"><a class="header-anchor" href="#package"><span>package</span></a></h3><p>包名称应全部为小写，命名约定：top-level-domain.domain-name.project-name.module-name</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>oycm<span class="token punctuation">.</span>example<span class="token punctuation">.</span>model</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> Person <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre></div><p><strong>在同一个文件中定义多个包，注意缩进</strong></p>`,18)),o(p,{id:"1519",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[120]||(a[120]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[121]||(a[121]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[122]||(a[122]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"package"),n(),s("span",{class:"token namespace"},"users"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"package"),n(),s("span",{class:"token namespace"},"administrators"),n(),s("span",{class:"token punctuation"},"{"),n("  "),s("span",{class:"token comment"},"// the full name of this package is users.administrators")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"class"),n(" AdminUser        "),s("span",{class:"token comment"},"// the full name of this class users.administrators.AdminUser")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"package"),n(),s("span",{class:"token namespace"},"normalusers"),n(),s("span",{class:"token punctuation"},"{"),n("     "),s("span",{class:"token comment"},"// the full name of this package is users.normalusers")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"class"),n(" NormalUser       "),s("span",{class:"token comment"},"// the full name of this class is users.normalusers.NormalUser")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>a[123]||(a[123]=[s("div",{class:"language-scala","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"package"),n(),s("span",{class:"token namespace"},"users"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"package"),n(),s("span",{class:"token namespace"},"administrators"),s("span",{class:"token operator"},":"),n("  "),s("span",{class:"token comment"},"// users.administrators")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"class"),n(" AdminUser        "),s("span",{class:"token comment"},"// users.administrators.AdminUser")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"package"),n(),s("span",{class:"token namespace"},"normalusers"),s("span",{class:"token operator"},":"),n("     "),s("span",{class:"token comment"},"// users.normalusers")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"class"),n(" NormalUser       "),s("span",{class:"token comment"},"// users.normalusers.NormalUser")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[170]||(a[170]=c('<h3 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>import</span></a></h3><p>import 语句用于导入其它包的实体。导入语法与 Java 类似，但略有不同。导入语句分为两类：</p><ul><li>import class、trait、object、function、method；</li><li>import given clauses。</li></ul><p><strong>默认导入</strong>：</p><ul><li><code>java.lang.*</code></li><li><code>scala.*</code></li><li>Scala 对象的 <code>Predef</code> 成员也会导入，这是能直接使用 Scala 的 List、Map 等对象的原因</li></ul><p><strong>普通 Import</strong></p>',6)),o(p,{id:"1568",data:[{id:"Scala 2"},{id:"Scala 3"}]},{title0:e(({value:t,isActive:l})=>a[124]||(a[124]=[n("Scala 2")])),title1:e(({value:t,isActive:l})=>a[125]||(a[125]=[n("Scala 3")])),tab0:e(({value:t,isActive:l})=>a[126]||(a[126]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("users"),s("span",{class:"token punctuation"},".")]),n("_                            "),s("span",{class:"token comment"},"// 从 users 包导入所有内容")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("users"),s("span",{class:"token punctuation"},".")]),n("User                         "),s("span",{class:"token comment"},"// 只导入 User Class")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("users"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token punctuation"},"{"),n("User"),s("span",{class:"token punctuation"},","),n(" UserPreferences"),s("span",{class:"token punctuation"},"}"),n("      "),s("span",{class:"token comment"},"// 只导入 2 个指定的 Class")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("users"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token punctuation"},"{"),n("UserPreferences "),s("span",{class:"token keyword"},"=>"),n(" UPrefs"),s("span",{class:"token punctuation"},"}"),n("  "),s("span",{class:"token comment"},"// 导入后重命名")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("java"),s("span",{class:"token punctuation"},"."),n("util"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token punctuation"},"{"),n("Random "),s("span",{class:"token keyword"},"=>"),n(" _"),s("span",{class:"token punctuation"},","),n(" _"),s("span",{class:"token punctuation"},"}"),n("         "),s("span",{class:"token comment"},"// 隐藏 java.util.Random 并导入 java.util 的其它内容")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("java"),s("span",{class:"token punctuation"},"."),n("util"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token punctuation"},"{"),n("List "),s("span",{class:"token keyword"},"=>"),n(" _"),s("span",{class:"token punctuation"},","),n(" Map "),s("span",{class:"token keyword"},"=>"),n(" _"),s("span",{class:"token punctuation"},","),n(" Set "),s("span",{class:"token keyword"},"=>"),n(" _"),s("span",{class:"token punctuation"},","),n(" _"),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 在 class 中 使用")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" ClassA "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("scala"),s("span",{class:"token punctuation"},"."),n("util"),s("span",{class:"token punctuation"},".")]),n("Random")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" printRandom"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"val"),n(" r "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Random")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token comment"},"// more code here...")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 静态导入, 直接使用 Math 的成员")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("java"),s("span",{class:"token punctuation"},"."),n("lang"),s("span",{class:"token punctuation"},".")]),n("Math"),s("span",{class:"token punctuation"},"."),n("_")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 解决命名冲突, 从根目录导入内容")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"package"),n(),s("span",{class:"token namespace"},"accounts")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(" _root_"),s("span",{class:"token punctuation"},"."),n("accounts"),s("span",{class:"token punctuation"},"."),n("_")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[127]||(a[127]=[s("div",{class:"language-scala line-numbers-mode","data-highlighter":"prismjs","data-ext":"scala","data-title":"scala"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("users"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token operator"},"*"),n("                            "),s("span",{class:"token comment"},"// 从 users 包导入所有内容")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("users"),s("span",{class:"token punctuation"},".")]),n("User                         "),s("span",{class:"token comment"},"// 只导入 User Class")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("users"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token punctuation"},"{"),n("User"),s("span",{class:"token punctuation"},","),n(" UserPreferences"),s("span",{class:"token punctuation"},"}"),n("      "),s("span",{class:"token comment"},"// 只导入 2 个指定的 Class")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("users"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token punctuation"},"{"),n("UserPreferences as UPrefs"),s("span",{class:"token punctuation"},"}"),n("  "),s("span",{class:"token comment"},"// 导入后重命名")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("java"),s("span",{class:"token punctuation"},"."),n("util"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token punctuation"},"{"),n("Random as _"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},"}"),n("         "),s("span",{class:"token comment"},"// 隐藏 java.util.Random 并导入 java.util 的其它内容")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("java"),s("span",{class:"token punctuation"},"."),n("util"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token punctuation"},"{"),n("List as _"),s("span",{class:"token punctuation"},","),n(" Map as _"),s("span",{class:"token punctuation"},","),n(" Set as _"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token operator"},"*"),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 在 class 中 使用")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"class"),n(" ClassA"),s("span",{class:"token operator"},":")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("scala"),s("span",{class:"token punctuation"},"."),n("util"),s("span",{class:"token punctuation"},".")]),n("Random")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"def"),n(" printRandom"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"Unit"),n(),s("span",{class:"token operator"},"=")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"val"),n(" r "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(" Random")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 静态导入, 直接使用 Math 的成员")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token namespace"},[n("java"),s("span",{class:"token punctuation"},"."),n("lang"),s("span",{class:"token punctuation"},".")]),n("Math"),s("span",{class:"token punctuation"},"."),n("*")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"// 解决命名冲突, 从根目录导入内容")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"package"),n(),s("span",{class:"token namespace"},"accounts")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(" _root_"),s("span",{class:"token punctuation"},"."),n("accounts"),s("span",{class:"token punctuation"},"."),n("*")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[171]||(a[171]=c(`<p><strong>Import given(Scala 3)</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">object</span> A<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">class</span> TC</span>
<span class="line">  <span class="token keyword">given</span> tc<span class="token operator">:</span> TC</span>
<span class="line">  <span class="token keyword">def</span> f<span class="token punctuation">(</span><span class="token keyword">using</span> TC<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">object</span> B<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">import</span> A<span class="token punctuation">.</span>*       <span class="token comment">// 导入所有 non-given 成员</span></span>
<span class="line">  <span class="token keyword">import</span> A<span class="token punctuation">.</span><span class="token keyword">given</span>   <span class="token comment">// 导入所有 given 成员</span></span>
<span class="line"><span class="token comment">// 合并写法</span></span>
<span class="line"><span class="token keyword">object</span> B<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">import</span> A<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token keyword">given</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 按给定类型导入</span></span>
<span class="line"><span class="token keyword">import</span> A<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token keyword">given</span> TC<span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">import</span> A<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token keyword">given</span> T1<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token keyword">given</span> Tn<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">object</span> Instances<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">given</span> intOrd<span class="token operator">:</span> Ordering<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token keyword">given</span> listOrd<span class="token punctuation">[</span>T<span class="token operator">:</span> Ordering<span class="token punctuation">]</span><span class="token operator">:</span> Ordering<span class="token punctuation">[</span>List<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token keyword">given</span> ec<span class="token operator">:</span> ExecutionContext <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">  <span class="token keyword">given</span> im<span class="token operator">:</span> Monoid<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 导入了 intOrd、listOrd、ec</span></span>
<span class="line"><span class="token keyword">import</span> Instances<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token keyword">given</span> Ordering<span class="token punctuation">[</span><span class="token operator">?</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">given</span> ExecutionContext<span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 类型和名称同时使用，类型放后面</span></span>
<span class="line"><span class="token keyword">import</span> Instances<span class="token punctuation">.</span><span class="token punctuation">{</span>im<span class="token punctuation">,</span> <span class="token keyword">given</span> Ordering<span class="token punctuation">[</span><span class="token operator">?</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="单例对象" tabindex="-1"><a class="header-anchor" href="#单例对象"><span>单例对象</span></a></h2><p>单例对象(Singleton)是一种设计模式，它确保一个类只有一个实例，并提供一个全局访问点来访问该实例。</p><p>在 Scala 中，<code>object</code> 关键字创建一个单例对象，<code>object</code> 定义的 <code>class</code> 只有一个实例。</p><p>这种对象的作用：</p><ul><li>工具类方法的集合：方法的访问像 Java 的 <code>static method</code>一样。</li><li>companion object：在一个文件中，class 类和 object 类有相同的名称，class 类能访问 object 的方法。</li><li>实现 <code>trait</code> 创建对象。</li></ul><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h2><p><strong>创建不可变集合：</strong></p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">val</span> a <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>           <span class="token comment">// a: List[Int] = List(1, 2, 3)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList         <span class="token comment">// b: List[Int] = List(1, 2, 3, 4, 5)</span></span>
<span class="line"><span class="token keyword">val</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">10</span> by <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList   <span class="token comment">// c: List[Int] = List(1, 3, 5, 7, 9)</span></span>
<span class="line"><span class="token keyword">val</span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> until <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList      <span class="token comment">// e: List[Int] = List(1, 2, 3, 4)</span></span>
<span class="line"><span class="token keyword">val</span> f <span class="token operator">=</span> List<span class="token punctuation">.</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">// f: List[Int] = List(1, 2, 3, 4)</span></span>
<span class="line"><span class="token keyword">val</span> g <span class="token operator">=</span> List<span class="token punctuation">.</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">// g: List[Int] = List(1, 4, 7)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>集合方法：</strong></p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">val</span> a <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>      <span class="token comment">// List(10, 20, 30, 40, 10)</span></span>
<span class="line"></span>
<span class="line">a<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                             <span class="token comment">// List(30, 40, 10) </span></span>
<span class="line">a<span class="token punctuation">.</span>dropWhile<span class="token punctuation">(</span>_ <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">)</span>                   <span class="token comment">// List(30, 40, 10) 分界点</span></span>
<span class="line">a<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">)</span>                      <span class="token comment">// List(10, 20, 10) 所有匹配</span></span>
<span class="line">a<span class="token punctuation">.</span>slice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>                          <span class="token comment">// List(30, 40) </span></span>
<span class="line">a<span class="token punctuation">.</span>tail                                <span class="token comment">// List(20, 30, 40, 10) 去头</span></span>
<span class="line">a<span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                             <span class="token comment">// List(10, 20, 30)</span></span>
<span class="line">a<span class="token punctuation">.</span>takeWhile<span class="token punctuation">(</span>_ <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span>                   <span class="token comment">// List(10, 20) 分界点</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// flatten</span></span>
<span class="line"><span class="token keyword">val</span> a <span class="token operator">=</span> List<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">a<span class="token punctuation">.</span>flatten                             <span class="token comment">// List(1, 2, 3, 4)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// map, flatMap</span></span>
<span class="line"><span class="token keyword">val</span> nums <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span></span>
<span class="line">nums<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>toUpperCase<span class="token punctuation">)</span>               <span class="token comment">// List(&quot;ONE&quot;, &quot;TWO&quot;)</span></span>
<span class="line">nums<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>toUpperCase<span class="token punctuation">)</span>           <span class="token comment">// List(&#39;O&#39;, &#39;N&#39;, &#39;E&#39;, &#39;T&#39;, &#39;W&#39;, &#39;O&#39;)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// foldLeft reduceLeft</span></span>
<span class="line"><span class="token keyword">val</span> firstTen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList</span>
<span class="line">firstTen<span class="token punctuation">.</span>reduceLeft<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>                 <span class="token comment">// 55</span></span>
<span class="line">firstTen<span class="token punctuation">.</span>foldLeft<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>              <span class="token comment">// 155 (100 is a “seed” value)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tuple</strong>：将不同的类型放入一个容器集合，2-22 元素。</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Person<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">&quot;eleven&quot;</span><span class="token punctuation">,</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Eleven&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">t<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 提取 tuple 中的值到变量</span></span>
<span class="line"><span class="token keyword">val</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> str<span class="token punctuation">,</span> person<span class="token punctuation">)</span> <span class="token operator">=</span> t</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="contextual-abstraactions" tabindex="-1"><a class="header-anchor" href="#contextual-abstraactions"><span>Contextual Abstraactions</span></a></h2><p>在某些情况下，省略一些被视为重复的方法参数调用。</p><div class="language-scala" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">val</span> addresses<span class="token operator">:</span> List<span class="token punctuation">[</span>Address<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">addresses<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>address <span class="token keyword">=&gt;</span> <span class="token punctuation">(</span>address<span class="token punctuation">.</span>city<span class="token punctuation">,</span> address<span class="token punctuation">.</span>street<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 省略了排序比较的逻辑</span></span>
<span class="line"><span class="token comment">// Scala 2</span></span>
<span class="line">addresses<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>address <span class="token keyword">=&gt;</span> <span class="token punctuation">(</span>address<span class="token punctuation">.</span>city<span class="token punctuation">,</span> address<span class="token punctuation">.</span>street<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span>Tuple2<span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token builtin">String</span><span class="token punctuation">,</span> Ordering<span class="token punctuation">.</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// Scala 3</span></span>
<span class="line">addresses<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>address <span class="token keyword">=&gt;</span> <span class="token punctuation">(</span>address<span class="token punctuation">.</span>city<span class="token punctuation">,</span> address<span class="token punctuation">.</span>street<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">using</span> Ordering<span class="token punctuation">.</span>Tuple2<span class="token punctuation">(</span>Ordering<span class="token punctuation">.</span><span class="token builtin">String</span><span class="token punctuation">,</span> Ordering<span class="token punctuation">.</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="toplevel-definitions" tabindex="-1"><a class="header-anchor" href="#toplevel-definitions"><span>Toplevel Definitions</span></a></h2><p>在 Scala 3 中，在源代码的顶层编写以下代码。</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala" data-title="scala"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token namespace">scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span></span>ArrayBuffer</span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> Topping<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> Cheese<span class="token punctuation">,</span> Pepperoni<span class="token punctuation">,</span> Mushrooms</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> Topping<span class="token punctuation">.</span>*</span>
<span class="line"><span class="token keyword">class</span> Pizza<span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">val</span> toppings <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">[</span>Topping<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> p <span class="token operator">=</span> Pizza<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extension</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">def</span> capitalizeAllWords <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>capitalize<span class="token punctuation">)</span><span class="token punctuation">.</span>mkString<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> hwUpper <span class="token operator">=</span> <span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">.</span>capitalizeAllWords</span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Money <span class="token operator">=</span> BigDecimal</span>
<span class="line"></span>
<span class="line"><span class="token comment">// more definitions here as desired ...</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@main</span> <span class="token keyword">def</span> myApp <span class="token operator">=</span></span>
<span class="line">  p<span class="token punctuation">.</span>toppings <span class="token operator">+=</span> Cheese</span>
<span class="line">  println<span class="token punctuation">(</span><span class="token string">&quot;show me the code&quot;</span><span class="token punctuation">.</span>capitalizeAllWords<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20))])}const g=i(d,[["render",m],["__file","Scala.html.vue"]]),y=JSON.parse('{"path":"/spark/Scala.html","title":"Scala","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"IDEA","slug":"idea","link":"#idea","children":[]},{"level":2,"title":"REPL","slug":"repl","link":"#repl","children":[]},{"level":2,"title":"Scala Features","slug":"scala-features","link":"#scala-features","children":[]},{"level":2,"title":"变量和数据类型","slug":"变量和数据类型","link":"#变量和数据类型","children":[{"level":3,"title":"Type","slug":"type","link":"#type","children":[]},{"level":3,"title":"自定义插值表达式","slug":"自定义插值表达式","link":"#自定义插值表达式","children":[]},{"level":3,"title":"Generic","slug":"generic","link":"#generic","children":[]},{"level":3,"title":"Intersection Type","slug":"intersection-type","link":"#intersection-type","children":[]},{"level":3,"title":"Union Type(Scala 3)","slug":"union-type-scala-3","link":"#union-type-scala-3","children":[]},{"level":3,"title":"Algebraic Data Type","slug":"algebraic-data-type","link":"#algebraic-data-type","children":[]},{"level":3,"title":"Virance(型变)","slug":"virance-型变","link":"#virance-型变","children":[]},{"level":3,"title":"Opaque Type(不透明类型)(Scala 3)","slug":"opaque-type-不透明类型-scala-3","link":"#opaque-type-不透明类型-scala-3","children":[]},{"level":3,"title":"Structural Type(Scala 3)","slug":"structural-type-scala-3","link":"#structural-type-scala-3","children":[]},{"level":3,"title":"Dependent Function Type(Scala 3)","slug":"dependent-function-type-scala-3","link":"#dependent-function-type-scala-3","children":[]}]},{"level":2,"title":"控制语句","slug":"控制语句","link":"#控制语句","children":[{"level":3,"title":"if/else","slug":"if-else","link":"#if-else","children":[]},{"level":3,"title":"for 循环","slug":"for-循环","link":"#for-循环","children":[]},{"level":3,"title":"while 循环","slug":"while-循环","link":"#while-循环","children":[]},{"level":3,"title":"match 表达式","slug":"match-表达式","link":"#match-表达式","children":[]},{"level":3,"title":"try/catch/finally","slug":"try-catch-finally","link":"#try-catch-finally","children":[]}]},{"level":2,"title":"Domain Modeling","slug":"domain-modeling","link":"#domain-modeling","children":[{"level":3,"title":"Tools","slug":"tools","link":"#tools","children":[]},{"level":3,"title":"OOP Modeling","slug":"oop-modeling","link":"#oop-modeling","children":[]},{"level":3,"title":"FP Modeling","slug":"fp-modeling","link":"#fp-modeling","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"方法定义","slug":"方法定义","link":"#方法定义","children":[]},{"level":3,"title":"main","slug":"main","link":"#main","children":[]}]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[{"level":3,"title":"匿名函数","slug":"匿名函数","link":"#匿名函数","children":[]},{"level":3,"title":"函数变量","slug":"函数变量","link":"#函数变量","children":[]},{"level":3,"title":"部分函数","slug":"部分函数","link":"#部分函数","children":[]},{"level":3,"title":"ETA-Expansion","slug":"eta-expansion","link":"#eta-expansion","children":[]},{"level":3,"title":"HOF","slug":"hof","link":"#hof","children":[]}]},{"level":2,"title":"package 和 import","slug":"package-和-import","link":"#package-和-import","children":[{"level":3,"title":"package","slug":"package","link":"#package","children":[]},{"level":3,"title":"import","slug":"import","link":"#import","children":[]}]},{"level":2,"title":"单例对象","slug":"单例对象","link":"#单例对象","children":[]},{"level":2,"title":"集合","slug":"集合","link":"#集合","children":[]},{"level":2,"title":"Contextual Abstraactions","slug":"contextual-abstraactions","link":"#contextual-abstraactions","children":[]},{"level":2,"title":"Toplevel Definitions","slug":"toplevel-definitions","link":"#toplevel-definitions","children":[]}],"git":{"updatedTime":1761182358000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":2,"url":"https://github.com/oycm"},{"name":"ouyangcm","username":"ouyangcm","email":"mingorg@163.com","commits":14,"url":"https://github.com/ouyangcm"}]},"filePathRelative":"spark/Scala.md"}');export{g as comp,y as data};
