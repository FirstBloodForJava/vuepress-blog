import{_ as s,c as a,e as t,o as e}from"./app-DO9Fsueg.js";const p={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="spring-jpa" tabindex="-1"><a class="header-anchor" href="#spring-jpa"><span>Spring-JPA</span></a></h1><h2 id="_1、jpa是什么" tabindex="-1"><a class="header-anchor" href="#_1、jpa是什么"><span>1、JPA是什么</span></a></h2><p>JPA 是 JCP 组织发布的 Java EE 标准之一，因此任何声称符合 JPA 标准的框架都遵循同样的架构，提供相同的访问API，这保证了基于JPA开发的企业应用能够经过少量的修改就能够在不同的JPA框架下运行。</p><p>JPA 提供了一种标准化的、面向对象的方式来处理对象与关系数据库之间的映射和持久化操作。它提供了丰富的注解和接口，使开发人员能够更轻松地进行数据库操作，同时提高了代码的可移植性和可维护性，用于简化对象关系映射（ORM）的开发工作。JPA 是 Java EE（现在称为 Jakarta EE）的一部分，并且可以与任何支持 JPA 规范的 ORM 框架一起使用，最著名的实现是 Hibernate。</p><p><strong>核心概念：</strong></p><ol><li>实体（Entity）：实体是应用程序中持久化到数据库的对象。在 JPA 中，实体通常映射到数据库中的表，并且实体类使用 <code>@Entity</code> 注解进行标识。</li><li>属性（Attributes）：实体类的属性对应于数据库表的列。JPA 使用注解（如 <code>@Column</code>）来指定属性与列的映射关系，包括列名、数据类型、长度、索引等。</li><li>主键（Primary Key）：每个实体都必须有一个主键，用于唯一标识实体。JPA 提供了多种方式来定义主键，包括自动生成、手动指定、复合主键等。</li><li>关联关系（Relationship）：JPA 支持在实体之间建立关联关系，如一对一、一对多、多对一和多对多。关联关系使用注解（如 <code>@OneToOne</code>、<code>@OneToMany</code>、<code>@ManyToOne</code> 和 <code>@ManyToMany</code>）进行标识。</li><li>EntityManager：EntityManager 是 JPA 的核心接口之一，用于管理实体对象的生命周期和执行数据库操作。它提供了持久化（保存、更新、删除）、查询、事务管理等功能。</li><li>JPQL（Java Persistence Query Language）：JPQL 是一种面向对象的查询语言，类似于 SQL，但是操作的是实体对象而不是表和列。JPQL 允许开发人员以对象模型的方式编写查询语句，从而提供了更加灵活和面向对象的查询能力。</li><li>ORM（Object-Relational Mapping）：ORM 是一种将关系型数据库和面向对象编程语言之间数据的转换技术。JPA 提供了一种方便的 ORM 实现，通过注解和配置，可以实现实体对象与数据库表之间的映射，从而实现对象与数据库之间的转换和持久化。</li></ol><h2 id="_2、springdatajpa是什么" tabindex="-1"><a class="header-anchor" href="#_2、springdatajpa是什么"><span>2、SpringDataJPA是什么</span></a></h2><p>Spring Data JPA 是 Spring 框架提供的一个用于简化与数据库交互的模块。它基于 Java Persistence API（JPA）规范，并提供了许多便捷的功能，使得在使用关系型数据库时更加容易和高效。</p><p><strong>SpringDataJPA的功能：</strong></p><ol><li>对象关系映射（ORM）：Spring Data JPA 提供了一种简单的方式来将 Java 对象与数据库表之间进行映射。通过使用注解或 XML 配置，可以定义实体类、表之间的关系以及字段的映射规则，从而将对象持久化到数据库中。</li><li>自动化 CRUD 操作：Spring Data JPA 提供了自动化的 CRUD（创建、读取、更新、删除）操作。只需定义接口，并继承 <code>CrudRepository</code> 或 <code>JpaRepository</code> 接口，就可以获得常见的数据库操作方法，如保存实体、查询实体、删除实体等，无需手动编写常见的 CRUD 代码。</li><li>查询方法的自动生成：Spring Data JPA 根据方法命名规则自动生成查询语句。例如，根据方法名 <code>findByFirstName(String firstName)</code> 自动生成的查询语句将查找指定 <code>firstName</code> 的实体。还可以使用更复杂的命名规则来生成更复杂的查询语句。</li><li>分页和排序：Spring Data JPA 支持轻松实现分页和排序功能。通过在方法中传递 <code>Pageable</code> 对象，可以在查询中指定页数、每页条数以及排序规则，从而方便地进行分页查询。</li><li>复杂查询支持：Spring Data JPA 支持使用 JPA Criteria 查询、JPQL（Java Persistence Query Language）查询和本地 SQL 查询等多种查询方式，以满足复杂查询需求。</li><li>事务管理：Spring Data JPA 集成了 Spring 的事务管理功能，可以通过简单的配置实现对数据库事务的管理，确保数据的一致性和完整性。</li><li>异步查询：Spring Data JPA 还提供了异步查询的支持，通过使用 <code>@Async</code> 注解，可以在执行查询时异步地处理数据库操作，提高系统的并发性能。</li></ol><h2 id="_3、核心概念" tabindex="-1"><a class="header-anchor" href="#_3、核心概念"><span>3、核心概念</span></a></h2><h3 id="_3-1、crudrepository" tabindex="-1"><a class="header-anchor" href="#_3-1、crudrepository"><span>3.1、CrudRepository</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">S</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">S</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1   </span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">ID</span> primaryKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 </span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3               </span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4                        </span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5             </span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">boolean</span> <span class="token function">existsById</span><span class="token punctuation">(</span><span class="token class-name">ID</span> primaryKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// … more functionality omitted.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>保存一个给定的对象</li><li>通过id（主键）查询对象</li><li>查询所有对象</li><li>查询所有对象的总数</li><li>删除给定的对象</li><li>判断给定的id（主键）是否存在</li></ol><h3 id="_3-2、jparepository" tabindex="-1"><a class="header-anchor" href="#_3-2、jparepository"><span>3.2、JpaRepository</span></a></h3><h3 id="_3-3、pagingandsortingrepository" tabindex="-1"><a class="header-anchor" href="#_3-3、pagingandsortingrepository"><span>3.3、PagingAndSortingRepository</span></a></h3><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PagingAndSortingRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">PagingAndSortingRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> repository <span class="token operator">=</span> <span class="token comment">// … get access to a bean</span></span>
<span class="line"><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="_3-4、分页和排序" tabindex="-1"><a class="header-anchor" href="#_3-4、分页和排序"><span>3.4、分页和排序</span></a></h3><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Sort</span> sort <span class="token operator">=</span> <span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ascending</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token string">&quot;lastname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">TypedSort</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> person <span class="token operator">=</span> <span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Sort</span> sort <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getFirstname</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ascending</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getLastname</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">QSort</span> sort <span class="token operator">=</span> <span class="token class-name">QSort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">QPerson</span><span class="token punctuation">.</span>firstname<span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">QSort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">QPerson</span><span class="token punctuation">.</span>lastname<span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="_3-5、支持的方法名查询" tabindex="-1"><a class="header-anchor" href="#_3-5、支持的方法名查询"><span>3.5、支持的方法名查询</span></a></h3><table><thead><tr><th style="text-align:left;">关键词</th><th style="text-align:left;">样本</th><th style="text-align:left;">JPQL 片段</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Distinct</code></td><td style="text-align:left;"><code>findDistinctByLastnameAndFirstname</code></td><td style="text-align:left;"><code>select distinct … where x.lastname = ?1 and x.firstname = ?2</code></td></tr><tr><td style="text-align:left;"><code>And</code></td><td style="text-align:left;"><code>findByLastnameAndFirstname</code></td><td style="text-align:left;"><code>… where x.lastname = ?1 and x.firstname = ?2</code></td></tr><tr><td style="text-align:left;"><code>Or</code></td><td style="text-align:left;"><code>findByLastnameOrFirstname</code></td><td style="text-align:left;"><code>… where x.lastname = ?1 or x.firstname = ?2</code></td></tr><tr><td style="text-align:left;"><code>Is</code>, <code>Equals</code></td><td style="text-align:left;"><code>findByFirstname</code>,<code>findByFirstnameIs</code>,<code>findByFirstnameEquals</code></td><td style="text-align:left;"><code>… where x.firstname = ?1</code></td></tr><tr><td style="text-align:left;"><code>Between</code></td><td style="text-align:left;"><code>findByStartDateBetween</code></td><td style="text-align:left;"><code>… where x.startDate between ?1 and ?2</code></td></tr><tr><td style="text-align:left;"><code>LessThan</code></td><td style="text-align:left;"><code>findByAgeLessThan</code></td><td style="text-align:left;"><code>… where x.age &lt; ?1</code></td></tr><tr><td style="text-align:left;"><code>LessThanEqual</code></td><td style="text-align:left;"><code>findByAgeLessThanEqual</code></td><td style="text-align:left;"><code>… where x.age &lt;= ?1</code></td></tr><tr><td style="text-align:left;"><code>GreaterThan</code></td><td style="text-align:left;"><code>findByAgeGreaterThan</code></td><td style="text-align:left;"><code>… where x.age &gt; ?1</code></td></tr><tr><td style="text-align:left;"><code>GreaterThanEqual</code></td><td style="text-align:left;"><code>findByAgeGreaterThanEqual</code></td><td style="text-align:left;"><code>… where x.age &gt;= ?1</code></td></tr><tr><td style="text-align:left;"><code>After</code></td><td style="text-align:left;"><code>findByStartDateAfter</code></td><td style="text-align:left;"><code>… where x.startDate &gt; ?1</code></td></tr><tr><td style="text-align:left;"><code>Before</code></td><td style="text-align:left;"><code>findByStartDateBefore</code></td><td style="text-align:left;"><code>… where x.startDate &lt; ?1</code></td></tr><tr><td style="text-align:left;"><code>IsNull</code>,<code>Null</code></td><td style="text-align:left;"><code>findByAge(Is)Null</code></td><td style="text-align:left;"><code>… where x.age is null</code></td></tr><tr><td style="text-align:left;"><code>IsNotNull</code>,<code>NotNull</code></td><td style="text-align:left;"><code>findByAge(Is)NotNull</code></td><td style="text-align:left;"><code>… where x.age not null</code></td></tr><tr><td style="text-align:left;"><code>Like</code></td><td style="text-align:left;"><code>findByFirstnameLike</code></td><td style="text-align:left;"><code>… where x.firstname like ?1</code></td></tr><tr><td style="text-align:left;"><code>NotLike</code></td><td style="text-align:left;"><code>findByFirstnameNotLike</code></td><td style="text-align:left;"><code>… where x.firstname not like ?1</code></td></tr><tr><td style="text-align:left;"><code>StartingWith</code></td><td style="text-align:left;"><code>findByFirstnameStartingWith</code></td><td style="text-align:left;"><code>… where x.firstname like ?1</code>（附加绑定的参数<code>%</code>）</td></tr><tr><td style="text-align:left;"><code>EndingWith</code></td><td style="text-align:left;"><code>findByFirstnameEndingWith</code></td><td style="text-align:left;"><code>… where x.firstname like ?1</code>（带前缀的参数绑定<code>%</code>）</td></tr><tr><td style="text-align:left;"><code>Containing</code></td><td style="text-align:left;"><code>findByFirstnameContaining</code></td><td style="text-align:left;"><code>… where x.firstname like ?1</code>（包裹在 中的参数绑定<code>%</code>）</td></tr><tr><td style="text-align:left;"><code>OrderBy</code></td><td style="text-align:left;"><code>findByAgeOrderByLastnameDesc</code></td><td style="text-align:left;"><code>… where x.age = ?1 order by x.lastname desc</code></td></tr><tr><td style="text-align:left;"><code>Not</code></td><td style="text-align:left;"><code>findByLastnameNot</code></td><td style="text-align:left;"><code>… where x.lastname &lt;&gt; ?1</code></td></tr><tr><td style="text-align:left;"><code>In</code></td><td style="text-align:left;"><code>findByAgeIn(Collection&lt;Age&gt; ages)</code></td><td style="text-align:left;"><code>… where x.age in ?1</code></td></tr><tr><td style="text-align:left;"><code>NotIn</code></td><td style="text-align:left;"><code>findByAgeNotIn(Collection&lt;Age&gt; ages)</code></td><td style="text-align:left;"><code>… where x.age not in ?1</code></td></tr><tr><td style="text-align:left;"><code>True</code></td><td style="text-align:left;"><code>findByActiveTrue()</code></td><td style="text-align:left;"><code>… where x.active = true</code></td></tr><tr><td style="text-align:left;"><code>False</code></td><td style="text-align:left;"><code>findByActiveFalse()</code></td><td style="text-align:left;"><code>… where x.active = false</code></td></tr><tr><td style="text-align:left;"><code>IgnoreCase</code></td><td style="text-align:left;"><code>findByFirstnameIgnoreCase</code></td><td style="text-align:left;"><code>… where UPPER(x.firstname) = UPPER(?1)</code></td></tr></tbody></table><h3 id="_3-6、-query使用" tabindex="-1"><a class="header-anchor" href="#_3-6、-query使用"><span>3.6、@Query使用</span></a></h3><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.emailAddress = ?1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token class-name">User</span> <span class="token function">findByEmailAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>like查询：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.firstname like %?1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByFirstnameEndsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>nativeQuery查询：</strong></p><ol><li><code>nativeQuery = false</code> 未开启（默认情况）： <ul><li>使用 JPA 提供的查询语言（JPQL）执行查询操作。</li><li>查询语句使用实体类和属性的名称，而不是数据库的表名和列名。</li><li>JPA 会根据实体类的映射关系，自动生成适当的 SQL 查询语句。</li><li>JPA 可以提供更高级的特性，如延迟加载、级联操作等。</li></ul></li><li><code>nativeQuery = true</code> 开启： <ul><li>使用原生 SQL 查询语句执行查询操作。</li><li>查询语句直接使用数据库的表名和列名。</li><li>开发人员需要手动编写 SQL 查询语句，并负责处理实体类与查询结果之间的映射关系。</li><li>可以使用 SQL 的特性和语法，如复杂的联接查询、存储过程调用等。</li><li>JPA 提供的高级特性（如延迟加载、级联操作）可能不适用于原生查询结果，需要开发人员自行处理。</li></ul></li></ol><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM USERS WHERE EMAIL_ADDRESS = ?1&quot;</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token class-name">User</span> <span class="token function">findByEmailAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>分页查询，并且获取总数：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM USERS WHERE LASTNAME = ?1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    countQuery <span class="token operator">=</span> <span class="token string">&quot;SELECT count(*) FROM USERS WHERE LASTNAME = ?1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>排序：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.lastname like ?1%&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByAndSort</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u.id, LENGTH(u.firstname) as fn_len from User u where u.lastname like ?1%&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">findByAsArrayAndSort</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">repo<span class="token punctuation">.</span><span class="token function">findByAndSort</span><span class="token punctuation">(</span><span class="token string">&quot;lannister&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1               </span></span>
<span class="line">repo<span class="token punctuation">.</span><span class="token function">findByAndSort</span><span class="token punctuation">(</span><span class="token string">&quot;stark&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token string">&quot;LENGTH(firstname)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2            </span></span>
<span class="line">repo<span class="token punctuation">.</span><span class="token function">findByAndSort</span><span class="token punctuation">(</span><span class="token string">&quot;targaryen&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JpaSort</span><span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token string">&quot;LENGTH(firstname)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 </span></span>
<span class="line">repo<span class="token punctuation">.</span><span class="token function">findByAsArrayAndSort</span><span class="token punctuation">(</span><span class="token string">&quot;bolton&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token string">&quot;fn_len&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4  </span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>有效</li><li>无效</li><li>有效</li><li>有效，指向别名</li></ol><p><strong>别名传参：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.firstname = :firstname or u.lastname = :lastname&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token class-name">User</span> <span class="token function">findByLastnameOrFirstname</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;lastname&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> lastname<span class="token punctuation">,</span></span>
<span class="line">                                 <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> firstname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>SpEL 表达式：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Entity</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Id</span></span>
<span class="line">  <span class="token annotation punctuation">@GeneratedValue</span></span>
<span class="line">  <span class="token class-name">Long</span> id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">String</span> lastname<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from #{#entityName} u where u.lastname = ?1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@MappedSuperclass</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractMappedType</span> <span class="token punctuation">{</span></span>
<span class="line">  …</span>
<span class="line">  <span class="token class-name">String</span> attribute</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Entity</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteType</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMappedType</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@NoRepositoryBean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MappedTypeRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMappedType</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select t from #{#entityName} t where t.attribute = ?1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAllByAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConcreteRepository</span></span>
<span class="line">  <span class="token keyword">extends</span> <span class="token class-name">MappedTypeRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConcreteType</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.firstname = ?1 and u.firstname=?#{[0]} and u.emailAddress = ?#{principal.emailAddress}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByFirstnameAndCurrentUserWithCustomQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>?#{[0]}表示获取这个方法的第一个参数</p><p>?#{principal.emailAddress}表示获取SpringSecurity中登录用户的邮箱</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.lastname like %:#{[0]}% and u.lastname like %:lastname%&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastnameWithSpelExpression</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;lastname&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// sql注入问题</span></span>
<span class="line"></span></code></pre></div><p><strong>转义%、_模糊查询通配符：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.firstname like %?#{escape([0])}% escape ?#{escapeCharacter()}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findContainingEscaped</span><span class="token punctuation">(</span><span class="token class-name">String</span> namePart<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>声明更新语句：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Modifying</span></span>
<span class="line"><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;update User u set u.firstname = ?1 where u.lastname = ?2&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">setFixedFirstnameFor</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">,</span> <span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>声明删除语句：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">deleteByRoleId</span><span class="token punctuation">(</span><span class="token keyword">long</span> roleId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Modifying</span></span>
<span class="line">  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;delete from User u where u.role.id = ?1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">deleteInBulkByRoleId</span><span class="token punctuation">(</span><span class="token keyword">long</span> roleId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_4、entitymanager" tabindex="-1"><a class="header-anchor" href="#_4、entitymanager"><span>4、EntityManager</span></a></h2><p>在 Spring Data JPA 中，EntityManager 是用于与持久化上下文交互的关键接口之一。它提供了对持久化操作的管理和执行能力。下面是 EntityManager 的几个主要作用：</p><ol><li>实体管理：EntityManager 负责管理实体对象的生命周期，包括实体对象的创建、加载、持久化、合并和删除等操作。它允许你对实体进行增删改查操作，以及对实体对象的属性进行修改和跟踪。</li><li>持久化操作：EntityManager 提供了持久化操作的方法，如 persist()、merge()、remove() 等。你可以使用 EntityManager 将实体对象持久化到数据库中，从数据库中加载实体对象，更新实体对象的状态，以及删除实体对象。</li><li>事务管理：EntityManager 支持事务管理，你可以通过 EntityManager 开启、提交或回滚事务，以保证数据的一致性和完整性。它与 Spring 的事务管理机制集成，可以与 Spring 的事务注解或编程式事务管理一起使用。</li><li>查询操作：EntityManager 提供了创建和执行查询的能力。你可以使用 EntityManager 创建 JPQL（Java Persistence Query Language）查询、本地 SQL 查询或命名查询，并对查询结果进行处理和操作。</li><li>缓存管理：EntityManager 管理实体对象的缓存，提供了一级缓存（即持久化上下文）的功能。通过 EntityManager，你可以控制实体对象的缓存策略、清除缓存、刷新缓存等操作，以提高查询性能和减少数据库访问。</li></ol><p>总之，EntityManager 在 Spring Data JPA 中起着关键作用，用于管理实体对象的生命周期、执行持久化操作、处理事务、执行查询和管理缓存等。它是与底层数据库交互的核心接口，为应用程序提供了便捷的持久化操作和管理功能。</p><h2 id="_5、sping的transactin事务失效场景" tabindex="-1"><a class="header-anchor" href="#_5、sping的transactin事务失效场景"><span>5、Sping的Transactin事务失效场景</span></a></h2><h3 id="_5-1、场景一" tabindex="-1"><a class="header-anchor" href="#_5-1、场景一"><span>5.1、场景一</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Transaction</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   </span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 递归调用之前的逻辑</span></span>
<span class="line">        <span class="token comment">// 递归调用的数据写入操作</span></span>
<span class="line">        <span class="token keyword">boolean</span> resultFlag <span class="token operator">=</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>resultFlag<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">.</span><span class="token function">currentTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 递归调用执行逻辑</span></span>
<span class="line">        <span class="token comment">// 数据写入数据库</span></span>
<span class="line">        <span class="token comment">// return保持false，保证手动事务回滚代码必须执行</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">testMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Transaction</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 执行数据写入</span></span>
<span class="line">    <span class="token comment">// 手动抛出运行时异常</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">testMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接调用method1方法测试事务是否被成功管理，没有问题。</p><p>通过testMethod1方法间接调用method1方法会导致整个事务都失效，可以通过端点测试，发现只要执行了数据写入操作，数据已经到数据库能够看见。</p><p>testMethod2()这种执行也会导致method2中方法事务失效。</p><p>一个没有被 <code>@Transactional</code> 注解修饰的方法调用了一个被 <code>@Transactional</code> 注解修饰的方法，事务就会失效。这是因为事务的增强是通过 AOP 实现的，AOP 是基于代理的。当一个没有被 <code>@Transactional</code> 注解修饰的方法调用了一个有事务注解的方法时，实际上是通过同一个对象的方法调用，并没有经过代理。因此，事务增强不会触发，也就是说，没有事务将被创建，被调用方法（B）将在其自己的事务范围内执行，而不会受到调用方法（A）事务的影响。</p><p>两种解决方式：</p><ol><li>调用<code>@Transaction</code>注解的方法处加上<code>@Transaction</code>注解。</li><li>该方法注入自己这个对象，调用<code>@Transaction</code>修饰的方法时，通过注入的对象调用。</li></ol>`,64)]))}const i=s(p,[["render",l],["__file","SpringDataJPA.html.vue"]]),u=JSON.parse('{"path":"/spring/dataAccess/SpringDataJPA.html","title":"Spring-JPA","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1、JPA是什么","slug":"_1、jpa是什么","link":"#_1、jpa是什么","children":[]},{"level":2,"title":"2、SpringDataJPA是什么","slug":"_2、springdatajpa是什么","link":"#_2、springdatajpa是什么","children":[]},{"level":2,"title":"3、核心概念","slug":"_3、核心概念","link":"#_3、核心概念","children":[{"level":3,"title":"3.1、CrudRepository","slug":"_3-1、crudrepository","link":"#_3-1、crudrepository","children":[]},{"level":3,"title":"3.2、JpaRepository","slug":"_3-2、jparepository","link":"#_3-2、jparepository","children":[]},{"level":3,"title":"3.3、PagingAndSortingRepository","slug":"_3-3、pagingandsortingrepository","link":"#_3-3、pagingandsortingrepository","children":[]},{"level":3,"title":"3.4、分页和排序","slug":"_3-4、分页和排序","link":"#_3-4、分页和排序","children":[]},{"level":3,"title":"3.5、支持的方法名查询","slug":"_3-5、支持的方法名查询","link":"#_3-5、支持的方法名查询","children":[]},{"level":3,"title":"3.6、@Query使用","slug":"_3-6、-query使用","link":"#_3-6、-query使用","children":[]}]},{"level":2,"title":"4、EntityManager","slug":"_4、entitymanager","link":"#_4、entitymanager","children":[]},{"level":2,"title":"5、Sping的Transactin事务失效场景","slug":"_5、sping的transactin事务失效场景","link":"#_5、sping的transactin事务失效场景","children":[{"level":3,"title":"5.1、场景一","slug":"_5-1、场景一","link":"#_5-1、场景一","children":[]}]}],"git":{"updatedTime":1746970717000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":1,"url":"https://github.com/oycm"}]},"filePathRelative":"spring/dataAccess/SpringDataJPA.md"}');export{i as comp,u as data};
