import{_ as l,c as i,e as c,b as u,d as p,r,o as k,f as s,a as n}from"./app-DO9Fsueg.js";const d={};function m(v,a){const o=r("Tabs");return k(),i("div",null,[a[4]||(a[4]=c(`<h1 id="spring-kafka" tabindex="-1"><a class="header-anchor" href="#spring-kafka"><span>spring-kafka</span></a></h1><h2 id="springboot快速使用kafka" tabindex="-1"><a class="header-anchor" href="#springboot快速使用kafka"><span>SpringBoot快速使用Kafka</span></a></h2><p>添加依赖：</p><div class="language-xml" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token class-name">CommandLineRunner</span> <span class="token function">myCommandLineRunner</span><span class="token punctuation">(</span><span class="token class-name">CustomerRepository</span> repository<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 向kafka发送消息</span></span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;org.test1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foo1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;org.test1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foo2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;org.test1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foo3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 等待直到 超时或计数器为0</span></span>
<span class="line">        latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;All received&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 消费者</span></span>
<span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;org.test1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cr<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;consumer: &quot;</span> <span class="token operator">+</span> cr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>springboot配置：</p><div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">bootstrapServers</span><span class="token punctuation">:</span> 47.101.155.205<span class="token punctuation">:</span><span class="token number">9092</span></span>
<span class="line">    <span class="token key atrule">consumer</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">group-id</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>kafka</span>
<span class="line">      <span class="token key atrule">auto-offset-reset</span><span class="token punctuation">:</span> earliest</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="spring-kafka-1" tabindex="-1"><a class="header-anchor" href="#spring-kafka-1"><span>Spring-Kafka</span></a></h2><h3 id="_1-topic" tabindex="-1"><a class="header-anchor" href="#_1-topic"><span>1.Topic</span></a></h3><p>在Spring的上下文中添加<code>KafkaAdmin</code> Bean，可以通过定义<code>NewTopic</code> Bean创建Topic。</p><p><strong>SpringBoot应用自动注册KafkaAdmin Bean。</strong></p><p>可以通过<code>spring.kafka.admin.failFast=true/false</code>配置是否快速失败，当Kafka Broker不可用时。</p><p><strong>使用Bean创建Topic：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">KafkaAdmin</span> <span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> configs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    configs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">AdminClientConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaAdmin</span><span class="token punctuation">(</span>configs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">NewTopic</span> <span class="token function">topic1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">TopicBuilder</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;thing1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">partitions</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">replicas</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">NewTopic</span> <span class="token function">topic2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">TopicBuilder</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;thing2&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">partitions</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">replicas</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token class-name">TopicConfig</span><span class="token punctuation">.</span><span class="token constant">COMPRESSION_TYPE_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;zstd&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">NewTopic</span> <span class="token function">topic3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">TopicBuilder</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;thing3&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">assignReplicas</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">assignReplicas</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">assignReplicas</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token class-name">TopicConfig</span><span class="token punctuation">.</span><span class="token constant">COMPRESSION_TYPE_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;zstd&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-发送消息" tabindex="-1"><a class="header-anchor" href="#_2-发送消息"><span>2.发送消息</span></a></h3><h4 id="kafkatemplate" tabindex="-1"><a class="header-anchor" href="#kafkatemplate"><span>KafkaTemplate</span></a></h4><p>API支持添加时间戳作为参数存储在记录中。时间戳是否使用在于Kafka主题的Topic配置，如果设置为<code>CreateTime</code>，则会使用消息的时间戳(未设置则自动生成)。配置为<code>LogAppendTime</code>则忽略消息的时间戳，使用日志追加时间。</p><p><strong>自定义创建KafkaTempalate方式：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">producerConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">producerConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// See https://kafka.apache.org/documentation/#producerconfigs for more properties</span></span>
<span class="line">    <span class="token keyword">return</span> props<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送消息回调机制，默认Template配置ProducerListener实现LoggingProducerListener，在发送失败时记录日志。</p><p>如果需要阻塞发送线程等待结果，可以调用Feature.get()方法。</p><p><strong>非阻塞等待：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendToKafka</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Data</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">=</span> <span class="token function">createRecord</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    future<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListenableFutureCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">handleSuccess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">handleFailure</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> record<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>阻塞等待：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendToKafka</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Data</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">=</span> <span class="token function">createRecord</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">handleSuccess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">handleFailure</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> record<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> <span class="token operator">|</span> <span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">handleFailure</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> record<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="defaultkafkaproducerfactory" tabindex="-1"><a class="header-anchor" href="#defaultkafkaproducerfactory"><span>DefaultKafkaProducerFactory</span></a></h4><p>DefaultKafkaProducerFactory是ProducerFactory实现，用于创建生产者。</p><p>当不适用事务的情况下，DefaultKafkaProducerFactory为所有的线程提供单例生产者。工厂新增属性producerPerThread=true时，支持通过ThreadLocal为每个线程创建一个当都的生产者。</p><p><strong>producerPerThread=true时，不再需要生产者时，需要调用closeThreadBoundProducer()关闭连接，清空缓存。</strong></p><p>通过构造方法设置Key/Value的序列化方式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">CustomValue</span><span class="token punctuation">&gt;</span></span> <span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">producerConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">CustomValueSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">CustomValue</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">CustomValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="replyingkafkatemplate" tabindex="-1"><a class="header-anchor" href="#replyingkafkatemplate"><span>ReplyingKafkaTemplate</span></a></h4><p>ReplyingKafkaOperations接口提供了两个方法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReplyingKafkaOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 发送消息，并等待默认时间(默认5s)的响应</span></span>
<span class="line">	<span class="token class-name">RequestReplyFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">sendAndReceive</span><span class="token punctuation">(</span><span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	</span>
<span class="line">	<span class="token class-name">RequestReplyFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">sendAndReceive</span><span class="token punctuation">(</span><span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Duration</span> replyTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求+应答模式，生产者将消息发送到Kafka，消费者消费后，将消息推送另外的topic；生产者可以等待消费者推送的消息。</p><p><strong>如果生产者中配置的消费者的方法存在返回值，默认会导致启动失败。</strong></p>`,36)),u(o,{id:"90",data:[{id:"生产者"},{id:"消费者"}]},{title0:p(({value:t,isActive:e})=>a[0]||(a[0]=[s("生产者")])),title1:p(({value:t,isActive:e})=>a[1]||(a[1]=[s("消费者")])),tab0:p(({value:t,isActive:e})=>a[2]||(a[2]=[n("p",null,"配置：",-1),n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// 创建Kafka消费者")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@Bean")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ConcurrentMessageListenerContainer"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"repliesContainer"),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"ConcurrentKafkaListenerContainerFactory"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" containerFactory"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"ConcurrentMessageListenerContainer"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" repliesContainer "),n("span",{class:"token operator"},"=")]),s(`
`),n("span",{class:"line"},[s("        containerFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createContainer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"reply"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    repliesContainer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getContainerProperties"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setGroupId"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"replyGroup"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    repliesContainer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setAutoStartup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" repliesContainer"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 创建 ReplyingKafkaTemplate")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@Bean")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ReplyingKafkaTemplate"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"replyingTemplate"),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token class-name"},"ProducerFactory"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" pf"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token class-name"},"ConcurrentMessageListenerContainer"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" repliesContainer"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"ReplyingKafkaTemplate"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" replyTemplate "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ReplyingKafkaTemplate"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),s("pf"),n("span",{class:"token punctuation"},","),s(" repliesContainer"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// 覆盖默认的超时时间")]),s(`
`),n("span",{class:"line"},[s("    replyTemplate"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setDefaultReplyTimeout"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Duration"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ofSeconds"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" replyTemplate"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,"发送消息并等待：",-1),n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@Service")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"ReplyKafkaService"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"Logger"),s(" logger "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"LoggerFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getLogger"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ReplyKafkaService"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"ReplyingKafkaTemplate"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" replyingKafkaTemplate"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ReplyKafkaService"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ReplyingKafkaTemplate"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" replyingKafkaTemplate"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("replyingKafkaTemplate "),n("span",{class:"token operator"},"="),s(" replyingKafkaTemplate"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"sendAndReceive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" message"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 创建消息")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"ProducerRecord"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" record "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ProducerRecord"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"request"'),n("span",{class:"token punctuation"},","),s(" message"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// todo 可以去掉 两个头，这个会根据发送者的配置自动添加")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 添加回复的主题")]),s(`
`),n("span",{class:"line"},[s("        record"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"headers"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RecordHeader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"KafkaHeaders"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"REPLY_TOPIC"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"reply"'),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getBytes"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 关联id")]),s(`
`),n("span",{class:"line"},[s("        record"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"headers"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RecordHeader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"KafkaHeaders"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"CORRELATION_ID"),n("span",{class:"token punctuation"},","),s(" record"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getBytes"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 发送")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"RequestReplyFuture"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" replyFuture "),n("span",{class:"token operator"},"="),s(" replyingKafkaTemplate"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sendAndReceive"),n("span",{class:"token punctuation"},"("),s("record"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 获取发送结果")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"SendResult"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" sendResult "),n("span",{class:"token operator"},"="),s(" replyFuture"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getSendFuture"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"TimeUnit"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"SECONDS"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        logger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Sent ok: "'),s(),n("span",{class:"token operator"},"+"),s(" sendResult"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getRecordMetadata"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        logger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Sent json: "'),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token class-name"},"JsonUtils"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"objToString"),n("span",{class:"token punctuation"},"("),s("sendResult"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getRecordMetadata"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 获取回答结果")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"ConsumerRecord"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" consumerRecord "),n("span",{class:"token operator"},"="),s(" replyFuture"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"TimeUnit"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"SECONDS"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        logger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Return value: "'),s(),n("span",{class:"token operator"},"+"),s(" consumerRecord"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(" consumerRecord"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,null,-1)])),tab1:p(({value:t,isActive:e})=>a[3]||(a[3]=[n("div",{class:"language-java","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@KafkaListener"),n("span",{class:"token punctuation"},"("),s("topics "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"request"'),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@SendTo")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"listen"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" in"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    logger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"request: message: {}"'),n("span",{class:"token punctuation"},","),s(" in"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" in"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toUpperCase"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])])],-1)])),_:1}),a[5]||(a[5]=c(`<h4 id="aggregatingreplyingkafkatemplate" tabindex="-1"><a class="header-anchor" href="#aggregatingreplyingkafkatemplate"><span>AggregatingReplyingKafkaTemplate</span></a></h4><p>https://www.enterpriseintegrationpatterns.com/patterns/messaging/BroadcastAggregate.html</p><h3 id="_3-接收消息" tabindex="-1"><a class="header-anchor" href="#_3-接收消息"><span>3.接收消息</span></a></h3><p>可以通过<code>MessageListenerContainer</code>配置消息监听器或<code>@KafkaListener</code>注解来消费消息。</p><p>消息监听器类型：超类(GenericMessageListener)</p><ol><li>MessageListener：接收对象是<code>ConsumerRecord</code>类型。自动提交</li><li>AcknowledgingMessageListener：接收对象是<code>ConsumerRecord</code>类型。手动提交</li><li>ConsumerAwareMessageListener：接收对象是<code>ConsumerRecord</code>类型。自动提交，可访问Consumer对象</li><li>AcknowledgingConsumerAwareMessageListener：接收对象是<code>ConsumerRecord</code>类型。手动提交，可访问Consumer对象</li><li>BatchMessageListener：接收对象是List&lt;ConsumerRecord&gt;类型。</li><li>BatchAcknowledgingMessageListener:接收对象是List&lt;ConsumerRecord&gt;类型。</li><li>BatchConsumerAwareMessageListener:接收对象是List&lt;ConsumerRecord&gt;类型。</li><li>BatchAcknowledgingConsumerAwareMessageListener：接收对象是List&lt;ConsumerRecord&gt;类型。</li></ol><h4 id="messagelistenercontainer" tabindex="-1"><a class="header-anchor" href="#messagelistenercontainer"><span>MessageListenerContainer</span></a></h4><p>提供了两个实现：</p><ul><li>KafkaMessageListenerContainer：在单个线程处理上处理所有消息。</li><li>ConcurrentMessageListenerContainer：委托给一个或多个KafkaMessageListenerContainer多线程处理消息。</li></ul><p><strong>可以往监听器容器中添加RecordInterceptor，这个会在调用监听器之前调用，可以检查或修改recore。</strong></p><p><strong>KafkaMessageListenerContainer：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 准备监听器容器的配置</span></span>
<span class="line"><span class="token class-name">ContainerProperties</span> containerProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContainerProperties</span><span class="token punctuation">(</span><span class="token string">&quot;topic1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;topic2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">containerProps<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 消息监听器逻辑</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 默认的消费者工厂(可配置反序列化器)</span></span>
<span class="line"><span class="token class-name">DefaultKafkaConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cf <span class="token operator">=</span></span>
<span class="line">                        <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">consumerProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">KafkaMessageListenerContainer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> container <span class="token operator">=</span></span>
<span class="line">                        <span class="token keyword">new</span> <span class="token class-name">KafkaMessageListenerContainer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>cf<span class="token punctuation">,</span> containerProps<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">return</span> container<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ConcurrentMessageListenerContainer：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">ConcurrentMessageListenerContainer</span><span class="token punctuation">(</span><span class="token class-name">ConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> consumerFactory<span class="token punctuation">,</span></span>
<span class="line">			<span class="token class-name">ContainerProperties</span> containerProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>consumerFactory<span class="token punctuation">,</span> containerProperties<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>consumerFactory<span class="token punctuation">,</span> <span class="token string">&quot;A ConsumerFactory must be provided&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><code>concurrency</code>可以配置KafkaMessageListenerContainer实例数量。</p><p><strong>文档说法：concurrency=15，3个Topic，Topic分区为5，只会有5个活跃消费者。因为使用RoundRobinAssignor分配策略。</strong></p><p>配置消费者分区策略：</p><div class="language-properties" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">spring.kafka.consumer.properties.partition.assignment.strategy</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.kafka.clients.consumer.RoundRobinAssignor</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>偏移量提交：</strong></p><p><code>enable.auto.commit=true</code>则Kafka消费者自动提交偏移量。</p><p><strong>2.3版本之前enable.auto.commit默认true，之后则默认false。</strong></p><p>enable.auto.commit=false，可配置的默认模式(AckMode)：</p><ol><li>RECORD：监听器处理完消息提交。</li><li>BATCH：当poll()返回的所有记录都处理完成提交，<strong>默认模式</strong>。</li><li>TIME：当poll()返回的所有记录都处理完成，并超过上一次ackTime时间。</li><li>COUNT：当poll()返回的所有记录都处理完成，并超过一定数量。</li><li>COUNT_TIME：TIME或COUNT任意满足则提交。</li><li>MANUAL：使用 Acknowledgment 手动提交。</li><li>MANUAL_IMMEDIATE：调用Acknowledgment.acknowledge()后立即提交。</li></ol><p><strong>syncCommits属性设置是否同步提交，默认为true。</strong></p><p>监听器容器实现了SmartLifecycle，而且autoStartup默认true。优先级配置为Integer.MAX_VALUE - 100。</p><h4 id="kafkalistener" tabindex="-1"><a class="header-anchor" href="#kafkalistener"><span>@KafkaListener</span></a></h4><p>使用该主机需要创建一个KafkaListenerContainerFactory工厂，实现ConcurrentKafkaListenerContainerFactory。</p><p><strong>KafkaUtils.getConsumerGroupId()在监听器线程，能获取当前消费者组名称。</strong></p><p><strong>消费者线程名称规则：[pre]i-C-j。</strong></p><p>支持SPEL表达式，并且可以覆盖容器工厂的autoStartup(自动启动)、concurrency(并发数)配置。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;myListener&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        autoStartup <span class="token operator">=</span> <span class="token string">&quot;\${listen.auto.start:true}&quot;</span><span class="token punctuation">,</span> concurrency <span class="token operator">=</span> <span class="token string">&quot;\${listen.concurrency:3}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   	</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>显示指定Topic和分区：</p><p><strong>TopicPartition的partitions和partitionOffsets不能同时配置。</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;thing2&quot;</span><span class="token punctuation">,</span> topicPartitions <span class="token operator">=</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token annotation punctuation">@TopicPartition</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;topic1&quot;</span><span class="token punctuation">,</span> partitions <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token annotation punctuation">@TopicPartition</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;topic2&quot;</span><span class="token punctuation">,</span> partitions <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">             partitionOffsets <span class="token operator">=</span> <span class="token annotation punctuation">@PartitionOffset</span><span class="token punctuation">(</span>partition <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> initialOffset <span class="token operator">=</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>指定监听器工厂，设置手动提交偏移量：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;cat&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          containerFactory <span class="token operator">=</span> <span class="token string">&quot;kafkaManualAckListenerContainerFactory&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">Acknowledgment</span> ack<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 手动提交偏移量</span></span>
<span class="line">    ack<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>获取消息的元数据，消息头中获取：</p><ul><li>KafkaHeaders.OFFSET(kafka_offset)：分区偏移量。</li><li>KafkaHeaders.RECEIVED_MESSAGE_KEY(kafka_receivedMessageKey)：</li><li>KafkaHeaders.RECEIVED_TOPIC(kafka_receivedTopic)：</li><li>KafkaHeaders.RECEIVED_PARTITION_ID(kafka_receivedPartitionId)：接收消息的分区</li><li>KafkaHeaders.RECEIVED_TIMESTAMP(kafka_receivedTimestamp)：</li><li>KafkaHeaders.TIMESTAMP_TYPE(kafka_timestampType)：</li></ul><p>获取消息后的方式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;qux&quot;</span><span class="token punctuation">,</span> topicPattern <span class="token operator">=</span> <span class="token string">&quot;myTopic1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> <span class="token class-name">String</span> foo<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_MESSAGE_KEY</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> key<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_PARTITION_ID</span><span class="token punctuation">)</span> <span class="token keyword">int</span> partition<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_TOPIC</span><span class="token punctuation">)</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_TIMESTAMP</span><span class="token punctuation">)</span> <span class="token keyword">long</span> ts</span>
<span class="line">        <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="批量监听" tabindex="-1"><a class="header-anchor" href="#批量监听"><span>批量监听</span></a></h5><p>batchListener 属性设为true。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">KafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">batchFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> factory <span class="token operator">=</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    factory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span><span class="token function">consumerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 监听器工厂批量监听打开</span></span>
<span class="line">    factory<span class="token punctuation">.</span><span class="token function">setBatchListener</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token keyword">return</span> factory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">&quot;batchFactory&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">&quot;batchFactory&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_MESSAGE_KEY</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> keys<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_PARTITION_ID</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> partitions<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_TOPIC</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> topics<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">OFFSET</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> offsets<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Message接收消息：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;listMsg&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">&quot;batchFactory&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen14</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;listMsgAck&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">&quot;batchFactory&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen15</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">Acknowledgment</span> ack<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;listMsgAckConsumer&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">&quot;batchFactory&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen16</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">Acknowledgment</span> ack<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接收原始消息对象：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;pollResults&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">&quot;batchFactory&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pollResults</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h5 id="注解属性" tabindex="-1"><a class="header-anchor" href="#注解属性"><span>注解属性</span></a></h5><ol><li>id：属性存在则作为消费者的group.id配置。除非设置idIsGroup为false或设置groupId值。</li><li>properties：覆盖工厂具有相同名称的任何属性，不能以这种方式指定group.id和client.id。</li></ol><h5 id="在类上使用" tabindex="-1"><a class="header-anchor" href="#在类上使用"><span>在类上使用</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;multi&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MultiListenerBean</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaHandler</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">String</span> foo<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaHandler</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> bar<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaHandler</span><span class="token punctuation">(</span>isDefault <span class="token operator">=</span> <span class="token boolean">true</span>\`<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenDefault</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h5><p>关闭自动启动：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;myContainer&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">,</span> autoStartup <span class="token operator">=</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>通过KafkaListenerEndpointRegistry启动监听器容器：</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Autowired</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">KafkaListenerEndpointRegistry</span> registry<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取监听器容器，启动</span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">getListenerContainer</span><span class="token punctuation">(</span><span class="token string">&quot;myContainer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h5 id="重平衡" tabindex="-1"><a class="header-anchor" href="#重平衡"><span>重平衡</span></a></h5><p>ContainerProperties(父类)有consumerRebalanceListener属性，ConsumerRebalanceListener类型。</p><h5 id="消息转发-sendto" tabindex="-1"><a class="header-anchor" href="#消息转发-sendto"><span>消息转发@SendTo</span></a></h5><p>转发消息的方式：</p><ol><li>转发到指定的Topic。</li><li>转发到应用上下文配置的Topic。</li><li>解析转发。 <ol><li>request：表示ConsumerRecord对象。</li><li>source：表示Message对象。</li><li>result：表示方法的结果。</li></ol></li><li>根据消息头kafka_replyTopic转发。</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 3.request表示ConsumerRecord对象</span></span>
<span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;annotated21&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">&quot;!{request.value()}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replyingListener</span><span class="token punctuation">(</span><span class="token class-name">String</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2.应用程序配置的Topic</span></span>
<span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;\${some.property:annotated22}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">&quot;#{myBean.replyTopic}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">replyingBatchListener</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1.</span></span>
<span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;annotated23&quot;</span><span class="token punctuation">,</span> errorHandler <span class="token operator">=</span> <span class="token string">&quot;replyErrorHandler&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">&quot;annotated23reply&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replyingListenerWithErrorHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;annotated25&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">&quot;annotated25reply1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiListenerSendTo</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaHandler</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">String</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaHandler</span></span>
<span class="line">    <span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">&quot;!{&#39;annotated25reply2&#39;}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">KafkaNull</span> nul<span class="token punctuation">,</span></span>
<span class="line">            <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_MESSAGE_KEY</span><span class="token punctuation">)</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置ReplyHeadersConfigurer，是否把原有的头复制：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> factory <span class="token operator">=</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    factory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span><span class="token function">cf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    factory<span class="token punctuation">.</span><span class="token function">setReplyTemplate</span><span class="token punctuation">(</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    factory<span class="token punctuation">.</span><span class="token function">setReplyHeadersConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> factory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 配置添加头</span></span>
<span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> factory <span class="token operator">=</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    factory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span><span class="token function">cf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    factory<span class="token punctuation">.</span><span class="token function">setReplyTemplate</span><span class="token punctuation">(</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    factory<span class="token punctuation">.</span><span class="token function">setReplyHeadersConfigurer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReplyHeadersConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">      <span class="token annotation punctuation">@Override</span></span>
<span class="line">      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldCopy</span><span class="token punctuation">(</span><span class="token class-name">String</span> headerName<span class="token punctuation">,</span> <span class="token class-name">Object</span> headerValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token annotation punctuation">@Override</span></span>
<span class="line">      <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">additionalHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">&quot;qux&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fiz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> factory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="过滤消息" tabindex="-1"><a class="header-anchor" href="#过滤消息"><span>过滤消息</span></a></h5><p>https://www.enterpriseintegrationpatterns.com/patterns/messaging/IdempotentReceiver.html</p><p>RecordFilterStrategy类实现过滤，保证幂等性。</p><p>FilteringMessageListenerAdapter</p><p>FilteringBatchMessageListenerAdapter</p><h5 id="重试机制" tabindex="-1"><a class="header-anchor" href="#重试机制"><span>重试机制</span></a></h5><p>https://github.com/spring-projects/spring-retry</p><p>监听器引发了异常，会调用配置的错误处理程序。</p><h3 id="_4-应用事件" tabindex="-1"><a class="header-anchor" href="#_4-应用事件"><span>4.应用事件</span></a></h3><ol><li>ConsumerStartingEvent：消费者线程首次启用，在开始poll之前发布。</li><li>ConsumerStartedEvent：消费者开始poll数据发布。</li><li>ConsumerFailedToStartEvent：在配置consumerStartTimout(默认30s)时间，没有发布ConsumerStartingEvent事件，发布。</li><li>ListenerContainerIdleEvent：配置idleEventInterval时间没有收到消息发布。</li><li>NonResponsiveConsumerEvent：消费者poll数据没有响应，疑似Broker down。</li><li>ConsumerPausedEvent：容器暂停时由每个消费者发布。</li><li>ConsumerResumedEvent：容器恢复时由每个消费者发布。</li><li>ConsumerStoppingEvent：由每个消费者停止之前发布。</li><li>ConsumerStoppedEvent：消费者被关闭后发布。线程资源处理。</li><li>ContainerStoppedEvent：容器停止时发布。</li></ol><p><strong>Micrometer存在claapath上，并且上下文中存在MeterRegistry。</strong></p><p>Timer名称spring.kafka.listener中有以下标签：</p><ul><li>name：容器bean的名称。</li><li>result：success/failure</li><li>exception：null/ListenerExecutionFailedException 异常</li></ul><p>可以通过ContainerProperties属性micrometerTags维护其它标签。</p><h3 id="_5-事务" tabindex="-1"><a class="header-anchor" href="#_5-事务"><span>5.事务</span></a></h3><p>https://www.confluent.io/blog/transactions-apache-kafka/</p><p>0.11.0.0客户端开始支持事务。spring-kafka通过以下方式支持事务：</p><ul><li>KafkaTransactionManager：与常规的Spring事务一起使用，例如@Transaction，TransactionTemplate。</li><li>事务容器KafkaMessageListenerContainer。</li><li>KafkaTemplate使用本地事务。</li></ul><p>事务是通过向<code>DefaultKafkaProducerFactory</code>提供一个属性<code>transactionIdPrefix</code>来启用的。启用时，工厂不是管理单例生产者，而是维护事务性生产者的缓存。当用户在生产者上调用close()时，它被返回到缓存中以供重用，而不是实际关闭。事务。每个生产者的<code>transactional.id</code>属性为<code>transactionIdPrefix + n</code>，其中n从0开始，并随着每个新的生产者而增加。除非事务是由具有基于记录的侦听器的侦听器容器启动的。在这种情况下，事务性的id为<code>transactionIdPrefix.[group.id].[topic].[partition]</code>，这是为了正确地支持击剑僵尸，这个新行为是在1.3.7、2.0.6、2.1.10和2.2.0版本中添加的。如果您希望恢复到以前的行为，可以将DefaultKafkaProducerFactory上的producerPerConsumerPartition属性设置为false。</p><p><strong>KafkaTransactionManager</strong>是Spring框架PlatformTransactionManager实现。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ApplicationRunner</span> <span class="token function">runner</span><span class="token punctuation">(</span><span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> template<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> args <span class="token operator">-&gt;</span> template<span class="token punctuation">.</span><span class="token function">executeInTransaction</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> t<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ChainedKafkaTransactionManager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">chainedTm</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token class-name">KafkaTransactionManager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ktm<span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">DataSourceTransactionManager</span> dstm<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChainedKafkaTransactionManager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>ktm<span class="token punctuation">,</span> dstm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">dstm</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaListenerContainerFactory</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token class-name">ConcurrentKafkaListenerContainerFactoryConfigurer</span> configurer<span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">ConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> kafkaConsumerFactory<span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">ChainedKafkaTransactionManager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> chainedTM<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> factory <span class="token operator">=</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        configurer<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> kafkaConsumerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        factory<span class="token punctuation">.</span><span class="token function">getContainerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTransactionManager</span><span class="token punctuation">(</span>chainedTM<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> factory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Component</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Listener</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">,</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcTemplate <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>kafkaTemplate <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;topic1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen1</span><span class="token punctuation">(</span><span class="token class-name">String</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic2&quot;</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;insert into mytable (data) values (&#39;&quot;</span> <span class="token operator">+</span> in <span class="token operator">+</span> <span class="token string">&quot;&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;group2&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;topic2&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen2</span><span class="token punctuation">(</span><span class="token class-name">String</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">NewTopic</span> <span class="token function">topic1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">TopicBuilder</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;topic1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">NewTopic</span> <span class="token function">topic2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">TopicBuilder</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;topic2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost/integration?serverTimezone=UTC</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">spring.kafka.consumer.auto-offset-reset</span><span class="token punctuation">=</span><span class="token value attr-value">earliest</span></span>
<span class="line"><span class="token key attr-name">spring.kafka.consumer.enable-auto-commit</span><span class="token punctuation">=</span><span class="token value attr-value">false</span></span>
<span class="line"><span class="token key attr-name">spring.kafka.consumer.properties.isolation.level</span><span class="token punctuation">=</span><span class="token value attr-value">read_committed</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">spring.kafka.producer.transaction-id-prefix</span><span class="token punctuation">=</span><span class="token value attr-value">tx-</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#logging.level.org.springframework.transaction=trace</span></span>
<span class="line"><span class="token comment">#logging.level.org.springframework.kafka.transaction=debug</span></span>
<span class="line"><span class="token comment">#logging.level.org.springframework.jdbc=debug</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>本地事务：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> result <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">executeInTransaction</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    t<span class="token punctuation">.</span><span class="token function">sendDefault</span><span class="token punctuation">(</span><span class="token string">&quot;thing1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;thing2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    t<span class="token punctuation">.</span><span class="token function">sendDefault</span><span class="token punctuation">(</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="_6-拦截器" tabindex="-1"><a class="header-anchor" href="#_6-拦截器"><span>6.拦截器</span></a></h3><p>添加Spring Bean作为Producer/Consumer的拦截器。</p><p>Kafka提供了向Producer/Consumer添加拦截器的机制。这些对象由Kafka管理。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Confuguration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaConsumerFactory</span><span class="token punctuation">(</span><span class="token class-name">KafkaProperties</span> properties<span class="token punctuation">,</span> <span class="token class-name">SomeBean</span> someBean<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> consumerProperties <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">buildConsumerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 添加自定义消费者拦截器类</span></span>
<span class="line">        consumerProperties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">INTERCEPTOR_CLASSES_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">CustomConsumerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 往生产者配置中添加Spring管理的Bean</span></span>
<span class="line">        consumerProperties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;some.bean&quot;</span><span class="token punctuation">,</span> someBean<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>consumerProperties<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaProducerFactory</span><span class="token punctuation">(</span><span class="token class-name">KafkaProperties</span> properties<span class="token punctuation">,</span> <span class="token class-name">SomeBean</span> someBean<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> producerProperties <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">buildProducerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 添加自定义生产者拦截器类</span></span>
<span class="line">        producerProperties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">INTERCEPTOR_CLASSES_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">CustomProducerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 往生产者配置中添加Spring管理的Bean</span></span>
<span class="line">        producerProperties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;some.bean&quot;</span><span class="token punctuation">,</span> someBean<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>producerProperties<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> transactionIdPrefix <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">getTransactionIdPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>transactionIdPrefix <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            factory<span class="token punctuation">.</span><span class="token function">setTransactionIdPrefix</span><span class="token punctuation">(</span>transactionIdPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> factory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过拦截器的configure将Spring管理的Bean传递给Kafka管理的对象。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProducerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ProducerInterceptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">SomeBean</span> bean<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 通过该方法将spring管理的Bean赋值给kafka管理的拦截器</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>bean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SomeBean</span><span class="token punctuation">)</span> configs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;some.bean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">onSend</span><span class="token punctuation">(</span><span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>bean<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">&quot;producer interceptor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> record<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAcknowledgement</span><span class="token punctuation">(</span><span class="token class-name">RecordMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConsumerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ConsumerInterceptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">SomeBean</span> bean<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 通过该方法将spring管理的Bean赋值给kafka管理的拦截器</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>bean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SomeBean</span><span class="token punctuation">)</span> configs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;some.bean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">onConsume</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>bean<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">&quot;consumer interceptor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> records<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCommit</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">OffsetAndMetadata</span><span class="token punctuation">&gt;</span></span> offsets<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-暂停和恢复消费者容器" tabindex="-1"><a class="header-anchor" href="#_7-暂停和恢复消费者容器"><span>7.暂停和恢复消费者容器</span></a></h3><p>2.1.3版本为侦听器容器添加了<code>pause()</code>和<code>resume()</code>方法。以前，可以在<code>ConsumerAwareMessageListener</code>中暂停消费者，并通过侦听<code>ListenerContainerIdleEvent</code>事件（提供对消费者对象的访问）来恢复消费者。虽然可以通过使用事件侦听器暂停空闲容器中的使用者，但在某些情况下，这不是线程安全的，因为不能保证在消费者线程上触发事件。为了安全地暂停和恢复消费者，您应该在侦听器容器上使用暂停和恢复方法。pause()在下一次poll()之前生效；resume()在当前poll()返回后立即生效。当容器暂停时，它继续poll()消费者，如果正在使用组管理，则避免再平衡，但它不检索任何记录。</p><p>从2.1.5版本开始，可以调用<code>isPauseRequested()</code>来查看pause()是否已被调用。<code>isConsumerPaused()</code>返回true，则所有的Consumer实例都暂停了。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">KafkaListenerEndpointRegistry</span> registry<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ApplicationRunner</span> <span class="token function">runner</span><span class="token punctuation">(</span><span class="token class-name">KafkaListenerEndpointRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取并暂停消费者容器</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">getListenerContainer</span><span class="token punctuation">(</span><span class="token string">&quot;pause.resume&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 获取并恢复消费者容器</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">getListenerContainer</span><span class="token punctuation">(</span><span class="token string">&quot;pause.resume&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-序列化反序列化及转换" tabindex="-1"><a class="header-anchor" href="#_8-序列化反序列化及转换"><span>8.序列化反序列化及转换</span></a></h3><p>可以通过配置指定Key和Value的序列化器和反序列化器。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">IntegerDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">IntegerSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>KafkaConsumer和KafkaProducer的构造方法提供了Deserializer和Serializer对key和value进行反序列化及序列化。</p><p>DefaultKafkaProducerFactory和DefaultKafkaConsumerFactory工厂构造方法提供Supplier&lt;Serializer&gt;和Supplier&lt;Deserializer&gt;作为参数。</p><p><code>JacksonUtils.enhancedObjectMapper()</code>创建ObjectMapper对象。</p><p>Kafak属性配置序列化和反序列：</p><ol><li>JsonSerializer.ADD_TYPE_INFO_HEADERS：默认true</li><li>JsonSerializer.TYPE_MAPPINGS：默认空</li><li>JsonDeserializer.USE_TYPE_INFO_HEADERS：默认true</li><li>JsonDeserializer.REMOVE_TYPE_INFO_HEADERS：默认true</li><li>JsonDeserializer.KEY_DEFAULT_TYPE：</li><li>JsonDeserializer.VALUE_DEFAULT_TYPE</li><li>JsonDeserializer.TRUSTED_PACKAGES：</li><li>JsonDeserializer.TYPE_MAPPINGS：默认空</li></ol><p>编程方式配置Json序列化和反序列化器：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">DefaultKafkaProducerFactory</span> <span class="token function">pf</span><span class="token punctuation">(</span><span class="token class-name">KafkaProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> props <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">buildProducerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">DefaultKafkaProducerFactory</span> pf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">forKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">noTypeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">noTypeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">DefaultKafkaConsumerFactory</span> <span class="token function">pf</span><span class="token punctuation">(</span><span class="token class-name">KafkaProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> props <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">buildConsumerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">DefaultKafkaConsumerFactory</span> pf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaConsumerFactory</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">JsonDeserializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">forKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ignoreTypeHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ignoreTypeHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>类型映射：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 序列化映射</span></span>
<span class="line">senderProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">JsonSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">senderProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">JsonSerializer</span><span class="token punctuation">.</span><span class="token constant">TYPE_MAPPINGS</span><span class="token punctuation">,</span> <span class="token string">&quot;cat:com.mycat.Cat, hat:com.myhat.hat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 反序列化映射</span></span>
<span class="line">consumerProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">JsonDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">consumerProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">JsonDeSerializer</span><span class="token punctuation">.</span><span class="token constant">TYPE_MAPPINGS</span><span class="token punctuation">,</span> <span class="token string">&quot;cat:com.yourcat.Cat, hat:com.yourhat.hat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>SpringBoot配置文件配置类型映射：</p><div class="language-properties" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">spring.kafka.producer.value-serializer</span><span class="token punctuation">=</span><span class="token value attr-value">org.springframework.kafka.support.serializer.JsonSerializer</span></span>
<span class="line"><span class="token key attr-name">spring.kafka.producer.properties.spring.json.type.mapping</span><span class="token punctuation">=</span><span class="token value attr-value">cat:com.mycat.Cat,hat:com.myhat.Hat</span></span>
<span class="line"></span></code></pre></div><p><strong>委托序列化和反序列化配置：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">producerProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DelegatingSerializer</span><span class="token punctuation">.</span><span class="token constant">SERIALIZATION_SELECTOR_CONFIG</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;thing1:com.example.MyThing1Serializer, thing2:com.example.MyThing2Serializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">consumerProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DelegatingDeserializer</span><span class="token punctuation">.</span><span class="token constant">SERIALIZATION_SELECTOR_CONFIG</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;thing1:com.example.MyThing1Deserializer, thing2:com.example.MyThing2Deserializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>重试反序列化器：</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ConsumerFactory</span> cf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaConsumerFactory</span><span class="token punctuation">(</span>myConsumerConfigs<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">RetryingDeserializer</span><span class="token punctuation">(</span>myUnreliableKeyDeserializer<span class="token punctuation">,</span> retryTemplate<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">RetryingDeserializer</span><span class="token punctuation">(</span>myUnreliableValueDeserializer<span class="token punctuation">,</span> retryTemplate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>消息类型转换</strong>：通过指定<code>MessageConverter</code>消息转换器，可以在消费端得到对应类型的消息。</p><p>在消费者端，可以配置一个<code>JsonMessageConverter</code>；它可以处理类型<code>byte[]</code>， <code>Bytes</code>和<code>String</code>的ConsumerRecord value，因此应该与<code>ByteArrayDeserializer</code>， <code>BytesDeserializer</code>或<code>StringDeserializer</code>一起使用。（byte[]和Bytes更有效，因为它们避免了不必要的byte[]到String的转换）。如果愿意，还可以配置<code>JsonMessageConverter</code>对应于反序列化器的特定子类。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">KafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaJsonListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> factory <span class="token operator">=</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    factory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span><span class="token function">consumerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    factory<span class="token punctuation">.</span><span class="token function">setMessageConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> factory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;jsonData&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                containerFactory <span class="token operator">=</span> <span class="token string">&quot;kafkaJsonListenerContainerFactory&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jsonListener</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> cat<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// </span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置反序列化错误处理：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// key和value反序列化错误处理</span></span>
<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">ErrorHandlingDeserializer2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">ErrorHandlingDeserializer2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ErrorHandlingDeserializer</span><span class="token punctuation">.</span><span class="token constant">KEY_DESERIALIZER_CLASS</span><span class="token punctuation">,</span> <span class="token class-name">JsonDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">JsonDeserializer</span><span class="token punctuation">.</span><span class="token constant">KEY_DEFAULT_TYPE</span><span class="token punctuation">,</span> <span class="token string">&quot;com.example.MyKey&quot;</span><span class="token punctuation">)</span></span>
<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ErrorHandlingDeserializer</span><span class="token punctuation">.</span><span class="token constant">VALUE_DESERIALIZER_CLASS</span><span class="token punctuation">,</span> <span class="token class-name">JsonDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">JsonDeserializer</span><span class="token punctuation">.</span><span class="token constant">VALUE_DEFAULT_TYPE</span><span class="token punctuation">,</span> <span class="token string">&quot;com.example.MyValue&quot;</span><span class="token punctuation">)</span></span>
<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">JsonDeserializer</span><span class="token punctuation">.</span><span class="token constant">TRUSTED_PACKAGES</span><span class="token punctuation">,</span> <span class="token string">&quot;com.example&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">consumerProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">ErrorHandlingDeserializer2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">consumerProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ErrorHandlingDeserializer2</span><span class="token punctuation">.</span><span class="token constant">VALUE_DESERIALIZER_CLASS</span><span class="token punctuation">,</span> <span class="token class-name">JsonDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 错误处理Function</span></span>
<span class="line">consumerProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ErrorHandlingDeserializer2</span><span class="token punctuation">.</span><span class="token constant">VALUE_FUNCTION</span><span class="token punctuation">,</span> <span class="token class-name">FailedFooProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>ConversionService</strong></p><h3 id="_9-消息头" tabindex="-1"><a class="header-anchor" href="#_9-消息头"><span>9.消息头</span></a></h3><p>Header</p><p>KafkaHeaderMapper</p><h3 id="_10-null负载" tabindex="-1"><a class="header-anchor" href="#_10-null负载"><span>10.null负载</span></a></h3><p>可以通过<code>KafkaTemplate.send(Message\\&lt;?\\&gt; message)</code>复杂KafkaNull.INSTANCE对象，发送null到服务端。</p><p>可以通过@Payload(required = false)接收日志压缩删除的key。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;deletableListener&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_MESSAGE_KEY</span><span class="token punctuation">)</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// value == null 表示key被删除</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;multi&quot;</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MultiListenerBean</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaHandler</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">String</span> cat<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaHandler</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> hat<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaHandler</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">KafkaNull</span> nul<span class="token punctuation">,</span> <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_MESSAGE_KEY</span><span class="token punctuation">)</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-异常处理" tabindex="-1"><a class="header-anchor" href="#_11-异常处理"><span>11.异常处理</span></a></h3><p>@KafkaListener注解属性errorHandler指向<code>KafkaListenerErrorHandler</code>类型的Bean名称。</p><p>ConsumerAwareListenerErrorHandler：对异常消息进行偏移量重置</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ConsumerAwareListenerErrorHandler</span> <span class="token function">listen3ErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>listen3Exception <span class="token operator">=</span> e<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">MessageHeaders</span> headers <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        c<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span>TopicPartition</span><span class="token punctuation">(</span></span>
<span class="line">                headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_TOPIC</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_PARTITION_ID</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">OFFSET</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 批处理</span></span>
<span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ConsumerAwareListenerErrorHandler</span> <span class="token function">listen10ErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>listen10Exception <span class="token operator">=</span> e<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">MessageHeaders</span> headers <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> topics <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_TOPIC</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> partitions <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_PARTITION_ID</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> offsets <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">OFFSET</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> offsetsToReset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> topics<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">            offsetsToReset<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">(</span>topics<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> partitions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> v <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> offsets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> offsets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        offsetsToReset<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> c<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>容器错误处理</strong>：提供了<code>ErrorHandler</code>和<code>BatchErrorHandler</code>对消息监听错误处理。</p><p>默认情况下，当未使用事务时，仅记录错误。使用事务时，默认情况下不会配置错误处理程序，以便异常将回滚事务。如果您在使用事务时提供自定义错误处理程序，并且您希望回滚事务，它必须引发异常。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">KafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConcurrentMessageListenerContainer</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token function">kafkaListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> factory <span class="token operator">=</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    factory<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span><span class="token class-name">ErrorHandler</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> factory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">KafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConcurrentMessageListenerContainer</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token function">kafkaListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> factory <span class="token operator">=</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    factory<span class="token punctuation">.</span><span class="token function">setBatchErrorHandler</span><span class="token punctuation">(</span><span class="token class-name">BatchErrorHandler</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> factory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ConsumerAwareErrorHandler和ConsumerAwareBatchErrorHandler</strong>：可以根据需要根据失败的数据重置偏移量。</p><p><strong>RemainingRecordsErrorHandler：</strong></p><p><strong>RetryingBatchErrorHandler：</strong></p><p><strong>ContainerStoppingErrorHandler：</strong></p><p><strong>DefaultAfterRollbackProcessor：</strong></p><p><strong>死信记录：</strong></p><h3 id="_12-kerberos" tabindex="-1"><a class="header-anchor" href="#_12-kerberos"><span>12.Kerberos</span></a></h3><p>认证</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">KafkaJaasLoginModuleInitializer</span> <span class="token function">jaasConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">KafkaJaasLoginModuleInitializer</span> jaasConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaJaasLoginModuleInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    jaasConfig<span class="token punctuation">.</span><span class="token function">setControlFlag</span><span class="token punctuation">(</span><span class="token string">&quot;REQUIRED&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;useKeyTab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;storeKey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;keyTab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/etc/security/keytabs/kafka_client.keytab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;principal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kafka-client-1@EXAMPLE.COM&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    jaasConfig<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> jaasConfig<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-kafka消费者" tabindex="-1"><a class="header-anchor" href="#spring-kafka消费者"><span>Spring-Kafka消费者</span></a></h2><p>ConcurrentKafkaListenerContainerFactoryConfigurer 监听器容器工厂配置类。</p><p>自动配置以下内容：<strong>以下获取的Spring容器的对象，要求唯一或使用@Primary标注。</strong></p><p><strong>ObjectProvider要求具体的类型存在，ConditionalOnMissingBean指定class的子类对象存在就不匹配。</strong></p><ol><li>spring.kafka 配置类对象；</li><li>设置MessageConverter（消息转换器）对象类型，batch/single 获取消息。默认没有配置。</li><li>设置回复KafkaTemplate，<strong>配置ReplyingKafkaTemplate对象，消费者方法返回不为空，导致启动失败，没有回复KafkaTemplate</strong>。</li><li>设置KafkaAwareTransactionManager事务管理器。</li><li>设置ConsumerAwareRebalanceListener，重写平衡织入，可以访问Consumer对象。</li><li>设置ErrorHandler 错误处理器：。</li><li>设置BatchErrorHandler 批量错误处理器：。</li><li>设置AfterRollbackProcessor：。</li><li>设置RecordInterceptor消息拦截器。</li></ol><p>ConcurrentKafkaListenerContainerFactory 监听器容器工厂。用于存放ConsumerFactory 消费者工厂。</p><figure><img src="http://47.101.155.205/image-20250420204736973.png" alt="image-20250420204736973" tabindex="0" loading="lazy"><figcaption>image-20250420204736973</figcaption></figure><p>自动配置内容：</p><ol><li>设置ConsumerFactory 消费者工厂。</li><li>对监听器工厂进行配置： <ol><li>listener.concurrency 配置监听的并发数，默认不配置。</li><li>工厂配置的MessageConverter，不为空才配置。</li><li>工厂配置的KafkaTemplate，不为空才配置。</li><li>single/batch处理消息，配置对应配置类的错误处理器类型。</li><li>不为空设置AfterRollbackProcessor。</li><li>不为空设置RecordInterceptor消息拦截器。</li></ol></li><li>将消费者的配置复制到监听器工厂的包装配置ContainerProperties：<strong>不为空才设置</strong><ol><li>listener.ackMode：消息确认模式。</li><li>listener.clientId：客户端id属性前缀。</li><li>listener.ackCount：COUNT/COUNT_TIME确认模式的消息数量。</li><li>listener.ackTime：TIME/COUNT_TIME确认模式的消息数量。</li><li>listener.pollTimeout：消费者poll的超时时间。</li><li>listener.noPollThreshold：pollTimeout * 该参数使用。</li><li>listener.idleEventInterval：发布idel 消费者没有数据的间隔时间。</li><li>listener.monitorInterval：对无响应消费者的检查时间，默认30s。</li><li>listener.missingTopicsFatal：Broker不存Topic时，是否启动失败。</li><li>设置KafkaAwareTransactionManager。</li><li>设置ConsumerAwareRebalanceListener。</li></ol></li></ol><h3 id="kafkalistenerconfigurationselector" tabindex="-1"><a class="header-anchor" href="#kafkalistenerconfigurationselector"><span>KafkaListenerConfigurationSelector</span></a></h3><p>通过导入KafkaBootstrapConfiguration，在Spring中注入Bean的后置处理器。</p><ul><li>KafkaListenerAnnotationBeanPostProcessor：每个创建的bean，包含注解KafkaListener等，则对其进行处理。将注解消费者封装成待处理的对象，注册在KafkaListenerEndpointRegistrar中。</li><li>KafkaListenerEndpointRegistry：对KafkaListenerEndpointRegistrar注册的对象进行处理。</li></ul><h4 id="kafkalistenerannotationbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#kafkalistenerannotationbeanpostprocessor"><span>KafkaListenerAnnotationBeanPostProcessor</span></a></h4><p>Bean后置处理器，对Bean的两种情况进行处理：</p><ol><li>类上有@KafkaListener注解，类+@KafkaHandler注解方法注册监听信息。</li><li>方法上有@KafkaListener注解，注册监听方法。</li></ol><figure><img src="http://47.101.155.205/image-20250422201017580.png" alt="image-20250422201017580" tabindex="0" loading="lazy"><figcaption>image-20250422201017580</figcaption></figure><p><strong>@KafkaListener方法信息进行注册：</strong></p><figure><img src="http://47.101.155.205/image-20250422202246868.png" alt="image-20250422202246868" tabindex="0" loading="lazy"><figcaption>image-20250422202246868</figcaption></figure><figure><img src="http://47.101.155.205/image-20250422203242281.png" alt="image-20250422203242281" tabindex="0" loading="lazy"><figcaption>image-20250422203242281</figcaption></figure><ol><li>Bean的对象信息；</li><li>消费者线程名称<code>id</code>；</li><li>消费者组名称设置，<strong>为空的情况可能后面还会再设置</strong>；</li><li>Topic设置；</li><li>Topic分区设置；</li><li>前缀设置<code>clientIdPrefix</code>；</li><li>监听器容器设置MessageListenerContainer(containerGroup)；</li><li>并发数设置<code>concurrency</code>；</li><li>是否自动启动设置<code>autoStartup</code>；</li><li>消费者指定的配置设置<code>properties</code>；</li><li>List消息是否拆分设置<code>splitIterables</code>；</li><li>容器KafkaListenerContainerFactory工厂设置<code>containerFactory</code>；</li><li>方法Spring的BeanFactory；</li><li>错误处理器设置<code>errorHandler</code>；</li><li>注册</li></ol><figure><img src="http://47.101.155.205/image-20250422203748419.png" alt="image-20250422203748419" tabindex="0" loading="lazy"><figcaption>image-20250422203748419</figcaption></figure><p><strong>@KakfaListener类的注册过程：</strong></p><figure><img src="http://47.101.155.205/image-20250422204135031.png" alt="image-20250422204135031" tabindex="0" loading="lazy"><figcaption>image-20250422204135031</figcaption></figure><p>封装的对象不能，类使用<code>MultiMethodKafkaListenerEndpoint</code>，是方法封装MethodKafkaListenerEndpoint的子类。</p><p>其它逻辑相同。</p><p><strong>KafkaListenerAnnotationBeanPostProcessor实现的SmartInitializingSingleton接口，在所有的单例Bean创建完成后，调用afterSingletonsInstantiated方法开始启动监听器。</strong></p><figure><img src="http://47.101.155.205/image-20250422205521537.png" alt="image-20250422205521537" tabindex="0" loading="lazy"><figcaption>image-20250422205521537</figcaption></figure><ol><li>通过KafkaListenerConfigurer Bean对KafkaListenerEndpointRegistrar进行自定义操作；可以配置<code>MessageHandlerMethodFactory</code>、<code>KafkaListenerContainerFactory</code>容器工厂；</li><li>KafkaListenerEndpointRegistrar对象设置KafkaListenerEndpointRegistry注册对象；</li><li>KafkaListenerEndpointRegistrar对象设置容器工厂默认名称；</li><li>消息处理工厂设置；</li><li>注册所有的消费者，使用KafkaListenerEndpointRegistrar的KafkaListenerEndpointRegistry注册表对象进行注册。</li></ol><h4 id="kafkalistenerendpointregistry" tabindex="-1"><a class="header-anchor" href="#kafkalistenerendpointregistry"><span>KafkaListenerEndpointRegistry</span></a></h4><p><strong>实现DisposableBean接口</strong>，在对象被销毁时，销毁DisposableBean 类型的监听器容器对象。</p><p><strong>实现SmartLifecycle接口</strong>，用来管理启动和停止。</p><p><strong>实现ApplicationContextAware接口</strong>，获取ConfigurableApplicationContext对象。</p><p><strong>实现ApplicationListener接口</strong>，监听发布的ContextRefreshedEvent事件，标记上下文已经刷新。</p><p>获取封装KafkaListenerEndpointDescriptor对象的容器工厂对象，<strong>默认没有配置为null</strong>，两种方式设置，一是通过KafkaListenerConfigurer配置注册者的容器工厂对象，二是通过注册者的名称在BeanFacotry上下文中查询，否则启动失败。</p><p>使用MethodKafkaListenerEndpoint、KafkaListenerContainerFactory开始创建消费者。</p><figure><img src="http://47.101.155.205/image-20250422205808504.png" alt="image-20250422205808504" tabindex="0" loading="lazy"><figcaption>image-20250422205808504</figcaption></figure><figure><img src="http://47.101.155.205/image-20250422211932718.png" alt="image-20250422211932718" tabindex="0" loading="lazy"><figcaption>image-20250422211932718</figcaption></figure><p><strong>配置的group MessageListenerContainer有什么用？</strong></p><figure><img src="http://47.101.155.205/image-20250422212513235.png" alt="image-20250422212513235" tabindex="0" loading="lazy"><figcaption>image-20250422212513235</figcaption></figure><p>触发启动，上下文已经刷新(所有的Bean已经注册了)或容器中标记启动。</p><figure><img src="http://47.101.155.205/image-20250423194445449.png" alt="SmartLifecycle" tabindex="0" loading="lazy"><figcaption>SmartLifecycle</figcaption></figure><h3 id="concurrentkafkalistenercontainerfactory" tabindex="-1"><a class="header-anchor" href="#concurrentkafkalistenercontainerfactory"><span>ConcurrentKafkaListenerContainerFactory</span></a></h3><p>用来创建监听器容器的工厂对象。</p><p>createListenerContainer(KafkaListenerEndpoint endpoint);创建MessageListenerContainer监听器容器，有两个具体实现：ConcurrentMessageListenerContainer、KafkaMessageListenerContainer。</p><p>执行步骤：</p><ol><li>创建ConcurrentMessageListenerContainer对象，封装了ConsumerFactory、Topic及分区信息。而后设置属性beanName为endpoint唯一标识；</li><li>根据监听器容器工厂的配置对监听器容器进行配置； <ol><li>RecordFilterStrategy：过滤器；</li><li>ackDiscarded：是否</li><li>RetryTemplate：</li><li>RecoveryCallback：</li><li>statefulRetry：是否</li><li>batchListener：是否</li><li>replyTemplate：回复KafkaTemplate；</li><li>ReplyHeadersConfigurer(replyHeadersConfigurer)：</li></ol></li><li>AbstractKafkaListenerContainerFactory.setupListenerContainer(..);消息监听器容器设置MessagingMessageListenerAdapter； <ol><li>适配器创建及判断；</li><li>适配器设置及后续校验；</li><li>重试配置；</li><li>过滤器配置；</li><li>消息监听器（适配器）设置；</li></ol></li><li>对监听器容器进行配置；</li><li>有设置ContainerCustomizer对象则对监听器容器进行自定就操作；返回监听器容器对象。</li></ol><figure><img src="http://47.101.155.205/image-20250422220815150.png" alt="image-20250422220815150" tabindex="0" loading="lazy"><figcaption>image-20250422220815150</figcaption></figure><figure><img src="http://47.101.155.205/image-20250422214009406.png" alt="image-20250422214009406" tabindex="0" loading="lazy"><figcaption>image-20250422214009406</figcaption></figure><figure><img src="http://47.101.155.205/image-20250422214501438.png" alt="image-20250422214501438" tabindex="0" loading="lazy"><figcaption>image-20250422214501438</figcaption></figure><figure><img src="http://47.101.155.205/image-20250422215928029.png" alt="image-20250422215928029" tabindex="0" loading="lazy"><figcaption>image-20250422215928029</figcaption></figure><figure><img src="http://47.101.155.205/image-20250422220520274.png" alt="image-20250422220520274" tabindex="0" loading="lazy"><figcaption>image-20250422220520274</figcaption></figure><p>监听器容器对象进行初始化后，判断其启动配置和监听器工厂的启动配置情况。</p><p>是否有配置监听器容器组，有配置的情况下，将其注入到Spring的容器中。</p><p>默认不是立即启动监听器容器。</p><h3 id="concurrentmessagelistenercontainer" tabindex="-1"><a class="header-anchor" href="#concurrentmessagelistenercontainer"><span>ConcurrentMessageListenerContainer</span></a></h3><p>消息监听器容器，组合KafkaMessageListenerContainer。</p><p>启动容器过程：</p><ol><li>判断是否有配置消费者组；</li><li>消息监听器类型校验；</li><li>启动： <ol><li>是否校验Topic存在，<code>spring.kafka.listener.missingTopicsFatal</code>；</li><li>并发配置和分区配置比对；</li><li>创建KafkaMessageListenerContainer对象，将当前容器监听相关设置赋值给该对象；设置错误停止事件；启动对象；将对象放入容器。</li></ol></li><li>每次调用KafkaMessageListenerContainer 的启动。</li></ol><figure><img src="http://47.101.155.205/image-20250423204621526.png" alt="image-20250423204621526" tabindex="0" loading="lazy"><figcaption>image-20250423204621526</figcaption></figure><figure><img src="http://47.101.155.205/image-20250423204726956.png" alt="image-20250423204726956" tabindex="0" loading="lazy"><figcaption>image-20250423204726956</figcaption></figure><h3 id="kafkamessagelistenercontainer" tabindex="-1"><a class="header-anchor" href="#kafkamessagelistenercontainer"><span>KafkaMessageListenerContainer</span></a></h3><p>spring-kafka的最小监听器容器。</p><figure><img src="http://47.101.155.205/image-20250423205213825.png" alt="image-20250423205213825" tabindex="0" loading="lazy"><figcaption>image-20250423205213825</figcaption></figure><p>启动过程校验：</p><ol><li>确认模式校验；</li><li>每个监听器容器的消息监听器设置一个SimpleAsyncTaskExecutor线程池；</li><li>确定消息监听器的类型：ListenerType；</li><li>根据类型和消息监听器创建监听消费者对象：ListenerConsumer(Runnable)；</li><li>线程池提交任务；</li><li>超时时间判断消费者是否成功监听，失败则发布ConsumerFailedToStartEvent事件。</li></ol><p><strong>ListenerConsumer对象创建过程：</strong></p><ol><li>确定消息是否自动提交；</li><li>consumer：根据消费者工厂创建Consumer对象，真正的消费者；</li><li>transactionTemplate：确认是否创建事件模板对象；</li><li>genericListener：消息监听器赋值；</li><li>consumerSeekAwareListener：确定消息监听器是否ConsumerSeekAware类型；</li><li>commitCurrentOnAssignment：确定分配期间消息是否提交：自动提交则为false；</li><li>subscribeOrAssignTopics()：消费者调用subscribe()设置Topic重平衡监听器ListenerConsumerRebalanceListener，并设置KafkaConsumerd的SubscriptionState的订阅类型；</li><li>确定是否批次处理消息；</li><li>确定是否织入Consumer；</li><li>批次/单条消息错误处理校验；</li><li>确认是否配置任务调度器：默认ThreadPoolTaskScheduler，以固定速率周期执行任务，<strong>如果(当前时间-上次poll时间)/pollTimeout &gt; noPollThreshold阈值，则发布NonResponsiveConsumerEvent事件</strong></li><li>是否记录初始对象ListenerConsumer信息；</li><li>确认key/value的反序列是否异常；</li><li>确认消费端default.api.timeout.ms配置，默认60s；</li><li>确认消费者max.poll.interval.ms配置，默认30s；</li><li>确定是否配置MicrometerHolder；</li></ol><p><strong>ListenerConsumer对象run执行过程：</strong></p><ol><li>发布ConsumerStartingEvent事件；</li><li>ConsumerSeekAware注册this对象；</li><li>将group.id绑定到线程变量上；</li><li>确定自己的分区；</li><li>发布ConsumerStartedEvent事件；</li><li>启动循环，执行pollAndInvoke（）： <ol><li>非自动提交且非<code>RECORD</code>确认模式，调用processCommits。已处理的消息存在LinkedBlockingQueue acks中。线程池执行线程非当前消费者线程，消息记录添加到队列；如果<code>MANUAL_IMMEDIATE</code>确认模式，wakeup()唤醒消费者； <ol><li>如果<code>MANUAL_IMMEDIATE</code>确认模式，根据消息构建提交偏移量所需的对象，事务、同步提交、异步提交回调模式（默认只打印日志）。其它情况，将信息维护到offsets一个key为Topic，value为Map，key为分区，value为偏移量；</li><li>非MANUAL_IMMEDIATE模式：</li><li>且非MANUAL，将信息维护到一个key为Topic，value为Map，key为分区，value为偏移量；</li><li>COUNT/COUNT_TIME模式，且acks数量大于阈值，根据<code>offsets</code>提交偏移量，count记为0；</li><li>TIME/COUNT_TIME模式，当前时间与last提交时间差值大于确认时间阈值，根据<code>offsets</code>提交偏移量，count记为0；</li></ol></li><li>两次poll空闲时间，默认0。大于0时，判断是否需要睡眠一定时间。睡眠时间小于(max.poll.interval.ms-5)，避免发生重平衡。</li><li>维护TopicPartitionOffset的阻塞队列大于0，通过KakfaConsumer. seek(TopicPartition partition, long offset)对消费者分区偏移量进行调整； <ol><li>先对SeekPosition.TIMESTAMP类型，通过时间戳查询当前分区的便宜，然后进行seek；</li><li>TopicPartitionOffset.position为空，查询消费者的偏移量，和0比较取最大进行seek；</li><li>position为SeekPosition.BEGINNING类型，先seek到初始偏移量处；如果TopicPartitionOffset.offset不为空，则seek到该位置；</li><li>同1类型处理；</li><li>position为SeekPosition.BEGINNING类型类型，先seek到最新偏移量处；如果TopicPartitionOffset.offset不为空，查询当前分区位置，则seek到offset+查询的位置；</li></ol></li><li>判断是否停止消费：通过assignment获取分区，pause停止消费，发布ConsumerPausedEvent事件；</li><li>lastPoll设为当前时间戳；polling设为true；</li><li>doPoll()拉取数据：如果Topic中没有数据，则等待至超时时间，有数据则提前返回，返回拉取到的ConsumerRecords数据；</li><li>判断是否在拉去数据中是否存在将polling标记为false，调用了wakeIfNecessary方法；有拉到数据则丢弃；</li><li>判断是否恢复消费者，获取被暂停的分区，恢复这些分区的消费；发布ConsumerResumedEvent事件；</li><li>记录获取的消息数量，<code>topic-partition@offset</code>格式记录一条消息；</li><li>有配置空闲间隔idleEventInterval(idle-event-interval)，无消息超过时间则发布事件，有消息设置接收消息时间： <ol><li>如果接收到消息，根据单条/批量调用真正的监听器方法；</li><li>未接收到消息，存在idleEventInterval配置，lastReceive（上次接收时间）、lastAlertAt（上次发送事件时间），当前时间大于两者和这个间隔时间，发布ListenerContainerIdleEvent事件；如果是ConsumerSeekAware监听者，则对指定消费者分区的Topic进行一些<strong>回调</strong>处理；</li></ol></li></ol></li></ol><figure><img src="http://47.101.155.205/image-20250424195329093.png" alt="image-20250424195329093" tabindex="0" loading="lazy"><figcaption>image-20250424195329093</figcaption></figure><p><strong>无事务单条消息调用过程：</strong></p><ol><li>调用配置的事务前RecordInterceptor消息拦截器，拦截器返回null，表示跳过该条消息；</li><li>如果有配置MicrometerHolder，则对消费情况进行记录；</li><li>进入调用消息方法： <ol><li>消息的key和value的序列号进行错误判断；</li><li>调用非事务前RecordInterceptor消息拦截器，拦截器返回null，表示跳过该条消息；</li><li>根据监听器容器的ListenerType类型，调用MessageListener的方法；</li><li>调用真正的消费者处理完成（无异常），nackSleep &lt; 0且非MANUAL_IMMEDIATE确认模式： <ol><li>RECORD模式，提交消息偏移量；</li><li>非自动提交且非（MANUAL或MANUAL_IMMEDIATE确认模式），将消息添加到acks消息确认队列中；</li></ol></li></ol></li><li>记录消费指标；</li><li>处理消息出现异常处理方式： <ol><li>记录指标；</li><li>判断是否需要确认消息，<strong>默认不会确认</strong>；</li><li>没有错误处理器，则抛出异常，<strong>默认有一个记录日志的错误处理器</strong>； <ol><li>RemainingRecordsErrorHandler错误处理器，触发processCommits消息确认；将这次的所有消息交给错误处理器处理；</li><li>其它调用其handle(Exception thrownException, T data, Consumer consumer)方法；</li></ol></li></ol></li><li>如果nackSleep大于等于0，应该是在消费者上操作了Acknowledgment对象才会触发这个。</li></ol><h3 id="poll" tabindex="-1"><a class="header-anchor" href="#poll"><span>poll</span></a></h3><h4 id="kafkaconsumer" tabindex="-1"><a class="header-anchor" href="#kafkaconsumer"><span>KafkaConsumer</span></a></h4><p><strong>poll()调用过程：</strong></p><ol><li>acquireAndEnsureOpen确保消费者是单线程访问，通过线程id+当前线程值判断是否只有当前线程访问；</li><li>判断SubscriptionState订阅类型是否有效；</li><li>do while循环直到Timer超时： <ol><li>通过分区协调器判断是否需要重新分配元数据；启动HeartbeatThread线程；</li><li>拉取数据，拉取数据成功，调用ConsumerInterceptor消费者拦截器，可以对消息进行修改，拦截器出现异常不影响正常处理；</li></ol></li><li>处理结束，释放消费者占用的线程；</li></ol><h4 id="consumercoordinator" tabindex="-1"><a class="header-anchor" href="#consumercoordinator"><span>ConsumerCoordinator</span></a></h4><p>创建消费者对象，自动创建的消费者协调器，作为消费者的属性。</p><p>创建协调器的关键配置：</p><ol><li>ConsumerNetworkClient：同消费者；</li><li>groupId：消费者组；</li><li>group.instance.id：和静态消费者相关；</li><li>rebalanceTimeoutMs：max.poll.interval.ms，默认30s；</li><li>sessionTimeoutMs：session.timeout.ms，默认10s；</li><li>Heartbeat：heartbeat.interval.ms，默认3s；</li><li>PartitionAssignor：分区分配策略；partition.assignment.strategy，默认RangeAssignor；</li><li>ConsumerMetadata：消费者元数据；</li><li>SubscriptionState：</li><li>Metrics：</li><li>Time：</li><li>retryBackoffMs：retry.backoff.ms，默认0.1s；</li><li>autoCommitEnabled：enable.auto.commit，是否自动提交；</li><li>autoCommitIntervalMs：自动提交间隔时间；</li><li>ConsumerInterceptors：消息拦截器；</li><li>leaveGroupOnClose：internal.leave.group.on.close，在关闭时离开组，默认true；设置为false，则不会发送重平衡，触发和broker超时；</li><li>completedOffsetCommits：ConcurrentLinkedQueue用来存偏移量；</li><li>nextAutoCommitTimer：Timer，自动提交偏移量才创建；</li></ol><p>消费者成功加入消费者组，协调器会启动HeartbeatThread守护线程，线程名称格式<code>kafka-coordinator-heartbeat-thread | [groupId]</code>。同一个消费者组的多个Topic可能创建多个相同名称的心跳线程。</p><h4 id="heartbeatthread" tabindex="-1"><a class="header-anchor" href="#heartbeatthread"><span>HeartbeatThread</span></a></h4><p>心跳检测线程在消费组加入消费组后，做以下工作：</p><ol><li>超过上次session最大间隔时间未发起检测，检测分区协调器的健康；</li><li>超过上次poll最大间隔时间未发起poll，将当前消费者移出消费组，触发分区平衡；</li><li>指定心跳心跳间隔时间发起检测；</li></ol><figure><img src="http://47.101.155.205/image-20250426131223679.png" alt="image-20250426131223679" tabindex="0" loading="lazy"><figcaption>image-20250426131223679</figcaption></figure><figure><img src="http://47.101.155.205/image-20250426134656700.png" alt="image-20250426134656700" tabindex="0" loading="lazy"><figcaption>image-20250426134656700</figcaption></figure><p>消费者消费时间超过poll最大间隔时间情况分析：</p><ul><li>Topic情况：6个分区；</li><li>消费者情况：3个消费者，消费组最大poll间隔时间10s，一个消费者耗时20s，另外2个正常处理；消费者关闭自动提交；BATCH确认模式；</li><li>其它使用默认配置；</li><li>往耗时长的Topic分区发送消息；</li></ul><p>消费线程和心跳检测线程都是异步的。单线程消费完成后，再次poll消息之前会先提交偏移量，由于心跳线程向broker提出离开消费组，导致这次提交偏移量失败，出现异常，默认的错误处理器处理此异常。下一次poll时，分区协调器触发重平衡，当前消费者继续上一次的分区，重复消费当前消息。就不会断循环。</p><figure><img src="http://47.101.155.205/image-20250426193805179.png" alt="image-20250426193805179" tabindex="0" loading="lazy"><figcaption>image-20250426193805179</figcaption></figure><p>重平衡后，消费者更好了分区，消息被其它消费者重新消费。</p><figure><img src="http://47.101.155.205/image-20250426194908183.png" alt="image-20250426194908183" tabindex="0" loading="lazy"><figcaption>image-20250426194908183</figcaption></figure>`,241))])}const b=l(d,[["render",m],["__file","spring-kafka.html.vue"]]),f=JSON.parse('{"path":"/springboot/spring-kafka.html","title":"spring-kafka","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"SpringBoot快速使用Kafka","slug":"springboot快速使用kafka","link":"#springboot快速使用kafka","children":[]},{"level":2,"title":"Spring-Kafka","slug":"spring-kafka-1","link":"#spring-kafka-1","children":[{"level":3,"title":"1.Topic","slug":"_1-topic","link":"#_1-topic","children":[]},{"level":3,"title":"2.发送消息","slug":"_2-发送消息","link":"#_2-发送消息","children":[]},{"level":3,"title":"3.接收消息","slug":"_3-接收消息","link":"#_3-接收消息","children":[]},{"level":3,"title":"4.应用事件","slug":"_4-应用事件","link":"#_4-应用事件","children":[]},{"level":3,"title":"5.事务","slug":"_5-事务","link":"#_5-事务","children":[]},{"level":3,"title":"6.拦截器","slug":"_6-拦截器","link":"#_6-拦截器","children":[]},{"level":3,"title":"7.暂停和恢复消费者容器","slug":"_7-暂停和恢复消费者容器","link":"#_7-暂停和恢复消费者容器","children":[]},{"level":3,"title":"8.序列化反序列化及转换","slug":"_8-序列化反序列化及转换","link":"#_8-序列化反序列化及转换","children":[]},{"level":3,"title":"9.消息头","slug":"_9-消息头","link":"#_9-消息头","children":[]},{"level":3,"title":"10.null负载","slug":"_10-null负载","link":"#_10-null负载","children":[]},{"level":3,"title":"11.异常处理","slug":"_11-异常处理","link":"#_11-异常处理","children":[]},{"level":3,"title":"12.Kerberos","slug":"_12-kerberos","link":"#_12-kerberos","children":[]}]},{"level":2,"title":"Spring-Kafka消费者","slug":"spring-kafka消费者","link":"#spring-kafka消费者","children":[{"level":3,"title":"KafkaListenerConfigurationSelector","slug":"kafkalistenerconfigurationselector","link":"#kafkalistenerconfigurationselector","children":[]},{"level":3,"title":"ConcurrentKafkaListenerContainerFactory","slug":"concurrentkafkalistenercontainerfactory","link":"#concurrentkafkalistenercontainerfactory","children":[]},{"level":3,"title":"ConcurrentMessageListenerContainer","slug":"concurrentmessagelistenercontainer","link":"#concurrentmessagelistenercontainer","children":[]},{"level":3,"title":"KafkaMessageListenerContainer","slug":"kafkamessagelistenercontainer","link":"#kafkamessagelistenercontainer","children":[]},{"level":3,"title":"poll","slug":"poll","link":"#poll","children":[]}]}],"git":{"updatedTime":1760063112000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":7,"url":"https://github.com/oycm"},{"name":"ouyangcm","username":"ouyangcm","email":"mingorg@163.com","commits":4,"url":"https://github.com/ouyangcm"}]},"filePathRelative":"springboot/spring-kafka.md"}');export{b as comp,f as data};
