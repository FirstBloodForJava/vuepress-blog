import{_ as a,c as n,e,o as t}from"./app-DO9Fsueg.js";const p={};function l(i,s){return t(),n("div",null,s[0]||(s[0]=[e(`<h1 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka"><span>Kafka</span></a></h1><p>官方文档：https://kafka.apache.org/documentation</p><h2 id="_1-设计理论" tabindex="-1"><a class="header-anchor" href="#_1-设计理论"><span>1.设计理论</span></a></h2><h3 id="_1-磁盘存储消息" tabindex="-1"><a class="header-anchor" href="#_1-磁盘存储消息"><span>1.磁盘存储消息</span></a></h3><p>磁盘存储消息</p><p>Kakfa很大程度上依赖于文件系统来存储和缓存消息。人们普遍认为“disks are slow”，会让人怀疑持久结果能否提供竞争力的性能。事实上，磁盘的速度比人们预取的要慢得多，也要快的多；一个设计合理的磁盘结构可以和网络一样快。</p><p><strong>磁盘的线性写是600MB/s，而随机写是100Kb/s</strong></p><p>Java内存相关的点：</p><ul><li>对象的内存开销非常高，通常是存储数据大小的两倍(甚至更糟)</li><li>随着堆内数据的增加，Java垃圾收集变得越来越繁琐和缓慢</li></ul><p>消息传递系统中使用的持久数据结构通常是每个消费者的队列，具有关联的b树或其他通用随机访问数据结构，用于维护有关消息的元数据。b树是可用的最通用的数据结构，使得在消息传递系统中支持各种各样的事务性和非事务性语义成为可能。不过，它们的成本也相当高：b树操作是O(log N)。通常情况下，O(log N)被认为本质上等同于常数时间，但对于磁盘操作来说并非如此。磁盘查找的速度为每次10毫秒，并且每个磁盘一次只能执行一次查找，因此并行性是有限的。因此，即使少量的磁盘搜索也会导致非常高的开销。由于存储系统混合了非常快的缓存操作和非常慢的物理磁盘操作，因此观察到的树结构的性能通常是超线性的，因为数据增加了固定的缓存。数据量增加一倍会导致速度增加一倍。</p><p>直观地说，持久队列可以建立在简单的读取和追加文件的基础上，这是日志解决方案中常见的情况。这种结构的优点是所有操作都是O(1)，读操作不会阻塞写操作，也不会相互阻塞。这具有明显的性能优势，因为性能与数据大小完全分离——一台服务器现在可以充分利用许多便宜的、低转速的1+TB SATA驱动器。虽然它们的寻道性能很差，但这些驱动器具有可接受的大读写性能，并且价格为1/3，容量为3倍。</p><p>在没有任何性能损失的情况下访问几乎无限的磁盘空间意味着我们可以提供消息传递系统中通常没有的一些特性。例如，在Kafka中，我们可以保留消息相对较长的一段时间(比如一周)，而不是试图在消息被消耗后立即删除消息。这为消费者带来了很大的灵活性，我们将对此进行描述。</p><p>影响系统效率的两个点：太多的小型IO、过多的字节复制</p><p>对于IO的处理点：kafka考虑的是将消息抽象为消息集，一组消息一次IO。服务器依次将消息块一次性追加到其日志中，而消费者一次获取大的线性块。Kafka 将随机消息写入的突发流转换为流向消费者的线性写入。对于kafka而言：分区是一个有序的日志文件，在同一个分区能保证消息的有序性。当消息发送到不同的分区时，就不能保证消息的全局有序性，消息会因为分区的并行处理而顺序不一致。保证有序性的方法：<strong>单分区主题</strong>、<strong>分区键</strong></p><p>对于字节的处理点：消息在从生产者到代理到消费者采用二进制文件传输</p><figure><img src="http://47.101.155.205/image-20230809211406222.png" alt="image-20230809211406222" tabindex="0" loading="lazy"><figcaption>image-20230809211406222</figcaption></figure><h3 id="_2-生产者和消费者" tabindex="-1"><a class="header-anchor" href="#_2-生产者和消费者"><span>2.生产者和消费者</span></a></h3><h4 id="生产者" tabindex="-1"><a class="header-anchor" href="#生产者"><span>生产者</span></a></h4><p>负载均衡、异步发送。</p><p>broker：Kafka集群包含一个或多个服务器，这种服务器就称为broker。</p><p>负载均衡：生产可以直接将消息发送至broker，客户端控制将消息发送到哪个分区，可以随机完成，也可以通过分区定义的方式完成。</p><p>异步发送：Kafka 生产者将尝试在内存中累积数据并在单个请求中发送更大的批次。</p><figure><img src="http://47.101.155.205/image-20250307194401641.png" alt="image-20250307194401641" tabindex="0" loading="lazy"><figcaption>image-20250307194401641</figcaption></figure><h4 id="消费者" tabindex="-1"><a class="header-anchor" href="#消费者"><span>消费者</span></a></h4><p>消费者：Kafka消费者向所需要的代理分区发起拉取请求。消费者在每个请求中指定其日志中的偏移量，并接收该位置开始的日志块。<strong>SpringBoot开始连接Kafka的消费者该从哪个偏移量获取消息？怎么往前设置偏移量以便重复消费？</strong></p><ol><li>推和拉：从代理中拉取数据和Broker往下推送数据各有区别。Broker推送数据到不同的消费者，Broker还需要控制数据传输的速率；当生产者的速率超过消费者消费速率时，这时就比较麻烦了。消费者拉取数据，消费者消费速率没赶上生产速率，可以在后面的时候赶上。<strong>推模型，broker积累消息发送请求，它并不知道消费者能否立即处理它，就需要把消息发送给消费者，当配置推送频率较低时，就会一次又一次的推送消息。拉模型解决了这个问题，但是也带来了新问题，当代理没有消息时，消费者需要不停的循环等待</strong>。</li><li>消费者定位：消息状态定位，如果Broker一发送消息就表示消费，消费者出现网络问题没有接收到消息，则这条消息就丢失了。为了解决这个问题：可以给消息系统添加消息确定功能，这表明消息发送表示消息只是<strong>已发送</strong>，并不是<strong>被消费</strong>，Broker等待消费者的确定消息，收到则标记消息为<strong>已消费</strong>。这里解决了消息丢失问题，却带来了新的问题：消息消费完，确定消息时出现问题，出现重复消费问题；Broker性能，需要每条消息保留多个状态。</li><li>Kafka的topic分为一组有序的分区，每个分区在任何给定实际由每个订阅消费者组的一个消费者消费(确保了消息偏移量的准确性)。<strong>每个分区只能被消费者组中的一个消费者进行消费，这样可以确保消息在消费者组内有序消费，但不同消费者组之间可以并行消费。<strong>这表明每个分区中消费者的位置只是一个整数，即要消费下一条消息的偏移量。这样使得标记的性能消耗很低。这样还支持消费者</strong>退回到旧的偏移量</strong>并重新使用消息。</li><li>离线数据加载：Kafka的持久性允许消费者可以定期消费，批量加载数据，将数据加载到离线系统。</li><li>静态会员资格：是一种消费者组成员管理策略，用于在 Kafka 消费者组中控制消费者的加入和离开，以及在重新平衡发生时的行为。传统的 Kafka 消费者组中，消费者组的成员是通过一种动态分配的方式加入的，当新的消费者加入或离开时，会触发重新平衡，导致分区重新分配。这种动态分配机制在某些情况下可能会导致不稳定性，例如，在网络分区恢复时可能会触发不必要的重新平衡。Static Membership 通过引入手动管理消费者组成员，消费者可以预先注册到消费者组，并且不会因为网络分区或其他原因而自动触发重新平衡。Static Membership 需要在 Kafka 集群和消费者端进行配置，以及确保正确的协调和调度。</li></ol><h3 id="_3-消息分发机制" tabindex="-1"><a class="header-anchor" href="#_3-消息分发机制"><span>3.消息分发机制</span></a></h3><p>消息的分发机制：</p><ol><li>最多一次(At most onc)：消息可能丢失，但永远不会重新发送；</li><li>至少一次(At least once)：消息不可能丢失，但会重复发送；</li><li>正好一次(Exactly once)：每条消息仅传递一次。</li></ol><p>实现上面的机制，需要解决两个问题：生产者发送消息的持久性(消息不丢失)；消费者消费消息的保证。</p><p>在0.11.0.0之前，如果生产者不能收到判断消息已提交的响应指示，只能重新发送消息。消息至少发送一次，如果原始请求实际上已经成功，则消息可能在重发期间再次写入。</p><p>从0.11.0.0开始，kafka支持幂等性，保证重发的消息不会写入日志中。kafka为每个生产者分配一个ID，通过生产者发送消息携带的序列对重复消息删除。还支持向多个主题分区发送消息的能力，支持事务一样的功能，同时成功或失败。</p><p>消费者注意是控制其在broker的偏移量来实现消息的稳定消费。正好一次消费应该需要事务性来控制，或者通过自己根据业务性质来实现幂等性。</p><p>生产者可以指定消息的持久性级别，异步执行发送。</p><p>通过情况下使用正好一次的分发机制：</p><p>正常情况下，所有副本具有相同偏移量的完全相同的日志。消费者控制其在该日志中的位置。如果消费者从未奔溃，它将这个位置存储在内存中，但如果消费者消费失败，我们希望这个主题分区被另一个进程接管，新进程需要选择一个合适给位置开始处理。</p><h3 id="_4-副本机制-replication" tabindex="-1"><a class="header-anchor" href="#_4-副本机制-replication"><span>4.副本机制(Replication)</span></a></h3><p>Kafka的副本机制通过主-从副本模型、ISR、故障检测与恢复策略，实现了分区级的数据冗余和一致性保障。这样设计不仅提高了Kafka集群的可用性，还能够在数据存储和一致性之间提供多种配置选项，满足不同场景的需求。</p><ol><li>分区和副本： <ol><li>在Kafka中，每个主题都可以被划分成多个分区（Partition），每个分区包含一系列有序的消息（<strong>消息被追加到分区日志文件的时候，会分配一个特定的偏移量（offset），offset是消息在这个分区的唯一标识，Kafka通过这保证消息的顺序性。</strong>）。</li><li>offset不跨分区，也就是说Kafka只保证分区的消息有序而不保证主题有序。</li><li>每个分区可以有多个副本，副本数可以在主题创建时指定。副本分布在Kafka集群的不同节点（Broker）上，以实现数据冗余和故障容忍。</li></ol></li><li>主副本（Leader）与追随者（Follower）副本 <ol><li>每个分区的副本由一个<strong>主副本和多个追随者副本</strong>组成。</li><li>主副本负责处理读写请求，而追随者副本被动地从主副本同步数据。</li><li>当主副本所在的节点发生故障时，Kafka会自动选举新的主副本，以确保分区的可用性。</li></ol></li><li>同步副本ISR <ol><li>**同步副本（In-Sync Replicas, ISR）**是指与主副本保持同步的所有副本集合，通常包括主副本和至少一个追随者副本。</li><li>当消息写入主副本后，追随者副本需要尽快同步这些消息，以进入ISR队列。</li><li>Kafka通过监控ISR中的副本来判断分区是否可用。如果主副本不可用且ISR有其他副本，Kafka会从ISR中选举新的主副本。</li></ol></li><li>副本因子（Replication Factor） <ol><li>副本因子是指每个分区的副本数量。通常推荐使用3个副本，以在高可用性和存储开销之间达到平衡。</li><li>更高的副本因子可以提供更强的容错性，但也会增加集群的存储需求和同步负载。</li></ol></li><li>副本机制中的一致性 <ol><li>Kafka的副本机制确保了分区的数据在多个副本之间的一致性。生产者可以配置不同的一致性级别： <ol><li><strong>acks=0</strong>：不等待主副本确认即可返回。</li><li><strong>acks=1</strong>：仅等待主副本写入完成后返回。</li><li><strong>acks=-1（all）</strong>：等待ISR中的所有副本写入完成后返回，以确保数据可靠性。</li></ol></li><li>高一致性要求下，Kafka等待所有副本完成写入，以确保数据不会因节点故障而丢失。</li></ol></li><li>故障恢复与副本再平衡 <ol><li>当节点恢复或新节点加入集群后，Kafka会将缺失的分区副本重新分配到这些节点上。</li><li>副本再平衡的过程会在后台进行，保证集群的负载均衡，提升数据的持久性和分布性。</li></ol></li></ol><p>Kafka的Leader副本选举，是采用Zookeeper上针对Topic维护的Isr列表激活进行选举，在选举时，首先选举Isr的第1个，如果第1个选举不成功，接着选第2个，依次类推。Kafka可以容忍N-1个Leader副本宕机或不可用。如果所有的Isr副本不可用，则从不再Isr列表的副本选举一个Leader。</p><h3 id="_5-log-compaction-日志压缩" tabindex="-1"><a class="header-anchor" href="#_5-log-compaction-日志压缩"><span>5.Log Compaction(日志压缩)</span></a></h3><p>日志压缩可确保 Kafka 始终保留单个主题分区的数据日志中每个消息键的至少最后一个已知值。 它解决了还原等使用案例和场景 状态，或者在作维护期间应用程序重启后重新加载缓存。</p><figure><img src="http://47.101.155.205/image-20250309114120104.png" alt="image-20250309114120104" tabindex="0" loading="lazy"><figcaption>image-20250309114120104</figcaption></figure><p>日志压缩是一种机制，用于提供更精细的每条记录保留，而不是更粗粒度的基于时间的保留。这个想法是有选择地删除具有相同主键的最新更新的记录。这样可以保证日志至少具有每个键的最后一个状态。</p><p>此保留策略可以按主题设置，因此单个集群可以包含一些主题，其中保留是通过大小或时间强制执行的，而其他主题则通过压缩强制执行保留。</p><figure><img src="http://47.101.155.205/image-20250309120852747.png" alt="image-20250309120852747" tabindex="0" loading="lazy"><figcaption>image-20250309120852747</figcaption></figure><p>日志的头部与传统的 Kafka 日志相同。它具有密集的连续偏移量并保留所有消息。Log compaction 添加了一个用于处理日志尾部的选项。上图显示了一根尾巴压实的原木。请注意，日志尾部的消息保留了首次写入时分配的原始偏移量，该偏移量永远不会更改。另请注意，所有偏移量在日志中仍然是有效位置，即使具有该偏移量的消息已被压缩掉;在这种情况下，此位置与日志中出现的<strong>下一个最高偏移量</strong>没有区别。例如，在上图中，偏移量 36、37 和 38 都是等效位置，从这些偏移量中的任何一个开始的读取都将返回以 38 开头的消息集。</p><p>压缩是通过定期重新复制日志段在后台完成的。清理不会阻止读取，并且可以限制为使用不超过可配置的 I/O 吞吐量，以避免影响创建者和使用者。压缩日志段的实际过程如下所示：</p><figure><img src="http://47.101.155.205/image-20250309121020126.png" alt="image-20250309121020126" tabindex="0" loading="lazy"><figcaption>image-20250309121020126</figcaption></figure><p>日志压缩提供的保障：</p><ol><li>Topic配置<code>min.compaction.lag.ms</code> 可用于保证在写入消息后必须经过的最小时间长度才能压缩消息。Topic配置<code>max.compaction.lag.ms</code> 可用于保证写入消息的时间与消息符合压缩条件之间的最大延迟。</li><li>消息的顺序始终保持不变。 Compaction 永远不会对消息重新排序，只会删除一些消息。</li><li>消息的偏移量永远不会改变。 它是日志中某个位置的永久标识符。</li><li>任何从日志开头开始的使用者都将至少看到所有记录的最终状态（按写入顺序排列）。此外，如果使用者在小于主题的 <code>delete.retention.ms</code> 设置（默认值为 24 小时）的时间段内到达日志头，则将看到已删除记录的所有删除标记。超过这个时间，中间的消息可能未消费掉。</li></ol><div class="language-properties" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 日志压缩配置</span></span>
<span class="line"><span class="token key attr-name">log.cleanup.policy</span><span class="token punctuation">=</span><span class="token value attr-value">compact</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 时间</span></span>
<span class="line">log.cleaner.min.compaction.lag.ms</span>
<span class="line">log.cleaner.max.compaction.lag.ms</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="_6-quotas-配额" tabindex="-1"><a class="header-anchor" href="#_6-quotas-配额"><span>6.Quotas（配额）</span></a></h3><p>Kafka 集群能够对请求实施配额，以控制客户端使用的代理资源。Broker 可以为共享配额的每组客户端强制执行两种类型的客户端配额：</p><ol><li>网络带宽的配额：网络带宽配额定义为共享配额的每组客户端的字节速率阈值。默认情况下，每个唯一客户端组都会收到集群配置的固定配额（以字节/秒为单位）。此配额是按代理定义的。在客户端受到限制之前，每组客户端最多可以发布/获取每个代理 X 字节/秒。</li><li>请求速率配额：请求速率配额定义为客户端在配额时段内可以利用每个代理的请求处理程序 I/O 线程和网络线程的时间百分比。<code>n%</code> 的配额表示 <code>n% 的 一个线程</code> ，因此配额超出了总容量 <code>((num.io.threads + num.network.threads) * 100)%</code> 。每组客户端可以在配额中的所有 I/O 和网络线程中使用最高 <code>n%</code> 的总百分比 窗口。由于分配给 I/O 和网络线程的线程数通常基于 根据 Broker 主机上的可用内核数，请求速率配额表示 CPU 的总百分比 可供共享配额的每组客户端使用。</li></ol><p><strong>为什么需要配额？</strong></p><p>生产者和消费者可能会产生/消耗非常大量的数据，或者以非常高的速率生成请求，从而垄断代理资源，导致网络饱和，并且通常会DOS其他客户端和代理本身。拥有配额可以防止这些问题，并且在大型多租户集群中尤为重要，因为一小部分行为不良的客户端可能会降低行为良好的客户端的用户体验。事实上，当将 Kafka 作为服务运行时，这甚至可以根据商定的合同强制执行 API 限制。</p><p><strong>可以实施配额的对象：</strong></p><ol><li>用户级别：user。</li><li>客户端级别：clientId。</li><li>用户级别+客户端级别：user+clientId。</li></ol><figure><img src="http://47.101.155.205/image-20250309112317027.png" alt="image-20250309112317027" tabindex="0" loading="lazy"><figcaption>image-20250309112317027</figcaption></figure><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 设置配额 user=user1, client-id=clientA</span></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--alter</span> --add-config <span class="token string">&#39;producer_byte_rate=1024,consumer_byte_rate=2048,request_percentage=200&#39;</span> --entity-type <span class="token function">users</span> --entity-name user1 --entity-type clients --entity-name clientA</span>
<span class="line">Updated config <span class="token keyword">for</span> entity: user-principal <span class="token string">&#39;user1&#39;</span>, client-id <span class="token string">&#39;clientA&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 设置配额 user=user1</span></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--alter</span> --add-config <span class="token string">&#39;producer_byte_rate=1024,consumer_byte_rate=2048,request_percentage=200&#39;</span> --entity-type <span class="token function">users</span> --entity-name user1</span>
<span class="line">Updated config <span class="token keyword">for</span> entity: user-principal <span class="token string">&#39;user1&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 设置配额 client-id=clientA</span></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--alter</span> --add-config <span class="token string">&#39;producer_byte_rate=1024,consumer_byte_rate=2048,request_percentage=200&#39;</span> --entity-type clients --entity-name clientA</span>
<span class="line">Updated config <span class="token keyword">for</span> entity: client-id <span class="token string">&#39;clientA&#39;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 默认配额 </span></span>
<span class="line"><span class="token comment"># 为 user=userA 配置默认 client-id 配额</span></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--alter</span> --add-config <span class="token string">&#39;producer_byte_rate=1024,consumer_byte_rate=2048,request_percentage=200&#39;</span> --entity-type <span class="token function">users</span> --entity-name user1 --entity-type clients --entity-default</span>
<span class="line">Updated config <span class="token keyword">for</span> entity: user-principal <span class="token string">&#39;user1&#39;</span>, default client-id</span>
<span class="line"></span>
<span class="line"><span class="token comment"># user设置默认</span></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--alter</span> --add-config <span class="token string">&#39;producer_byte_rate=1024,consumer_byte_rate=2048,request_percentage=200&#39;</span> --entity-type <span class="token function">users</span> --entity-default</span>
<span class="line">Updated config <span class="token keyword">for</span> entity: default user-principal</span>
<span class="line"></span>
<span class="line"><span class="token comment"># client-id 设置默认</span></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--alter</span> --add-config <span class="token string">&#39;producer_byte_rate=1024,consumer_byte_rate=2048,request_percentage=200&#39;</span> --entity-type clients --entity-default</span>
<span class="line">Updated config <span class="token keyword">for</span> entity: default client-id.</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看配额</span></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--describe</span> --entity-type <span class="token function">users</span> --entity-name user1 --entity-type clients --entity-name clientA</span>
<span class="line">Configs <span class="token keyword">for</span> user-principal <span class="token string">&#39;user1&#39;</span>, client-id <span class="token string">&#39;clientA&#39;</span> are <span class="token assign-left variable">producer_byte_rate</span><span class="token operator">=</span><span class="token number">1024</span>,consumer_byte_rate<span class="token operator">=</span><span class="token number">2048</span>,request_percentage<span class="token operator">=</span><span class="token number">200</span></span>
<span class="line"></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--describe</span> --entity-type <span class="token function">users</span> --entity-name user1</span>
<span class="line">Configs <span class="token keyword">for</span> user-principal <span class="token string">&#39;user1&#39;</span> are <span class="token assign-left variable">producer_byte_rate</span><span class="token operator">=</span><span class="token number">1024</span>,consumer_byte_rate<span class="token operator">=</span><span class="token number">2048</span>,request_percentage<span class="token operator">=</span><span class="token number">200</span></span>
<span class="line"></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--describe</span> --entity-type clients --entity-name clientA</span>
<span class="line">Configs <span class="token keyword">for</span> client-id <span class="token string">&#39;clientA&#39;</span> are <span class="token assign-left variable">producer_byte_rate</span><span class="token operator">=</span><span class="token number">1024</span>,consumer_byte_rate<span class="token operator">=</span><span class="token number">2048</span>,request_percentage<span class="token operator">=</span><span class="token number">200</span></span>
<span class="line"></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--describe</span> --entity-type <span class="token function">users</span></span>
<span class="line"></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--describe</span> --entity-type <span class="token function">users</span> --entity-type clients</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-zookeeper" tabindex="-1"><a class="header-anchor" href="#_7-zookeeper"><span>7.Zookeeper</span></a></h3><p>Zookeeper功能：</p><ol><li>存储Kafka的元数据.</li><li>管理Broker。</li><li>管理消费者。</li></ol><p>Zookeeper存储以下数据：</p><ol><li>Topic的注册信息。</li><li>Topic的配置。</li><li>分区的状态信息。</li><li>Broker的注册信息。</li><li>Consumer的注册信息。</li><li>Consumer owner。</li><li>Consumer offset。</li></ol><h2 id="_2-初级入门" tabindex="-1"><a class="header-anchor" href="#_2-初级入门"><span>2.初级入门</span></a></h2><h3 id="_1-基本概念和架构" tabindex="-1"><a class="header-anchor" href="#_1-基本概念和架构"><span>1.基本概念和架构</span></a></h3><p>Apache Kafka 是最流行的开源流处理软件，用于大规模收集、处理、存储和分析数据。它以其出色的性能、低延迟、容错和高吞吐量而闻名，每秒能够处理数千条消息。Kafka 使用案例超过 1,000 个并且还在不断增加，一些常见的好处是构建数据管道、利用实时数据流、支持运营指标以及跨无数来源的数据集成。</p><p>Kafka 是一个分布式系统，由通过高性能<a href="https://kafka.apache.org/protocol.html" target="_blank" rel="noopener noreferrer">TCP 网络协议进行通信的</a><strong>服务器</strong>和<strong>客户端</strong>组成。它可以部署在本地和云环境中的裸机硬件、虚拟机和容器上。</p><p><strong>服务器</strong>：Kafka 作为一个或多个服务器集群运行，可以跨越多个数据中心或云区域。其中一些服务器形成存储层，称为代理。其他服务器运行 <a href="https://kafka.apache.org/documentation/#connect" target="_blank" rel="noopener noreferrer">Kafka Connect</a>以事件流的形式持续导入和导出数据，以将 Kafka 与您现有的系统（例如关系数据库以及其他 Kafka 集群）集成。为了让您实现关键任务用例，Kafka 集群具有高度可扩展性和容错性：如果其中任何一台服务器发生故障，其他服务器将接管它们的工作以确保连续运行而不会丢失任何数据。</p><p><strong>客户端</strong>：它们允许您编写分布式应用程序和微服务，即使在出现网络问题或机器故障的情况下，也能以容错的方式并行、大规模地读取、写入和处理事件流。Kafka 附带了一些这样的客户端，这些客户端由 Kafka 社区提供的<a href="https://cwiki.apache.org/confluence/display/KAFKA/Clients" target="_blank" rel="noopener noreferrer">数十个客户端</a>进行了扩充：客户端可用于 Java 和 Scala，包括更高级别的 <a href="https://kafka.apache.org/documentation/streams/" target="_blank" rel="noopener noreferrer">Kafka Streams</a>库，用于 Go、Python、C/C++ 和许多其他编程语言以及 REST API。</p><ol><li>主题（Topic）： <ul><li>主题是Kafka中的核心概念，代表了数据流的分类或者主题。</li><li>数据以消息的形式发布到主题，消费者从主题订阅消息进行消费。</li><li>主题可以被分为多个分区。</li></ul></li><li>分区（Partition）： <ul><li>主题可以划分为多个分区，每个分区是数据存储和传输的基本单元。</li><li>分区通过一系列有序且不可变的消息日志文件进行存储(保证单个分区的消息顺序性)。</li><li>每个分区都有一个唯一的标识符（Partition ID）。</li><li>每个分区只能分配给一个消费者实例。</li><li>分区越多，fafka集群支持的并行消费能力越强。</li></ul></li><li>生产者（Producer）： <ul><li>生产者负责将消息发布到Kafka集群的主题中。</li><li>生产者可以将消息直接发布到指定的分区，也可以由Kafka自动选择合适的分区。</li></ul></li><li>消费者（Consumer）： <ul><li>消费者从Kafka集群的主题中订阅消息进行消费。</li><li>每个消费者都属于一个消费者组（Consumer Group），消费者组可以包含多个消费者。</li><li>Kafka通过将分区分配给不同的消费者实现负载均衡和并行处理。</li><li>一个消费者可以分配多个分区。</li><li>消费者数量大于分区数量，则有消费者空闲。</li></ul></li><li>消费者组（ConsumerGroup）： <ul><li>每个消费者组相互独立，每个组会独立的从主题的所有分区读取消息。</li><li>不指定消费组组名称，则属于默认的Group。</li></ul></li><li>消息服务器（Broker）： <ul><li>Broker是Kafka集群中的一个节点，负责存储和处理消息。</li><li>多个Broker组成一个Kafka集群，每个代理可以管理多个主题和分区。</li><li>代理之间通过使用Apache ZooKeeper进行协调和元数据管理。</li></ul></li><li>ZooKeeper： <ul><li>ZooKeeper是Kafka的关键组件之一，用于管理和协调Kafka集群的状态和元数据。</li><li>它负责追踪代理的健康状态、分区的分配和消费者组的协调。</li><li>ZooKeeper还用于选举集群中的控制器（Controller），控制器负责管理分区的领导者和副本。</li></ul></li></ol><h3 id="_2-安装和配置kafka" tabindex="-1"><a class="header-anchor" href="#_2-安装和配置kafka"><span>2.安装和配置Kafka</span></a></h3><p>下载地址：https://www.apache.org/dyn/closer.cgi?path=/kafka/3.5.0/kafka_2.13-3.5.0.tgz</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 修改kafka Broker 的配置</span></span>
<span class="line"><span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">0</span></span>
<span class="line"><span class="token assign-left variable">log.dir</span><span class="token operator">=</span>/tmp/kafka-logs</span>
<span class="line"><span class="token comment"># 配置监听地址</span></span>
<span class="line"><span class="token comment"># PLAINTEXT://0.0.0.0:9092(需要配置 advertised.listeners) / PLAINTEXT://hostname:9092</span></span>
<span class="line"><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://oycm:9092</span>
<span class="line"><span class="token comment"># 官网推荐的例子</span></span>
<span class="line"><span class="token comment"># PLAINTEXT://myhost:9092,SSL://:9091 </span></span>
<span class="line"><span class="token comment"># CLIENT://0.0.0.0:9092,REPLICATION://localhost:9093</span></span>
<span class="line"><span class="token comment"># PLAINTEXT://127.0.0.1:9092,SSL://[::1]:9092</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># zookeeper暴露的监听地址</span></span>
<span class="line"><span class="token assign-left variable">advertised.listeners</span><span class="token operator">=</span>PLAINTEXT://公网ip:9092</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> /usr/local</span>
<span class="line"><span class="token function">tar</span> <span class="token parameter variable">-xzf</span> kafka_2.13-3.5.0.tgz</span>
<span class="line"><span class="token builtin class-name">cd</span> kafka_2.13-3.5.0/</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 安装kafka环境：ZooKeeper or KRaft</span></span>
<span class="line"><span class="token comment"># 1.ZooKeeper</span></span>
<span class="line">bin/zookeeper-server-start.sh config/zookeeper.properties</span>
<span class="line"><span class="token function">nohup</span> bin/zookeeper-server-start.sh config/zookeeper.properties <span class="token operator">&gt;</span> logs/zookeeper.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 另一个窗口执行命令</span></span>
<span class="line">bin/kafka-server-start.sh config/server.properties</span>
<span class="line"><span class="token function">nohup</span> bin/kafka-server-start.sh config/server.properties <span class="token operator">&gt;</span> logs/kafka.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span></span>
<span class="line"></span>
<span class="line">bin/kafka-server-start.sh k9093/server.properties</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 提示没有足够的内存去执行java程序</span></span>
<span class="line"><span class="token comment"># 打开bin/kafka-server-start.sh将-Xmx -Xms内存调小</span></span>
<span class="line"></span>
<span class="line"><span class="token function">free</span> <span class="token parameter variable">-h</span> <span class="token comment">#查询服务器内存情况</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20230716171542492.png" alt="提示java内存不足" tabindex="0" loading="lazy"><figcaption>提示java内存不足</figcaption></figure><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 删除kafka数据</span></span>
<span class="line"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /tmp/kafka-logs /tmp/zookeeper /tmp/kraft-combined-logs</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="zookeeper集群" tabindex="-1"><a class="header-anchor" href="#zookeeper集群"><span>Zookeeper集群</span></a></h4><p>Kafka会将集群的配置信息和元信息存储在Zookeeper中，可以使用Zookeeper客户端工具ZooInspector管理Zookeeper的节点信息。</p><div class="language-zoo.cfg line-numbers-mode" data-highlighter="prismjs" data-ext="zoo.cfg" data-title="zoo.cfg"><pre><code><span class="line"># 修改配置</span>
<span class="line"># 默认指向/tmp目录，修改其指向其它目录</span>
<span class="line">dataDir=/path</span>
<span class="line"></span>
<span class="line"># 新增配置</span>
<span class="line"># 指定Zookeeper集群中的Serverr节点，2888表示集群内Server节点通信端口，Leader将监听此端口；3888用于选举Leader</span>
<span class="line">server.1=hostname1:2888:3888</span>
<span class="line">server.2=hostname2:2888:3888</span>
<span class="line">server.3=hostname3:2888:3888</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在dataDir配置目录下新建myid文件，hostname1、hostname2、hostname3各输入内容1、2、3。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 配置Zookeeper环境变量</span></span>
<span class="line"><span class="token assign-left variable">ZOOKEEPER_HOME</span><span class="token operator">=</span>/path</span>
<span class="line"><span class="token builtin class-name">export</span> ZOOKEEPER_HOME</span>
<span class="line"><span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ZOOKEEPER</span>/bin:<span class="token environment constant">$PATH</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">source</span> profile</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 启动</span></span>
<span class="line">zkServer.sh start</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="kafka集群" tabindex="-1"><a class="header-anchor" href="#kafka集群"><span>Kafka集群</span></a></h4><p>修改kafka的config/server.properties配置</p><div class="language-properties" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># zookeeper集群地址</span></span>
<span class="line"><span class="token key attr-name">zookeeper.connect</span><span class="token punctuation">=</span><span class="token value attr-value">hostname1:2181,hostname2:2181,hostname3:2181</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">bin/kafka-server-start.sh config/server.properties <span class="token operator">&amp;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="windows启动zookeeper命令" tabindex="-1"><a class="header-anchor" href="#windows启动zookeeper命令"><span>Windows启动zookeeper命令</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token string">&quot;C:\\Program Files\\Java\\jdk1.8.0_101/bin/java&quot;</span> <span class="token parameter variable">-Xmx512M</span> <span class="token parameter variable">-Xms512M</span> <span class="token parameter variable">-server</span> <span class="token parameter variable">-XX:+UseG1GC</span> <span class="token parameter variable">-XX:MaxGCPauseMillis</span><span class="token operator">=</span><span class="token number">20</span> <span class="token parameter variable">-XX:InitiatingHeapOccupancyPercent</span><span class="token operator">=</span><span class="token number">35</span> <span class="token parameter variable">-XX:+ExplicitGCInvokesConcurrent</span> <span class="token parameter variable">-Djava.awt.headless</span><span class="token operator">=</span>true <span class="token parameter variable">-Dcom.sun.management.jmxremote</span> <span class="token parameter variable">-Dcom.sun.management.jmxremote.authenticate</span><span class="token operator">=</span>false  <span class="token parameter variable">-Dcom.sun.management.jmxremote.ssl</span><span class="token operator">=</span>false <span class="token parameter variable">-Dkafka.logs.dir</span><span class="token operator">=</span><span class="token string">&quot;D:\\kafka_2.13-3.6.1/logs&quot;</span> <span class="token string">&quot;-Dlog4j.configuration=file:D:\\kafka_2.13-3.6.1<span class="token entity" title="\\b">\\b</span>in\\windows\\../../config/log4j.properties&quot;</span> <span class="token parameter variable">-cp</span> <span class="token string">&quot;D:<span class="token entity" title="\\e">\\e</span>nvironment\\kafka_2.13-3.6.1\\libs;D:<span class="token entity" title="\\e">\\e</span>nvironment\\mysql-connector-java-5.1.23-bin.jar;.;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>activation-1.1.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>aopalliance-repackaged-2.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>argparse4j-0.7.0.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>audience-annotations-0.12.0.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>caffeine-2.9.3.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>checker-qual-3.19.0.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>commons-beanutils-1.9.4.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>commons-cli-1.4.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>commons-collections-3.2.2.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>commons-digester-2.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>commons-io-2.11.0.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>commons-lang3-3.8.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>commons-logging-1.2.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>commons-validator-1.7.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>connect-api-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>connect-basic-auth-extension-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>connect-file-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>connect-json-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>connect-mirror-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>connect-mirror-client-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>connect-runtime-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>connect-transforms-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>error_prone_annotations-2.10.0.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>hk2-api-2.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>hk2-locator-2.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>hk2-utils-2.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jackson-annotations-2.13.5.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jackson-core-2.13.5.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jackson-databind-2.13.5.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jackson-dataformat-csv-2.13.5.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jackson-datatype-jdk8-2.13.5.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jackson-jaxrs-base-2.13.5.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jackson-jaxrs-json-provider-2.13.5.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jackson-module-jaxb-annotations-2.13.5.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jackson-module-scala_2.13-2.13.5.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jakarta.activation-api-1.2.2.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jakarta.annotation-api-1.3.5.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jakarta.inject-2.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jakarta.validation-api-2.0.2.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jakarta.ws.rs-api-2.1.6.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jakarta.xml.bind-api-2.3.3.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>javassist-3.29.2-GA.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>javax.activation-api-1.2.0.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>javax.annotation-api-1.3.2.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>javax.servlet-api-3.1.0.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>javax.ws.rs-api-2.1.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jaxb-api-2.3.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jersey-client-2.39.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jersey-common-2.39.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jersey-container-servlet-2.39.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jersey-container-servlet-core-2.39.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jersey-hk2-2.39.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jersey-server-2.39.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jetty-client-9.4.52.v20230823.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jetty-continuation-9.4.52.v20230823.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jetty-http-9.4.52.v20230823.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jetty-io-9.4.52.v20230823.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jetty-security-9.4.52.v20230823.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jetty-server-9.4.52.v20230823.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jetty-servlet-9.4.52.v20230823.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jetty-servlets-9.4.52.v20230823.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jetty-util-9.4.52.v20230823.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jetty-util-ajax-9.4.52.v20230823.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jline-3.22.0.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jopt-simple-5.0.4.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jose4j-0.9.3.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>jsr305-3.0.2.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-clients-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-group-coordinator-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-log4j-appender-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-metadata-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-raft-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-server-common-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-shell-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-storage-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-storage-api-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-streams-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-streams-examples-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-streams-scala_2.13-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-streams-test-utils-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-tools-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka-tools-api-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>kafka_2.13-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>lz4-java-1.8.0.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>maven-artifact-3.8.8.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>metrics-core-2.2.0.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>metrics-core-4.1.12.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>netty-buffer-4.1.100.Final.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>netty-codec-4.1.100.Final.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>netty-common-4.1.100.Final.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>netty-handler-4.1.100.Final.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>netty-resolver-4.1.100.Final.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>netty-transport-4.1.100.Final.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>netty-transport-classes-epoll-4.1.100.Final.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>netty-transport-native-epoll-4.1.100.Final.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>netty-transport-native-unix-common-4.1.100.Final.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>osgi-resource-locator-1.0.3.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>paranamer-2.8.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>pcollections-4.0.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>plexus-utils-3.3.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>reflections-0.10.2.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>reload4j-1.2.25.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>rocksdbjni-7.9.2.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>scala-collection-compat_2.13-2.10.0.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>scala-java8-compat_2.13-1.0.2.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>scala-library-2.13.11.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>scala-logging_2.13-3.9.4.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>scala-reflect-2.13.11.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>slf4j-api-1.7.36.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>slf4j-reload4j-1.7.36.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>snappy-java-1.1.10.5.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>swagger-annotations-2.2.8.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>trogdor-3.6.1.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>zookeeper-3.8.3.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>zookeeper-jute-3.8.3.jar<span class="token string">&quot;;&quot;</span>D:<span class="token punctuation">\\</span>kafka_2.13-3.6.1<span class="token punctuation">\\</span>libs<span class="token punctuation">\\</span>zstd-jni-1.5.5-1.jar<span class="token string">&quot;&quot;</span>  org.apache.zookeeper.server.quorum.QuorumPeerMain zookeeper.properties</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_3-api" tabindex="-1"><a class="header-anchor" href="#_3-api"><span>3.API</span></a></h2><h3 id="_1-kafka基本操作" tabindex="-1"><a class="header-anchor" href="#_1-kafka基本操作"><span>1.Kafka基本操作</span></a></h3><ul><li>创建主题、发送和接收消息</li><li>管理消费组</li><li>...</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 创建topic</span></span>
<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> <span class="token operator">&lt;</span>topic<span class="token operator">&gt;</span> --bootstrap-server localhost:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查询topic</span></span>
<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--describe</span> <span class="token parameter variable">--topic</span> <span class="token operator">&lt;</span>topic<span class="token operator">&gt;</span> --bootstrap-server localhost:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 生产者 持久会话 ctrl+c结束</span></span>
<span class="line">bin/kafka-console-producer.sh <span class="token parameter variable">--topic</span> <span class="token operator">&lt;</span>topic<span class="token operator">&gt;</span> --bootstrap-server localhost:9092</span>
<span class="line">bin/kafka-console-producer.sh <span class="token parameter variable">--topic</span> start_01 --bootstrap-server localhost:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 消费者 </span></span>
<span class="line">bin/kafka-console-consumer.sh <span class="token parameter variable">--topic</span> <span class="token operator">&lt;</span>topic<span class="token operator">&gt;</span> --from-beginning --bootstrap-server localhost:9092</span>
<span class="line">bin/kafka-console-consumer.sh <span class="token parameter variable">--topic</span> start_01 --from-beginning --bootstrap-server localhost:9092</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20230716191455921.png" alt="image-20230716191455921" tabindex="0" loading="lazy"><figcaption>image-20230716191455921</figcaption></figure><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 往config/connect-standalone.properties中追加写入文本</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;plugin.path=libs/connect-file-3.5.0.jar&quot;</span> <span class="token operator">&gt;&gt;</span> config/connect-standalone.properties</span>
<span class="line"></span>
<span class="line">bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties</span>
<span class="line"></span>
<span class="line">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--topic</span> connect-test --from-beginning</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="topic命令" tabindex="-1"><a class="header-anchor" href="#topic命令"><span>topic命令</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查询topic topic的名称</span></span>
<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--list</span> --bootstrap-server localhost:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 指定分区副本数2</span></span>
<span class="line">--replication-factor <span class="token number">2</span></span>
<span class="line"><span class="token comment"># 指定topic的分区有3个</span></span>
<span class="line"><span class="token parameter variable">--partitions</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建topic，默认监听配置启动</span></span>
<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> org.test1 --bootstrap-server localhost:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Broker 只配置 listeners=PLAINTEXT://oycm:9092 配置</span></span>
<span class="line"><span class="token comment"># default.replication.factor 默认配置是1，创建topic失败</span></span>
<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> --replication-factor <span class="token number">2</span> <span class="token parameter variable">--partitions</span> <span class="token number">3</span> <span class="token parameter variable">--topic</span> org.test2 --bootstrap-server root:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Broker 指定监听地址 advertised.listeners=PLAINTEXT://公网ip:9092</span></span>
<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> --replication-factor <span class="token number">1</span> <span class="token parameter variable">--partitions</span> <span class="token number">3</span> <span class="token parameter variable">--topic</span> org.test2 --bootstrap-server 内网ip:9092</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查询topic信息</span></span>
<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--describe</span> <span class="token parameter variable">--topic</span> org.test1 --bootstrap-server localhost:9092</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250308130043211.png" alt="image-20250308130043211" tabindex="0" loading="lazy"><figcaption>image-20250308130043211</figcaption></figure><h4 id="producer" tabindex="-1"><a class="header-anchor" href="#producer"><span>producer</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 发送消息</span></span>
<span class="line">bin/kafka-console-producer.sh <span class="token parameter variable">--topic</span> org.test1 --bootstrap-server localhost:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Broker 只配置 listeners=PLAINTEXT://oycm:9092 配置</span></span>
<span class="line">bin/kafka-console-producer.sh <span class="token parameter variable">--topic</span> org.test1 --bootstrap-server root:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Broker 指定监听地址 advertised.listeners=PLAINTEXT://公网ip:9092</span></span>
<span class="line">bin/kafka-console-producer.sh <span class="token parameter variable">--topic</span> org.test1 --bootstrap-server 内网ip:9092</span>
<span class="line"></span>
<span class="line">bin/kafka-console-producer.sh --broker-list localhost:9092 <span class="token parameter variable">--topic</span> org.test2</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="consumer" tabindex="-1"><a class="header-anchor" href="#consumer"><span>consumer</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 从开始位置消费</span></span>
<span class="line">bin/kafka-console-consumer.sh <span class="token parameter variable">--topic</span> org.test1 --from-beginning --bootstrap-server localhost:9092</span>
<span class="line"><span class="token comment"># 显示key消费</span></span>
<span class="line"><span class="token assign-left variable">print.key</span><span class="token operator">=</span>true</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Broker 只配置 listeners=PLAINTEXT://oycm:9092 配置</span></span>
<span class="line">bin/kafka-console-consumer.sh <span class="token parameter variable">--topic</span> org.test1 --from-beginning --bootstrap-server root:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Broker 指定监听地址 advertised.listeners=PLAINTEXT://公网ip:9092</span></span>
<span class="line">bin/kafka-console-consumer.sh <span class="token parameter variable">--topic</span> org.test1 --from-beginning --bootstrap-server 内网ip:9092</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 重置消费者组偏移量 消费者停止才能重置</span></span>
<span class="line">bin/kafka-consumer-groups.sh --bootstrap-server oycm:9092 <span class="token parameter variable">--group</span> <span class="token operator">&lt;</span>group_name<span class="token operator">&gt;</span> --reset-offsets --to-latest --all-topics <span class="token parameter variable">--execute</span></span>
<span class="line"></span>
<span class="line">bin/kafka-consumer-groups.sh --bootstrap-server oycm:9092 <span class="token parameter variable">--group</span> c2 --reset-offsets --to-latest --all-topics <span class="token parameter variable">--execute</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 删除偏移量</span></span>
<span class="line">bin/kafka-consumer-groups.sh --bootstrap-server <span class="token number">172.24</span>.117.21:9092 <span class="token parameter variable">--group</span> c2 --delete-offsets <span class="token parameter variable">--topic</span> org.test1</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查询kafka消费者组的偏移量</span></span>
<span class="line">bin/kafka-consumer-groups.sh --bootstrap-server <span class="token operator">&lt;</span>kafka-bootstrap-server<span class="token operator">&gt;</span> <span class="token parameter variable">--group</span> <span class="token operator">&lt;</span>consumer-group<span class="token operator">&gt;</span> <span class="token parameter variable">--describe</span></span>
<span class="line">bin/kafka-consumer-groups.sh --bootstrap-server <span class="token number">172.24</span>.117.21:9092 <span class="token parameter variable">--group</span> c2 <span class="token parameter variable">--describe</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="admin" tabindex="-1"><a class="header-anchor" href="#admin"><span>admin</span></a></h4><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">bin/kafka-administration.sh --bootstrap-server <span class="token operator">&lt;</span>kafka-bootstrap-server<span class="token operator">&gt;</span> --trigger-rebalance <span class="token parameter variable">--group</span> <span class="token operator">&lt;</span>consumer-group<span class="token operator">&gt;</span></span>
<span class="line">bin/kafka-administration.sh --bootstrap-server oycm:9092 --trigger-rebalance <span class="token parameter variable">--group</span> test1</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="_2-kafka生产者api" tabindex="-1"><a class="header-anchor" href="#_2-kafka生产者api"><span>2.Kafka生产者API</span></a></h3><p>https://kafka.apache.org/35/javadoc/index.html?org/apache/kafka/clients/producer/KafkaProducer.html</p><div class="language-pom" data-highlighter="prismjs" data-ext="pom" data-title="pom"><pre><code><span class="line">&lt;dependency&gt;</span>
<span class="line">	&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span>
<span class="line">	&lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span>
<span class="line">	&lt;version&gt;3.5.0&lt;/version&gt;</span>
<span class="line">&lt;/dependency&gt;</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>Kafka生产者发送消息的主要模式：发后即忘(fire-and-forget)、同步发送（sync）、异步发送（async）。</p><ul><li>发后即忘：只管向Kafka发送消息而不关心消息是否正确到达。发送性能最好，可靠性最差。</li><li>同步发送：利用返回的Feature对象阻塞等待Kafka的响应，知道消息发送成功。</li><li>异步发送：生产者提供回调支持。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaClient</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bootstrap.servers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;host:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;acks&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;linger.ms&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;retries&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key.serializer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;value.serializer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Producer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;org.test1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kafka发送消息的执行过程：</p><ol><li>在创建KafkaProducer对象时，就已经创建了一个Kafka发送消息线程。</li><li>调用send，先执行消息拦截器（配置才执行，且不会抛出异常）。</li><li>获取topic的元数据。</li><li>消息序列化，key和value。</li><li>设置消息的分区。</li><li>消息追加器。</li><li>消息拦截器回调和同步等待、异步回调。ProducerInterceptor消息拦截器的onAcknowledgement回调，在消息被确认应答之前或消息发送失败时调用，在生产者线程中调用。</li></ol><figure><img src="http://47.101.155.205/image-20250308153640572.png" alt="image-20250308153640572" tabindex="0" loading="lazy"><figcaption>image-20250308153640572</figcaption></figure><figure><img src="http://47.101.155.205/image-20250308154029898.png" alt="image-20250308154029898" tabindex="0" loading="lazy"><figcaption>image-20250308154029898</figcaption></figure><figure><img src="http://47.101.155.205/image-20250308154803356.png" alt="image-20250308154803356" tabindex="0" loading="lazy"><figcaption>image-20250308154803356</figcaption></figure><figure><img src="http://47.101.155.205/image-20250308155304930.png" alt="image-20250308155304930" tabindex="0" loading="lazy"><figcaption>image-20250308155304930</figcaption></figure><p>Kafka生产者发送到主题的消息，只会保存在某一个分区，主题在被创建的时候，可以指定分区的数量。Kafka提供的分区策略Partitioner决定了消息发送到哪个分区。</p><p><strong>常见的分区有几种：</strong></p><ol><li>DefaultPartitioner：默认分区策略。</li><li>RoundRobinPartitioner：轮询分区策略。</li><li>UniformStickyPartitioner：黏性分区策略。</li><li>散列分区策略：key不为空，使用了默认的分区器，Kafka会对key进行散列，然后根据散列值把消息映射到对应的分区。</li><li>实现Partitioner自定义分区策略。</li></ol><p><strong>生产者压缩机制：</strong></p><p>生产者负责压缩、Broker端负责保持、消费端负责解压。利用生产者的CPU去换Broker端磁盘存储空间，以及生产者和消费者的网络I/O。</p><p>compression.type配置压缩方式。</p><ol><li>gzip：压缩效率高，CPU消耗大，适合对带宽敏感场景。压缩和解压较慢。</li><li>snappy：压缩率适中，CPU消耗较低，适用于延迟和吞吐量要求高的场景。</li><li>lz4：压缩率和snappy相当，当压缩和解压速度更快。</li><li>zstd（Zstandard）：压缩率高，接近gzip，压缩和解压更快。CPU介于gzip和snappy之间。</li></ol><p><strong>消息插件回调？</strong></p><p>spring-kafka有提供一个生产/应答模式，生产者发送消息后，等待消费者消费后，把消息再推到另外一个Topic，生产者从这个Topic中确认是否应答成功。</p><h3 id="_2-kafka消费者api" tabindex="-1"><a class="header-anchor" href="#_2-kafka消费者api"><span>2.Kafka消费者API</span></a></h3><p>https://kafka.apache.org/35/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaConsumer.html</p><div class="language-pom" data-highlighter="prismjs" data-ext="pom" data-title="pom"><pre><code><span class="line">&lt;dependency&gt;</span>
<span class="line">	&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span>
<span class="line">	&lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span>
<span class="line">	&lt;version&gt;3.5.0&lt;/version&gt;</span>
<span class="line">&lt;/dependency&gt;</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>创建KafkaConsumer(Properties properties)对象执行过程：</p><ol><li>有配置group.instance.id，则日志上下文对象设置instanceId。</li><li>配置ConsumerInterceptor消费者拦截器，默认空。</li><li>设置key、value的反序列化器。</li><li>设置ConsumerPartitionAssignor消费者分区器。默认有RangeAssignor、CooperativeStickyAssignor。</li><li>有设置消费者组，创建ConsumerCoordinator消费者组协调器。</li></ol><p><strong>偏移量和提交：</strong></p><p>Kafka的消费根据当前的偏移量来拉取消息，消息消费完成之后，会更新当前的偏移量，这个就是提交。</p><p>Kafka消费者跟踪它在每个分区中消耗的最大偏移量，并具有提交偏移量的能力，以便在重新启动时可以从这些偏移量恢复。Kafka提供了一个选项，将给定消费者组的所有偏移量存储在一个指定的代理（针对该组）中，该代理称为组协调器。也就是说，该消费者组中的任何消费者实例都应该将其偏移量提交和提取发送到该组协调器（代理）。消费者组根据其组名分配给协调器。消费者可以通过向任何Kafka代理发出FindCoordinatorRequest并读取包含协调器详细信息的FindCoordinatorResponse来查找其协调器。然后，消费者可以继续提交或从协调器代理获取偏移量。如果协调器移动，消费者将需要重新发现协调器。偏移量提交可以由消费者实例自动或手动完成。</p><p>当组协调器接收到OffsetCommitRequest时，它将请求附加到一个名为 __consumer_offsets 的特殊<a href="https://kafka.apache.org/documentation/#compaction" target="_blank" rel="noopener noreferrer">压缩</a> Kafka主题。只有在偏移量主题的所有副本都收到偏移量之后，代理才会向消费者发送成功的偏移量提交响应。如果偏移量未能在可配置的超时时间内复制，则偏移量提交将失败，消费者可以在退出后重试提交。 代理会定期压缩 offsets 主题，因为它只需要维护每个分区的最新 offset 提交。 协调器还将偏移量缓存在内存中的表中，以便快速提供偏移量获取。</p><p>当协调器收到偏移量获取请求时，它只会从 offsets 缓存中返回最后提交的偏移量向量。如果 coordinator 刚刚启动，或者它刚刚成为一组新的消费者组的协调器（通过成为 offsets 主题的分区的领导者），它可能需要将 offsets 主题分区加载到缓存中。在这种情况下，偏移量获取将失败，并显示 CoordinatorLoadInProgressException，并且消费者可以在回退后重试 OffsetFetchRequest。</p><p><strong>偏移量提交方式：</strong></p><ol><li>自动提交：enable.auto.commit=true，auto.commit.interval.ms=5000。</li><li>手动同步提交。</li><li>手动异步提交。</li><li>手动提交指定偏移量。</li></ol><p><strong>分区重平衡：</strong></p><p>当新的消费者加入消费者组或消费者离开消费者组，就会发送分区重平衡。重平衡的优点是保证高可用性和扩展性，但是也带来了问题，重平衡期间整个消费者组不可使用。</p><p>在设置消费者消费的Topic时，可以指定ConsumerRebalanceListener重平衡监听器。</p><h3 id="_3-kafka-streamapi" tabindex="-1"><a class="header-anchor" href="#_3-kafka-streamapi"><span>3.Kafka StreamAPI</span></a></h3><p>https://kafka.apache.org/35/javadoc/index.html?org/apache/kafka/streams/KafkaStreams.html</p><p>相关文档：https://kafka.apache.org/35/documentation/streams/</p><p>DSL API：https://kafka.apache.org/35/documentation/streams/developer-guide/dsl-api.html</p><p>Stream 配置介绍：https://kafka.apache.org/35/documentation/streams/developer-guide/config-streams.html</p><p>开发文档：https://kafka.apache.org/35/documentation/streams/developer-guide/</p><div class="language-pom" data-highlighter="prismjs" data-ext="pom" data-title="pom"><pre><code><span class="line">&lt;dependency&gt;</span>
<span class="line">	&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span>
<span class="line">	&lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;</span>
<span class="line">	&lt;version&gt;3.5.0&lt;/version&gt;</span>
<span class="line">&lt;/dependency&gt;</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="流式计算框架介绍" tabindex="-1"><a class="header-anchor" href="#流式计算框架介绍"><span>流式计算框架介绍</span></a></h4><p>流式计算框架是一种用于处理实时数据流的计算框架。与传统的批处理框架（如 Hadoop MapReduce）不同，流式计算框架能够对持续生成的数据流进行实时处理和分析，适用于需要低延迟、高吞吐量的场景。</p><p><strong>流式计算框架的核心作用：</strong></p><ol><li>实时数据处理：流式计算框架能够处理持续生成的数据流（如日志、传感器数据、交易记录等），并在数据到达时立即进行处理。</li><li>低延迟：流式计算框架通常能够在毫秒或秒级内处理数据，满足对实时性要求较高的场景。</li><li>高吞吐量：流式计算框架能够高效处理大规模数据流，支持高并发和高吞吐量。</li><li>复杂事件处理：支持对数据流中的复杂事件进行检测和处理，例如模式匹配、时间窗口聚合等。</li><li>容错性和状态管理：流式计算框架通常具备容错机制，能够在节点故障时恢复计算状态，确保数据处理的准确性和一致性。</li></ol><p><strong>常见的流式计算框架：</strong></p><ol><li>Apache Flink：一个高性能的流式计算框架，支持事件时间处理、状态管理和精确一次（exactly-once）语义。</li><li>Apache Spark Streaming：基于 Spark 的流处理模块，将数据流划分为小批次进行处理。支持精确一次（exactly-once）语义。</li><li>Apache Kafka Streams：基于 Kafka 的轻量级流处理库。支持精确一次（exactly-once）语义。</li></ol><h4 id="命令行demo" tabindex="-1"><a class="header-anchor" href="#命令行demo"><span>命令行demo</span></a></h4><ol><li><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 在Kafka启动的情况下，创建输入、输出Topic：</span></span>
<span class="line"><span class="token comment"># 创建名为streams-plaintext-input的输入Topic</span></span>
<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token punctuation">\\</span></span>
<span class="line">    --bootstrap-server root:9092 <span class="token punctuation">\\</span></span>
<span class="line">    --replication-factor <span class="token number">1</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--partitions</span> <span class="token number">1</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--topic</span> streams-plaintext-input</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建名为 streams-plaintext-output 的输入Topic，支持压缩功能</span></span>
<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token punctuation">\\</span></span>
<span class="line">    --bootstrap-server root:9092 <span class="token punctuation">\\</span></span>
<span class="line">    --replication-factor <span class="token number">1</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--partitions</span> <span class="token number">1</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--topic</span> streams-wordcount-output <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--config</span> <span class="token assign-left variable">cleanup.policy</span><span class="token operator">=</span>compact</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查询所有Topic的情况</span></span>
<span class="line">bin/kafka-topics.sh --bootstrap-server root:9092 <span class="token parameter variable">--describe</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 启动WordCountDemo程序，注意如果本机监听不是localhost，无法来，需要改listener和advertised.listeners配置</span></span>
<span class="line">bin/kafka-run-class.sh org.apache.kafka.streams.examples.wordcount.WordCountDemo</span>
<span class="line"></span>
<span class="line"></span></code></pre></div></li><li><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 启动输入Topic的生产者，修改为localhost</span></span>
<span class="line">bin/kafka-console-producer.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--topic</span> streams-plaintext-input</span>
<span class="line"></span>
<span class="line"></span></code></pre></div></li><li><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 启动输出Topic的消费者，修改为localhost</span></span>
<span class="line">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--topic</span> streams-wordcount-output <span class="token punctuation">\\</span></span>
<span class="line">    --from-beginning <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--formatter</span> kafka.tools.DefaultMessageFormatter <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--property</span> <span class="token assign-left variable">print.key</span><span class="token operator">=</span>true <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--property</span> <span class="token assign-left variable">print.value</span><span class="token operator">=</span>true <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--property</span> <span class="token assign-left variable">key.deserializer</span><span class="token operator">=</span>org.apache.kafka.common.serialization.StringDeserializer <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--property</span> <span class="token assign-left variable">value.deserializer</span><span class="token operator">=</span>org.apache.kafka.common.serialization.LongDeserializer</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 输入Topic，第1次发送消息</span></span>
<span class="line">all streams lead to kafka</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250309155044960.png" alt="image-20250309155044960" tabindex="0" loading="lazy"><figcaption>image-20250309155044960</figcaption></figure><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 输入Topic，第2次发送消息</span></span>
<span class="line">hello kafka streams</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250309155127183.png" alt="image-20250309155127183" tabindex="0" loading="lazy"><figcaption>image-20250309155127183</figcaption></figure><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 输入Topic，第3次发送消息</span></span>
<span class="line"><span class="token function">join</span> kafka summit</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250309155212978.png" alt="image-20250309155212978" tabindex="0" loading="lazy"><figcaption>image-20250309155212978</figcaption></figure><p>Wordcount 应用程序的输出实际上是一个连续的更新流，其中每条输出记录（即上面原始输出中的每一行）都是 单个单词的更新计数，也称为记录键，例如 “Kafka”。对于具有相同键的多条记录，后面的每条记录都是前一条记录的更新。</p><figure><img src="http://47.101.155.205/image-20250309155622359.png" alt="image-20250309155622359" tabindex="0" loading="lazy"><figcaption>image-20250309155622359</figcaption></figure><h4 id="demo代码" tabindex="-1"><a class="header-anchor" href="#demo代码"><span>demo代码</span></a></h4><p><strong>拓扑</strong>：Stream应用程序中的计算逻辑（流式计算任务）。定义了数据源、如何处理数据、最终输出。</p><p><strong>--&gt;和&lt;--箭头分别表示该节点的下游和上游处理器节点，即拓扑图中的 子和父。</strong></p><h5 id="pipe" tabindex="-1"><a class="header-anchor" href="#pipe"><span>Pipe</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span></span><span class="token class-name">Serdes</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>streams<span class="token punctuation">.</span></span><span class="token class-name">KafkaStreams</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>streams<span class="token punctuation">.</span></span><span class="token class-name">StreamsBuilder</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>streams<span class="token punctuation">.</span></span><span class="token class-name">StreamsConfig</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>streams<span class="token punctuation">.</span></span><span class="token class-name">Topology</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Topic 到 Topic 管道</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pipe</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_ID_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;streams-pipe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;47.101.155.205:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 序列化的配置</span></span>
<span class="line">        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_KEY_SERDE_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">Serdes<span class="token punctuation">.</span>String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_VALUE_SERDE_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">Serdes<span class="token punctuation">.</span>String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 开始定义 Stream的计算逻辑（拓扑）</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">StreamsBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 指定拓扑从 一个Topic到另一个Topic</span></span>
<span class="line">        builder<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token string">&quot;org.test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">&quot;org.test2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">Topology</span> topology <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 打印拓扑描述</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>topology<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Stream 客户端</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">KafkaStreams</span> streams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaStreams</span><span class="token punctuation">(</span>topology<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 关闭的回调</span></span>
<span class="line">        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">&quot;streams-shutdown-hook&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                streams<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 启动流式计算</span></span>
<span class="line">            streams<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250309164341586.png" alt="image-20250309164341586" tabindex="0" loading="lazy"><figcaption>image-20250309164341586</figcaption></figure><h5 id="linesplit" tabindex="-1"><a class="header-anchor" href="#linesplit"><span>LineSplit</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LineSplit</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_ID_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;streams-linesplit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_KEY_SERDE_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">Serdes<span class="token punctuation">.</span>String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_VALUE_SERDE_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">Serdes<span class="token punctuation">.</span>String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 开始定义 Stream的计算逻辑（拓扑）</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">StreamsBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">KStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> source <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token string">&quot;streams-plaintext-input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        source<span class="token punctuation">.</span><span class="token function">flatMapValues</span><span class="token punctuation">(</span>value <span class="token operator">-&gt;</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\W+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">&quot;streams-linesplit-output&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">Topology</span> topology <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>topology<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 与 Pipe 代码相同</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250309165702067.png" alt="image-20250309165702067" tabindex="0" loading="lazy"><figcaption>image-20250309165702067</figcaption></figure><h5 id="wordcount" tabindex="-1"><a class="header-anchor" href="#wordcount"><span>WordCount</span></a></h5><p><strong>不知道这里的count计算是如何实现累加？</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCount</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_ID_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;streams-wordcount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;47.101.155.205:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_KEY_SERDE_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">Serdes<span class="token punctuation">.</span>String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_VALUE_SERDE_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">Serdes<span class="token punctuation">.</span>String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">StreamsBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">KStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> source <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token string">&quot;streams-plaintext-input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        source<span class="token punctuation">.</span><span class="token function">flatMapValues</span><span class="token punctuation">(</span>value <span class="token operator">-&gt;</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\W+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> value<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token class-name">Materialized</span><span class="token punctuation">.</span>&lt;<span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">KeyValueStore</span><span class="token operator">&lt;</span><span class="token class-name">Bytes</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;counts-store&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">toStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">&quot;streams-wordcount-output&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Produced</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">Serdes<span class="token punctuation">.</span>String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Serdes<span class="token punctuation">.</span>Long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">Topology</span> topology <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>topology<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 与 Pipe 代码相同</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250309173507189.png" alt="image-20250309173507189" tabindex="0" loading="lazy"><figcaption>image-20250309173507189</figcaption></figure><h4 id="kafka-stream概念" tabindex="-1"><a class="header-anchor" href="#kafka-stream概念"><span>Kafka Stream概念</span></a></h4><figure><img src="http://47.101.155.205/image-20250309200754925.png" alt="image-20250309200754925" tabindex="0" loading="lazy"><figcaption>image-20250309200754925</figcaption></figure><p>Kafka Streams 是一个客户端库，用于处理和分析存储在 Kafka 中的数据。它建立在重要的流处理概念之上，例如正确区分事件时间和处理时间、窗口支持以及简单而高效的管理和实时查询应用程序状态。</p><p><strong>拓扑中有两个特殊处理器：</strong></p><ol><li><strong>Source Processor</strong>：源处理器是一种特殊类型的流处理器，没有任何上游处理器。它通过使用来自这些主题的记录并将其转发到其下游处理器，从一个或多个 Kafka 主题生成到其拓扑的输入流。</li><li><strong>Sink Processor</strong>：接收器处理器是一种特殊类型的流处理器，没有下游处理器。它将从其上游处理器收到的任何记录发送到指定的 Kafka 主题。</li></ol><figure><img src="http://47.101.155.205/image-20250309174655493.png" alt="image-20250309174655493" tabindex="0" loading="lazy"><figcaption>image-20250309174655493</figcaption></figure><p><strong>时间概念：</strong></p><ol><li><strong>事件时间（Event time ）</strong>：事件或数据记录发生的时间点，即最初在“源”处创建。消息到达Kafka Broker的时间戳。</li><li><strong>处理时间（Processing time）</strong>：事件或数据记录恰好由流处理应用程序处理的时间点，即使用记录时。</li><li><strong>接收时间（Ingestion time）</strong>： Kafka Broker将事件或数据记录存储在主题分区中的时间点。</li></ol><p>Kafka Streams 应用程序将记录写入 Kafka 的时间：</p><ol><li>当通过处理某些输入记录生成新的输出记录时，例如，在 <code>process()</code> 函数调用中触发的 <code>context.forward()</code>时，输出记录时间戳会直接从输入记录时间戳继承。</li><li>当通过 <code>Punctuator.punctuate()</code> 等周期性函数生成新的输出记录时，输出记录时间戳被定义为流任务的当前内部时间（通过 <code>context.timestamp()</code> 获取）。</li><li>可以通过在调用 <code>forward()</code> 时将时间戳显式分配给输出记录来更改处理器 API 中的默认行为。</li><li>聚合和联接计算规则： <ol><li>对于具有 left 和 right 的连接 （stream-stream， table-table） input records 时，将分配输出记录的时间戳 <code>max(left.ts， right.ts)</code>。</li><li>对于流表联接，将向输出记录分配流记录中的时间戳。</li><li>对于聚合，Kafka Streams 还会计算<code>最大值</code> 每个键的所有记录的时间戳，全局（对于非窗口） 或每个窗口。</li><li>对于无状态操作，将传递输入记录时间戳。对于发出多条记录的 <code>flatMap</code> 和 siblings，所有输出记录都从相应的 input 记录继承时间戳。</li></ol></li></ol><p><strong>流分区和任务：</strong></p><p>Kafka 的消息收发层对数据进行分区，以便存储和传输数据。Kafka Streams 对数据进行分区以进行处理。在这两种情况下，这种分区都是实现数据局部性、弹性、可扩展性、高性能和容错能力的原因。Kafka Streams 使用<strong>分区</strong>和<strong>任务</strong>的概念作为其基于 Kafka 主题分区的并行模型的逻辑单元。 在并行性上下文中，Kafka Streams 和 Kafka 之间存在密切联系：</p><ol><li>每个<strong>流分区</strong>都是一个完全有序的数据记录序列，并映射到 Kafka <strong>主题分区</strong>。</li><li>流中的数据<strong>记录</strong>映射到来自该主题的 Kafka <strong>消息</strong>。</li><li>数据记录的<strong>键</strong>决定了 Kafka 和 Kafka Streams 中的数据分区，即数据如何路由到 Topic 中的特定分区。</li></ol><p>通过将应用程序的处理器拓扑分解为多个任务来扩展应用程序。更具体地说，Kafka Streams 根据应用程序的输入流分区创建固定数量的任务，每个任务都分配了来自输入流的分区列表（即 Kafka 主题）。<strong>分配给任务的分区永远不会改变</strong>，因此每个任务都是应用程序的固定并行单元。然后，任务可以根据分配的分区实例化自己的处理器拓扑;它们还为每个分配的分区维护一个缓冲区，并一次处理来自这些记录缓冲区的消息。因此，流任务可以独立并行处理，无需人工干预。</p><p>稍微简化一下，应用程序可以运行的最大并行度受最大流任务数的限制，而流任务本身由应用程序正在读取的输入主题的最大分区数决定。例如，如果您的输入主题有 5 个分区，则您最多可以运行 5 个应用程序实例。这些实例将协作处理主题的数据。如果您运行的应用程序实例数多于输入主题的分区数，则“多余的”应用程序实例将启动，但保持空闲状态；但是，如果其中一个繁忙的实例宕机，其中一个空闲实例将恢复前者的工作。</p><p>重要的是要了解 Kafka Streams 不是一个资源管理器，而是一个库，它可以“运行”在流处理应用程序运行的任何位置。应用程序的多个实例要么在同一台计算机上执行，要么分布在多台计算机上，并且任务可以由库自动分配给运行应用程序实例的用户。<strong>对任务的分区分配永远不会改变</strong>；如果应用程序实例失败，则其分配的所有任务将在其他实例上自动重启，并继续使用同一流分区中的任务。</p><p>主题分区分配给任务，并将任务分配给所有实例上的所有线程，以尽最大努力在负载均衡和有状态任务的粘性之间进行权衡。对于此分配，Kafka Streams 使用 <a href="https://github.com/apache/kafka/blob/trunk/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java" target="_blank" rel="noopener noreferrer">StreamsPartitionAssign</a>，并且<strong>不允许</strong>您更改为其他分配器。如果您尝试使用不同的分配器，Kafka Streams 会忽略它。</p><figure><img src="http://47.101.155.205/image-20250309201703759.png" alt="image-20250309201703759" tabindex="0" loading="lazy"><figcaption>image-20250309201703759</figcaption></figure><p><strong>线程模型：</strong></p><p>Kafka Streams 允许用户配置库可用于在应用程序实例中并行处理的<strong>线程</strong>数。每个线程都可以独立执行一个或多个具有其处理器拓扑的任务。例如，下图显示了一个运行两个流任务的流线程：</p><figure><img src="http://47.101.155.205/image-20250309201923771.png" alt="image-20250309201923771" tabindex="0" loading="lazy"><figcaption>image-20250309201923771</figcaption></figure><p>启动应用程序的更多流线程或更多实例仅相当于复制拓扑并让它处理 Kafka 分区的不同子集，从而有效地并行化处理。值得注意的是，线程之间没有共享状态，因此不需要线程间协调。这使得跨应用程序实例和线程并行运行拓扑变得非常简单。Kafka Streams 利用 <a href="https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Client-side+Assignment+Proposal" target="_blank" rel="noopener noreferrer">Kafka 的协调</a>功能，透明地处理各种流线程之间 Kafka 主题分区的分配。</p><p>如上所述，使用 Kafka Streams 扩展您的流处理应用程序很容易：您只需启动应用程序的其他实例，Kafka Streams 负责在应用程序实例中运行的任务之间分配分区。您可以启动与输入 Kafka 主题分区数量一样多的应用程序线程，以便在应用程序的所有运行实例中，每个线程（或者更确切地说，它运行的任务）至少有一个输入分区要处理。</p><h4 id="流和表的对偶性" tabindex="-1"><a class="header-anchor" href="#流和表的对偶性"><span>流和表的对偶性</span></a></h4><p>流和表的对偶性(Duality of Streams and Tables)。</p><p><strong>流的定义：</strong></p><ol><li>流是一个无界的数据序列，表示持续生成的事件记录。</li><li>每条记录通常包含一个键（Key）和一个值（Value）。</li><li>流是不可变的，新记录会追加到流的末尾。</li></ol><p><strong>表的定义：</strong></p><ol><li>表是一个有界的数据集合，表示某个时间点的状态。</li><li>表是可变的，可以通过插入、更新或删除操作来修改表中的记录。</li><li>表通常用于存储聚合结果或物化视图。</li></ol><p><strong>流作为表</strong>：流可以被视为表的更改日志，其中流中的每个数据记录都捕获表的状态更改。因此，流是一个伪装的表，通过从头到尾重放 changelog 来重建表，可以很容易地将其变成一个 “真实” 的表。同样，在更一般的类比中，聚合流中的数据记录（例如从网页浏览事件流中计算用户的总网页浏览量）将返回一个表格（此处的键和值分别是用户及其相应的网页浏览量）。</p><p><strong>表作为流</strong>：表可以被视为流中每个键在某个时间点的最新值的快照（流的数据记录是键值对）。因此，表是伪装的流，通过迭代表中的每个键值条目，可以很容易地将其转换为“真实”流。</p><figure><img src="http://47.101.155.205/image-20250309181342534.png" alt="image-20250309181342534" tabindex="0" loading="lazy"><figcaption>image-20250309181342534</figcaption></figure><h4 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合"><span>聚合</span></a></h4><p>聚合作采用一个输入流或表，并通过将多个输入记录合并到单个输出记录中来生成一个新表。</p><p>在 Kafka Streams DSL 中，聚合的输入流可以是 KStream 或 KTable，但输出流将始终是 <strong>KTable</strong>。这允许 Kafka Streams 在生成和发出值后，在更多记录无序到达时更新聚合值。当发生此类无序到达时，聚合 KStream 或 KTable 会发出新的聚合值。由于输出是 KTable，因此在后续处理步骤中，新值被视为使用相同的键覆盖旧值。</p><h4 id="窗口" tabindex="-1"><a class="header-anchor" href="#窗口"><span>窗口</span></a></h4><p>窗口化允许您控制如何将具有相同键的记录分组，以便进行有状态操作，例如聚合或联接到所谓的窗口中。按记录键跟踪窗口。</p><p><code>Kafka Streams DSL</code> 中提供了<code>窗口操作</code>。使用窗口时，您可以为窗口指定宽<strong>限期</strong>。此宽限期控制 Kafka Streams 将等待给定窗口的<strong>无序</strong>数据记录的时间。如果记录在窗口的宽限期过后到达，则该记录将被丢弃，并且不会在该窗口中进行处理。具体来说，如果记录的时间戳指示该记录属于某个窗口，但当前流时间大于窗口结束时间加上宽限期，则会丢弃该记录。</p><p>四种类型的窗口：</p><ol><li>跳跃时间窗口（Hopping time window）：窗口大小固定，窗口重叠。</li><li>滚动时间窗口（Tumbling time window）：窗口大小固定，窗口不重叠，窗口间无间隙。</li><li>滑动时间窗口（Sliding time window）：窗口大小固定，窗口重叠，通过处理窗口时间戳的差异支持窗口重叠。</li><li>会话窗口（Session Window）：窗口大小可动态调整，窗口不重叠，通过数据进行驱动。</li></ol><p>无序记录在现实世界中总是可能的，应该在你的应用程序中适当地考虑。它取决于 Effective <code>time 语义</code>如何处理无序记录。在处理时间的情况下，语义是“当记录被处理时”，这意味着无序记录的概念不适用，因为根据定义，没有记录可以乱序。因此，无序记录只能被视为事件时间。在这两种情况下，Kafka Streams 都能够正确处理无序记录。</p><h4 id="状态" tabindex="-1"><a class="header-anchor" href="#状态"><span>状态</span></a></h4><p>Kafka Streams 提供<strong>状态存储</strong>，流处理应用程序可以使用它来存储和查询数据。 在实施有状态作时，这是一项重要的功能。 Kafka Streams 中的每个任务都嵌入了一个或多个状态存储，可以通过 API 访问这些状态存储，以存储和查询处理所需的数据。 这些状态存储可以是持久化键值存储、内存中的 hashmap 或其他方便的数据结构。 Kafka Streams 为本地状态存储提供容错和自动恢复功能。</p><p>Kafka Streams 允许创建状态存储的流处理应用程序外部的方法、线程、进程或应用程序对状态存储进行直接只读查询。这是通过一个名为 <strong>Interactive Queries</strong> 的功能提供的。所有 store 都已命名，并且 Interactive Queries 仅公开底层实现的读取作。</p><p>Kafka Streams 应用程序中的每个流任务都可以嵌入一个或多个本地状态存储，这些状态存储可以通过 API 访问，以存储和查询处理所需的数据。Kafka Streams 为此类本地状态存储提供容错和自动恢复功能。</p><figure><img src="http://47.101.155.205/image-20250309202218950.png" alt="image-20250309202218950" tabindex="0" loading="lazy"><figcaption>image-20250309202218950</figcaption></figure><h4 id="保证次数" tabindex="-1"><a class="header-anchor" href="#保证次数"><span>保证次数</span></a></h4><p>在流处理中，最常见的问题之一是”我的流处理系统是否保证每条记录只处理一次，即使在处理过程中遇到一些故障？ a”对于许多无法容忍任何数据丢失或数据重复的应用程序来说，不能保证 exactly-once 流处理会破坏交易，在这种情况下，通常会额外使用面向批处理的框架到流处理管道，称为 <a href="http://lambda-architecture.net/" target="_blank" rel="noopener noreferrer">Lambda 架构</a>。 在 0.11.0.0 之前，Kafka 仅提供至少一次交付保证，因此任何将其用作后端存储的流处理系统都无法保证端到端的恰好一次语义。 事实上，即使那些声称支持恰好一次处理的流处理系统，只要它们以 source / sink 作为 Kafka 进行读取/写入，其应用程序实际上也无法保证 在整个管道中不会生成重复项。</p><p>自 0.11.0.0 版本以来，Kafka 增加了支持，允许其生产者以<a href="https://kafka.apache.org/documentation/#semantics" target="_blank" rel="noopener noreferrer">事务性和幂等的方式</a>将消息发送到不同的主题分区。 因此，Kafka Streams 通过利用这些功能添加了端到端的 Exactly-once 处理语义。 更具体地说，它保证对于从源 Kafka 主题读取的任何记录，其处理结果将只反映在输出 Kafka 主题以及状态作的状态存储中一次。 请注意，Kafka Streams 端到端的 Exactly-once 保证与其他流处理框架声称的保证之间的主要区别在于，Kafka Streams 与底层 Kafka 存储系统紧密集成，并确保 对输入主题的提交偏移量、对状态存储的更新和对输出主题的写入将以原子方式完成，而不是将 Kafka 视为可能具有副作用的外部系统。</p><p>Exactly-once：https://cwiki.apache.org/confluence/display/KAFKA/KIP-129%3A+Streams+Exactly-Once+Semantics</p><p>从 2.6.0 版本开始，Kafka Streams 支持改进的 exactly-once 处理实现，称为“exactly-once v2”。 这需要 Broker 版本 2.5.0 或更高版本。 此实现效率更高，因为它降低了客户端和代理资源利用率，例如客户端线程和使用的网络连接。 它支持更高的吞吐量和改进的可扩展性。 从 3.0.0 版本开始，exactly-once 的第一个版本已被弃用。鼓励用户对 从现在开始进行 Exactly-once 处理，并在必要时通过升级他们的代理来做好准备。</p><p>Exactly-once-v2：https://cwiki.apache.org/confluence/display/KAFKA/KIP-447%3A+Producer+scalability+for+exactly+once+semantics</p><p>要在运行 Kafka Streams 应用程序时启用 exactly-once 语义， 设置 <code>processing.guarantee</code> 配置值（默认值为 <strong>at_least_once</strong>） 设置为 <strong>StreamsConfig.EXACTLY_ONCE_V2</strong></p><h4 id="无序处理" tabindex="-1"><a class="header-anchor" href="#无序处理"><span>无序处理</span></a></h4><p>除了保证每条记录将被恰好处理一次之外，许多流处理应用程序将面临的另一个问题是如何处理可能影响其业务逻辑<a href="https://dl.acm.org/citation.cfm?id=3242155" target="_blank" rel="noopener noreferrer">的无序数据</a>。在 Kafka Streams 中，有两个原因可能 导致数据到达相对于其时间戳的顺序错误：</p><ul><li>在主题分区中，记录的时间戳不能随其偏移量单调增加。由于 Kafka Streams 将始终尝试处理主题分区中的记录以遵循偏移量顺序，因此可能会导致时间戳较大（但偏移量较小）的记录比同一主题分区中时间戳较小（但偏移量较大）的记录更早得到处理。</li><li>在可能正在处理多个主题分区的<a href="https://kafka.apache.org/35/documentation/streams/architecture#streams_architecture_tasks" target="_blank" rel="noopener noreferrer">流任务</a>中，如果用户将应用程序配置为不等待所有分区都包含一些缓冲数据，并且 从时间戳最小的分区中选择以处理下一条记录，然后稍后当为其他主题分区获取某些记录时，它们的时间戳可能小于从另一个主题分区获取的已处理记录。</li></ul><p>对于无状态作，乱序数据不会影响处理逻辑，因为一次只考虑一条记录，而不查看过去处理记录的历史记录;但是，对于聚合和联接等有状态作，无序数据可能会导致处理逻辑不正确。如果用户想要处理此类乱序数据，通常需要允许应用程序等待更长的时间，同时在等待时间内对状态进行统计，即在延迟、成本和正确性之间做出权衡。特别是在 Kafka Streams 中，用户可以为窗口聚合配置其窗口运算符以实现此类权衡。</p><p>对于 Join，用户可以使用<a href="https://kafka.apache.org/35/documentation/streams/developer-guide/dsl-api.html#versioned-state-stores" target="_blank" rel="noopener noreferrer">版本化的状态存储</a>来解决对无序数据的问题，但默认情况下不会处理无序数据：</p><ul><li>对于 Stream-Stream 联接，所有三种类型（inner、outer、left）都可以正确处理无序记录。</li><li>对于 Stream-Table 联接，如果不使用版本控制的存储，则不会处理无序记录（即，Streams 应用程序不检查无序记录，只按偏移顺序处理所有记录），因此它可能会产生不可预知的结果。对于版本控制存储，流端无序数据将通过在表中执行基于时间戳的查找来正确处理。仍未处理表端无序数据。</li><li>对于 Table-Table 联接，如果不使用版本控制存储，则不会处理无序记录（即，Streams 应用程序不检查无序记录，只按偏移顺序处理所有记录）。 但是，join 结果是一个 changelog 流，因此最终将是一致的。使用版本控制存储，表-表联接语义从基于偏移量的语义更改为 <a href="https://kafka.apache.org/35/documentation/streams/developer-guide/dsl-api.html#versioned-state-stores" target="_blank" rel="noopener noreferrer">基于时间戳的语义</a>和乱序记录将得到相应的处理。</li></ul><h4 id="容错" tabindex="-1"><a class="header-anchor" href="#容错"><span>容错</span></a></h4><p>Kafka Streams 基于 Kafka 中原生集成的容错功能构建。Kafka 分区具有高可用性和可复制性;因此，当流数据持久化到 Kafka 时，即使应用程序出现故障并需要重新处理它，它也可以使用。Kafka Streams 中的任务利用 Kafka 使用者客户端提供的容错功能来处理故障。如果任务在发生故障的计算机上运行，Kafka Streams 会自动在应用程序的剩余运行实例之一中重新启动该任务。</p><p>此外，Kafka Streams 还确保本地状态存储对故障也很健壮。对于每个状态存储，它维护一个复制的 changelog Kafka 主题，并在其中跟踪任何状态更新。 这些 changelog 主题也被分区，以便每个本地 state store 实例以及访问该 store 的任务都有自己专用的 changelog 主题分区。 在 changelog 主题上启用了<a href="https://kafka.apache.org/35/documentation/#compaction" target="_blank" rel="noopener noreferrer">日志压缩</a>，以便可以安全地清除旧数据，以防止主题无限增长。 如果任务在发生故障的机器上运行并在另一台机器上重新启动，则 Kafka Streams 保证通过以下方式将其关联的状态存储恢复到发生故障之前的内容 在恢复对新启动的任务的处理之前重放相应的 changelog 主题。因此，故障处理对最终用户是完全透明的。</p><p>请注意，任务（重新）初始化的成本通常主要取决于通过重放状态存储的关联更改日志主题来恢复状态的时间。为了最大限度地缩短此还原时间，用户可以将其应用程序配置为具有本地状态<strong>的备用副本</strong>（即状态的完全复制副本）。当任务迁移发生时，Kafka Streams 会将任务分配给已存在此类备用副本的应用程序实例，以最大限度地降低任务（重新）初始化成本。请参阅 <a href="https://kafka.apache.org/35/documentation/#streamsconfigs" target="_blank" rel="noopener noreferrer"><strong>Kafka Streams 配置</strong></a>部分中的 <code>num.standby.replicas</code>。 从 2.6 开始，Kafka Streams 将保证仅将任务分配给具有完全捕获的状态本地副本的实例，如果此类实例 存在。备用任务将增加在发生故障时存在 caught up 实例的可能性。</p><p>您还可以配置具有机架感知功能的备用副本。配置后，Kafka Streams 将尝试将备用任务分发到与活动任务不同的“机架”上，从而在活动任务的机架发生故障时具有更快的恢复时间。请参阅 <a href="https://kafka.apache.org/35/documentation/streams/developer-guide/config-streams.html#rack-aware-assignment-tags" target="_blank" rel="noopener noreferrer"><strong>Kafka Streams 开发人员指南</strong></a> 部分中的 <code>rack.aware.assignment.tags</code>。</p><h3 id="_4-connect-api" tabindex="-1"><a class="header-anchor" href="#_4-connect-api"><span>4.Connect API</span></a></h3><p>Connect API 允许实现不断从某个源数据系统拉入 Kafka 或从 Kafka 推送到某个接收器数据系统的连接器。</p><p>文档地址：https://kafka.apache.org/documentation.html#connect</p><h3 id="_5-admin-api" tabindex="-1"><a class="header-anchor" href="#_5-admin-api"><span>5.Admin API</span></a></h3><p>https://kafka.apache.org/35/javadoc/index.html?org/apache/kafka/clients/admin/Admin.html</p><div class="language-pom" data-highlighter="prismjs" data-ext="pom" data-title="pom"><pre><code><span class="line">&lt;dependency&gt;</span>
<span class="line">	&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span>
<span class="line">	&lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span>
<span class="line">	&lt;version&gt;3.5.0&lt;/version&gt;</span>
<span class="line">&lt;/dependency&gt;</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>管理或查看Kafka。</p><p>KafkaAdminClient常用的API</p><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td>createTopics</td><td>创建Topic</td></tr><tr><td>deleteTopics</td><td>删除Topic</td></tr><tr><td>describeTopics</td><td>查询Topic的详细信息</td></tr><tr><td>describeCluster</td><td>查询集群信息</td></tr><tr><td>describeConfigs</td><td>查询配置信息</td></tr><tr><td>alterConfigs</td><td>修改配置信息</td></tr><tr><td>alterReplicaLogDirs</td><td>修改副本的日志目录</td></tr><tr><td>describeLogDirs</td><td>查询节点的日志目录信息</td></tr><tr><td>describeReplicaLogDirs</td><td>查询副本的日志目录信息</td></tr><tr><td>createPartitions</td><td>增加分区</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="_6-spring-for-kafka" tabindex="-1"><a class="header-anchor" href="#_6-spring-for-kafka"><span>6.Spring for Kafka</span></a></h3><p>Spring官网：https://spring.io/projects/spring-kafka</p><p>Spring for Kafka资料：https://docs.spring.io/spring-boot/docs/current/reference/html/messaging.html#messaging.kafka</p><p>在Spring中，可以通过注入NewTopic对象在启动是创建kafka Topic，如果这个Topic存在，则忽略这个Bean，不存在则创建。</p><blockquote><p>服务器配置</p></blockquote><div class="language-properties" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://ip:9092 # 要想其他服务器能连接上kafka，这个ip不能配置成localhost会导致消费者找不到对应的服务端，需要配置成对应的ip才可以</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><blockquote><p>发送消息</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">KafkaTemplate</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>kafkaTemplate <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;someTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>接收消息</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">KafkaListener</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;someTopic&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有自定义KafkaTransactionManager对象，他会自动关联到容器工厂。</p><p>RecordFilterStrategy、CommonErrorHandler、AfterRollbackProcessor、ConsumerAwareRebalanceListener对象被定义，会被自动关联到默认的工厂。</p><h3 id="_7-kafka可视化插件" tabindex="-1"><a class="header-anchor" href="#_7-kafka可视化插件"><span>7.Kafka可视化插件</span></a></h3><h4 id="kafdrop" tabindex="-1"><a class="header-anchor" href="#kafdrop"><span>kafdrop</span></a></h4><p>kafdrop：https://github.com/obsidiandynamics/kafdrop</p><p>docker地址：https://hub.docker.com/r/obsidiandynamics/kafdrop</p><p>docker pull：docker pull obsidiandynamics/kafdrop</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># docker 启动命令</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-e</span> <span class="token assign-left variable">KAFKA_BROKERCONNECT</span><span class="token operator">=</span>localhost:9092 <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-e</span> <span class="token assign-left variable">JVM_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-Xms32M -Xmx64M&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-e</span> <span class="token assign-left variable">SERVER_SERVLET_CONTEXTPATH</span><span class="token operator">=</span><span class="token string">&quot;/&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    obsidiandynamics/kafdrop:latest</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>启动之后访问地址为：http://localhost:9000</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-e</span> <span class="token assign-left variable">KAFKA_BROKERCONNECT</span><span class="token operator">=</span><span class="token number">134.175</span>.152.74:9092 <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-e</span> <span class="token assign-left variable">JVM_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-Xms32M -Xmx64M&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-e</span> <span class="token assign-left variable">SERVER_SERVLET_CONTEXTPATH</span><span class="token operator">=</span><span class="token string">&quot;/&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    obsidiandynamics/kafdrop</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20230807213807936.png" alt="image-20230807213807936" tabindex="0" loading="lazy"><figcaption>image-20230807213807936</figcaption></figure><h4 id="拉取项目" tabindex="-1"><a class="header-anchor" href="#拉取项目"><span>拉取项目</span></a></h4><ol><li>maven依赖io.confluent:kafka-protobuf-serializer🫙7.4.1未找到</li><li>maven的package打包失败提示乱码</li><li></li></ol><figure><img src="http://47.101.155.205/image-20230806103702089.png" alt="image-20230806103702089" tabindex="0" loading="lazy"><figcaption>image-20230806103702089</figcaption></figure><figure><img src="http://47.101.155.205/image-20230806105026798.png" alt="maven项目配置的仓库地址" tabindex="0" loading="lazy"><figcaption>maven项目配置的仓库地址</figcaption></figure><h2 id="_4-核心概念" tabindex="-1"><a class="header-anchor" href="#_4-核心概念"><span>4.核心概念</span></a></h2><h3 id="_1-kafka主题和分区" tabindex="-1"><a class="header-anchor" href="#_1-kafka主题和分区"><span>1.Kafka主题和分区</span></a></h3><ul><li>了解主题和分区的概念和原理</li><li>分区副本之间的关系</li><li>Broker端管理Topic</li></ul><p>Topic负责接收生产者发送的消息，消费者负责从Topic获取消息。Topic其实是一个逻辑概念，由分区组成。分区则是一个物理概念，一个Topic可以有多个分区，一个分区只能属于一个Topic。</p><p>生产者将消息发送至Kafka，实则是将消息发送至Topic的某个分区，并且被添加至分区的最后，通过偏移量来指定消息的位置。</p><p>在创建Topic时，还可以指定分区的副本数，通过增加分区的副本数，可以增加Kafka的容错性，通过多副本机制可以实现故障转移。在同一个分区中，存在一个Leader副本和多个Follower副本，它们保存的消息都是相同的。Leader副本负责处理读写请求，Follower副本负责从Leader副本同步消息。不同的副本可能位于不同的Broker上，当Leader副本出现故障时，Kafka会从Follower中选举新的Leader副本。分区的副本数也称为冗余度。</p><h4 id="kafka-topics-sh" tabindex="-1"><a class="header-anchor" href="#kafka-topics-sh"><span>kafka-topics.sh</span></a></h4><p>用命令操作和管理Topic</p><table><thead><tr><th>参数选项</th><th>接参数值</th><th>作用</th></tr></thead><tbody><tr><td>--alter</td><td></td><td>更改主题的分区数、副本配置、其它配置</td></tr><tr><td>--bootstrap-server</td><td>kafka地址</td><td>连接对应的kafka服务端</td></tr><tr><td>--command-config</td><td>文件路径</td><td>用于修改Broker的配置</td></tr><tr><td>--config</td><td>topic的配置</td><td>修改topic的配置</td></tr><tr><td>--create</td><td>/</td><td>创建Topic</td></tr><tr><td>--delete</td><td>string</td><td>删除Topic</td></tr><tr><td>--delet-config</td><td>topic的配置</td><td>删除Topic中的配置</td></tr><tr><td>--describe</td><td>string</td><td>列出Topic的详细信息</td></tr><tr><td>--disable-rack-aware</td><td>/</td><td>禁用机架感知副本配置机制</td></tr><tr><td>--exclude-internal</td><td>/</td><td>列出信息排除内部主题</td></tr><tr><td>--force</td><td></td><td>取消控制台提示</td></tr><tr><td>--help</td><td></td><td>帮助</td></tr><tr><td>--list</td><td>/</td><td>列出所有的可用的Topic</td></tr><tr><td>--partitions</td><td>int</td><td>指定创建Topic的分区数</td></tr><tr><td>--replica-assignment</td><td></td><td>将Topic中的分区手动进行分配的分区Broker的列表</td></tr><tr><td>--replication-factor</td><td>int</td><td>Topic中分区的副本数</td></tr><tr><td>--topic</td><td>string</td><td>Topic的名称</td></tr><tr><td>--topic-with-overrides</td><td></td><td>描述主题时设置，仅显示已重写配置的主题</td></tr><tr><td>--unavailable-partitions</td><td></td><td>描述主题时设置，仅显示Leader不可用的分区</td></tr><tr><td>--under-min-isr-partitions</td><td></td><td>描述主题时设置，仅显示isr计数小于配置分区的分区最小值</td></tr><tr><td>--under-replicated-partitions</td><td></td><td>描述主题时设置，仅显示已经完全同步的分区</td></tr><tr><td>--version</td><td></td><td>显示Kafka的版本</td></tr><tr><td>--zookeeper</td><td></td><td>过期，zookeeper地址</td></tr></tbody></table><p><strong>Isr表示列表中表示已经完成数据同步的副本号。</strong></p><h4 id="kafka-configs-sh" tabindex="-1"><a class="header-anchor" href="#kafka-configs-sh"><span>kafka-configs.sh</span></a></h4><p>用于查看或修改配置</p><table><thead><tr><th>参数</th><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>--entity-name</td><td>string</td><td>指定操作配置的名称：topic、client id、user principal name、broker id</td></tr><tr><td>--entity-type</td><td>string</td><td>指定操作配置的类型：topics、clients、users、brokers、broker-loggers</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="_2-消息的持久性" tabindex="-1"><a class="header-anchor" href="#_2-消息的持久性"><span>2.消息的持久性</span></a></h3><p>Java的磁盘IO操作有两个缺点：</p><ul><li>存储缓存对象验证影响性能。</li><li>堆内存数据的增加导致Java垃圾回收的速度越来越慢。</li></ul><p>因为磁盘线性写入性能远远大于随机写入的性能。底层操作系统对磁盘的线性写入进行了大量优化。所有Kafka在进行消息持久化操作时，写日志文件采用的就是磁盘的线性写入方式，从而解决了传统磁盘上写操慢的问题。</p><p>每个分区在存储层面就是一个append-only的日志文件，属于一个分区的消息会被追加到日志文件的尾部，每条消息在日志文件中的位置称为偏移量。</p><figure><img src="http://47.101.155.205/image-20250309104738723.png" alt="image-20250309104738723" tabindex="0" loading="lazy"><figcaption>image-20250309104738723</figcaption></figure><p>index文件存储元数据，即索引文件。</p><p>log文件存储消息，即数据文件。</p><p>可以使用Kafka自带工具kafka.tools.DumpLogSegments查看log日志文件中的数据信息。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">./bin/kafka-run-class.sh kafka.tools.DumpLogSegments <span class="token parameter variable">--help</span></span>
<span class="line"></span>
<span class="line">./bin/kafka-run-class.sh kafka.tools.DumpLogSegments <span class="token parameter variable">--files</span> kafka_log_broker0/org.test1-0/00000000000000000000.log -- print-data-log</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250309105457072.png" alt="image-20250309105457072" tabindex="0" loading="lazy"><figcaption>image-20250309105457072</figcaption></figure><h4 id="log-官网" tabindex="-1"><a class="header-anchor" href="#log-官网"><span>Log（官网）</span></a></h4><p>具有两个分区的名为”my-topic“的主题的日志由两个目录（即my-topic-0和my-topic-1）组成，其中填充了包含该主题消息的数据文件。日志文件的格式是一系列“日志条目”；每个日志条目是一个4字节的整数N，存储消息长度，后面跟着N个消息字节。每条消息都由一个64位整数偏移量唯一标识，该偏移量给出了该消息在所有发送到该分区上的该主题的消息流中的起始字节位置。每个消息的磁盘格式如下所示。每个日志文件都使用其包含的第一条消息的偏移量来命名。因此，创建的第一个文件将是0000000000000000000.log，每个附加文件将具有一个整数名称，大约是前一个文件的S字节，其中S是配置中给出的最大日志文件大小。</p><p>记录的确切二进制格式作为标准接口进行版本控制和维护，因此可以在生产者、代理和客户端之间传输记录批次，而无需在需要时重新复制或转换。</p><p>使用 message offset 作为消息 ID 是不常见的。我们最初的想法是使用生产者生成的 GUID，并在每个代理上维护从 GUID 到 offset 的映射。但是，由于使用者必须维护每个服务器的 ID，因此 GUID 的全局唯一性没有提供任何值。此外，维护从随机 ID 到偏移量的 Map 的复杂性需要一个重量级的索引结构，该结构必须与磁盘同步，本质上需要一个完整的持久随机访问数据结构。因此，为了简化查找结构，我们决定使用一个简单的每个分区原子计数器，它可以与分区 ID 和节点 ID 耦合来唯一标识消息;这使得查找结构更简单，尽管每个使用者请求仍可能有多个 looked。然而，一旦我们确定了一个计数器，直接使用偏移量似乎是很自然的——毕竟两者都是分区独有的单调递增整数。由于偏移量对使用者 API 是隐藏的，因此此决定最终是一个实现细节，我们采用了更高效的方法。</p><figure><img src="http://47.101.155.205/image-20250309104649434.png" alt="image-20250309104649434" tabindex="0" loading="lazy"><figcaption>image-20250309104649434</figcaption></figure><p><strong>写：</strong></p><p>日志允许串行附加，这些附加总是转到最后一个文件。当此文件达到可配置的大小（例如 1GB）时，该文件将滚动到新文件。日志采用两个配置参数：<strong>M</strong>，它提供在强制 OS 将文件刷新到磁盘之前要写入的消息数，以及 <strong>S</strong>，它提供强制刷新的秒数。这提供了持久性保证，在系统崩溃时最多丢失 M 条消息或 S 秒的数据。</p><p><strong>读：</strong></p><p>通过给出消息的 64 位逻辑偏移量和 S 字节最大块大小来完成读取。这将返回 S 字节缓冲区中包含的消息的迭代器。S 旨在大于任何单个消息，但在消息异常大的情况下，可以重试多次读取，每次将缓冲区大小增加一倍，直到成功读取消息。可以指定最大消息和缓冲区大小，以使服务器拒绝大于某个大小的消息，并给客户端一个 Client 端一个最大读取量的绑定，以获得完整的消息。读取缓冲区很可能以部分消息结尾，这很容易通过大小定界来检测。</p><p>从 offset 读取的实际过程需要首先找到存储数据的 log segment 文件，根据全局 offset 值计算特定于文件的 offset，然后从该文件 offset 中读取。搜索是针对为每个文件维护的内存中范围的简单二进制搜索变体完成的。</p><p>该日志提供了获取最近写入的消息的功能，以允许客户端从“现在”开始订阅。当使用者未能在 SLA 指定的天数内使用其数据时，这也很有用。在这种情况下，当客户端尝试使用不存在的偏移量时，它会得到一个 OutOfRangeException，并且可能会根据用例重置自身或失败。</p><p><strong>删除：</strong></p><p>一次删除一个日志段的数据。日志管理器应用两个量度来识别符合删除条件的区段：time 和 size。对于基于时间的策略，会考虑记录时间戳，其中区段文件中的最大时间戳（记录顺序无关紧要）定义整个区段的保留时间。默认情况下，基于大小的保留处于禁用状态。启用后，日志管理器会不断删除最旧的 segment 文件，直到分区的总大小再次处于配置的限制范围内。如果同时启用两个策略，则将删除由于任一策略而符合删除条件的区段。为了避免锁定读取，同时仍然允许修改段列表的删除，我们使用写时复制样式的段列表实现，该实现提供一致的视图，以允许在删除过程中在日志段的不可变静态快照视图上继续进行二进制搜索。</p><p><strong>可靠性：</strong></p><p>日志提供了一个配置参数 <em>M</em>，该参数控制在强制刷新到磁盘之前写入的最大消息数。启动时，将运行一个日志恢复进程，该进程将迭代最新日志分段中的所有消息，并验证每个消息条目是否有效。如果消息的大小和偏移量之和小于文件的长度，并且消息负载的 CRC32 与消息中存储的 CRC 匹配，则消息条目有效。如果检测到损坏，日志将被截断为最后一个有效偏移量。</p><p>请注意，必须处理两种损坏：由于崩溃而丢失未写入块的截断，以及将无意义的块添加到文件中的损坏。这样做的原因是，一般来说，作系统不保证文件 inode 和实际块数据之间的写入顺序，因此，如果 inode 更新为新大小，则除了丢失写入数据外，文件还可能获得无意义的数据，但在写入包含该数据的块之前发生崩溃。CRC 检测到这种极端情况，并防止它损坏日志（尽管未写的消息当然会丢失）。</p><h3 id="_3-消息的传输保障" tabindex="-1"><a class="header-anchor" href="#_3-消息的传输保障"><span>3.消息的传输保障</span></a></h3><p><strong>生产者ack机制：</strong></p><p>生产者向Broker的分区Leader副本发送数据时，可以通过acks参数设置生产者数据可靠性的级别：</p><ul><li>1：生产者在Broker分区的Leader副本成功接收，就发送下一条消息。</li><li>0：生产者不用等待来自服务端Broker的确认，继续发送下一条消息。</li><li>all：默认，意味着生产者发送完数据后，需要等待Broker端Topic分区的所有Follower副本都完成与Leader副本的数据同步后，消息才算发送完成。</li></ul><p><strong>消费者高水位线机制：</strong></p><p>LEO（Log End Offset），表示Topic分区中每个副本日志中最后一条消息的位置。</p><p>高水位线（high watermark）等于Topic分区中每个副本对应最小的LEO值。</p><h3 id="_2-3、消息传递模式" tabindex="-1"><a class="header-anchor" href="#_2-3、消息传递模式"><span>2.3、消息传递模式</span></a></h3><ul><li>点对点模式</li><li>发布/订阅模式</li><li>...</li></ul><h3 id="_2-4、kafka配置" tabindex="-1"><a class="header-anchor" href="#_2-4、kafka配置"><span>2.4、Kafka配置</span></a></h3><h4 id="_2-4-1、broker配置" tabindex="-1"><a class="header-anchor" href="#_2-4-1、broker配置"><span>2.4.1、Broker配置</span></a></h4><p>Broker监听地址，支持的协议：</p><ul><li>PLAINTEXT：明文。</li><li>SSL：使用 SSL/TLS 加密传输。</li><li>SASL_PLAINTEXT：用 SASL 认证，但传输不加密。</li><li>SASL_SSL：使用 SASL 认证，并且传输加密。</li></ul><p>公网配置：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 配置 47为公网ip</span></span>
<span class="line"><span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://0.0.0.0:9092 或 PLAINTEXT://root:9092</span></span>
<span class="line"><span class="token key attr-name">advertised.listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://47.101.155.205:9092</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 在安全组禁止的情况下，都提示连接超时。安全组关闭都能访问。</span></span>
<span class="line"><span class="token key attr-name">./bin/kafka-topics.sh</span> <span class="token value attr-value"> --list --bootstrap-server 172.24.117.21:9092</span></span>
<span class="line"><span class="token key attr-name">./bin/kafka-topics.sh</span> <span class="token value attr-value"> --list --bootstrap-server 47.101.155.205:9092</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">./bin/kafka-topics.sh</span> <span class="token value attr-value"> --list --bootstrap-server root:9092</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内外网分离配置：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">INTERNAL://0.0.0.0:19092,EXTERNAL://0.0.0.0:9092</span></span>
<span class="line"><span class="token key attr-name">listener.security.protocol.map</span><span class="token punctuation">=</span><span class="token value attr-value">INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT</span></span>
<span class="line"><span class="token key attr-name">advertised.listeners</span><span class="token punctuation">=</span><span class="token value attr-value">INTERNAL://172.24.117.21:19092,EXTERNAL://47.101.155.205:9092</span></span>
<span class="line"><span class="token key attr-name">inter.broker.listener.name</span><span class="token punctuation">=</span><span class="token value attr-value">INTERNAL</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 安全组网络禁用情况,可连接内网(ip或主机名)</span></span>
<span class="line"><span class="token key attr-name">./bin/kafka-topics.sh</span> <span class="token value attr-value"> --list --bootstrap-server 172.24.117.21:19092</span></span>
<span class="line"><span class="token key attr-name">./bin/kafka-topics.sh</span> <span class="token value attr-value"> --list --bootstrap-server root:19092</span></span>
<span class="line"><span class="token comment"># 安全组网络禁用情况,外网不通</span></span>
<span class="line"><span class="token key attr-name">./bin/kafka-topics.sh</span> <span class="token value attr-value"> --list --bootstrap-server 47.101.155.205:9092</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">auto.create.topics.enable</span><span class="token punctuation">=</span><span class="token value attr-value">true # 默认true，在服务端启用自动创建topic</span></span>
<span class="line"><span class="token key attr-name">auto.leader.rebalance.enable</span><span class="token punctuation">=</span><span class="token value attr-value">true # 默认true，自动leader平衡</span></span>
<span class="line"><span class="token key attr-name">background.threads</span><span class="token punctuation">=</span><span class="token value attr-value">10 # 默认10，后台处理各种任务的线程数</span></span>
<span class="line"><span class="token comment"># 默认-1，int类型，如果未设置，生成的id从reserved.broker.max.id+1</span></span>
<span class="line"><span class="token comment"># 表示broker的id号，kafka集群中，不同的broker应该具有不同的id号，不能重复</span></span>
<span class="line"><span class="token key attr-name">broker.id</span><span class="token punctuation">=</span><span class="token value attr-value">-1 </span></span>
<span class="line"><span class="token key attr-name">compression.type</span><span class="token punctuation">=</span><span class="token value attr-value">producer # 指定topic的压缩类型，gzip snappy lz4 zstd uncompressed,producer指保留生产者原始编码，是保留生产者发送消息至topic的压缩方式</span></span>
<span class="line"><span class="token key attr-name">controller.quorum.election.backoff.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">1000 # 默认1000,开始新选举前的最大时间</span></span>
<span class="line"><span class="token key attr-name">controller.quorum.election.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">1000 # 默认1000,在触发新的选举之前,等待无法从leader获取的最大时间</span></span>
<span class="line"><span class="token key attr-name">controller.quorum.fetch.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">2000 # 默认2000</span></span>
<span class="line"><span class="token key attr-name">controller.quorum.voters</span><span class="token punctuation">=</span><span class="token value attr-value">1@localhost:9092,2@localhost:9093,3@localhost:9094 # </span></span>
<span class="line"><span class="token key attr-name">delete.topic.enable</span><span class="token punctuation">=</span><span class="token value attr-value">true # 默认true,如果这个关闭,通过管理删除topic没有作用</span></span>
<span class="line"><span class="token key attr-name">early.start.listeners</span><span class="token punctuation">=</span><span class="token value attr-value">String # null</span></span>
<span class="line"><span class="token key attr-name">leader.imbalance.check.interval.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">300 # default 控制器触发分区平衡的频率</span></span>
<span class="line"><span class="token key attr-name">leader.imbalance.per.broker.percentage</span><span class="token punctuation">=</span><span class="token value attr-value">10 # default 不平衡的比例阈值</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 本地监听的地址</span></span>
<span class="line"><span class="token comment"># 合法地址 PLAINTEXT://myhost:9092,SSL://:9091</span></span>
<span class="line"><span class="token comment"># CLIENT://0.0.0.0:9092,REPLICATION://localhost:9093</span></span>
<span class="line"><span class="token comment"># PLAINTEXT://127.0.0.1:9092,SSL://[::1]:9092</span></span>
<span class="line"><span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://9092 </span></span>
<span class="line"><span class="token comment"># PLAINTEXT://0.0.0.0:9092,需要修改上面的属性值暴露ip,不然服务无法起来</span></span>
<span class="line"><span class="token comment"># listeners=PLAINTEXT://myhost:9092,myhost必须是系统主机名才能启动</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 指定Kafka代理将向客户端和其他代理发布的侦听器地址。</span></span>
<span class="line"><span class="token comment"># 默认null.如果与监听器配置属性不同,监听器发布到ZooKeeper供客户端连接使用.如果没有配置,会使用listeners的值.</span></span>
<span class="line"><span class="token comment"># 如果listenrs配置成包含0.0.0.0,并且这个配置没有配置,这里会导致kafka-server启动失败,这个配置对与这个属性是无效的.</span></span>
<span class="line"><span class="token key attr-name">advertised.listeners</span><span class="token punctuation">=</span><span class="token value attr-value">String </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 保留kafka日志数据的目录地址</span></span>
<span class="line"><span class="token key attr-name">log.dir</span><span class="token punctuation">=</span><span class="token value attr-value">/tmp/kafka-logs </span></span>
<span class="line"><span class="token key attr-name">log.dirs</span><span class="token punctuation">=</span><span class="token value attr-value">String # null,存储日志的列表</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">log.flush.interval.messages</span><span class="token punctuation">=</span><span class="token value attr-value">9223372036854775807 # default 在将消息刷新到磁盘之前，日志分区上累计的消息数</span></span>
<span class="line"><span class="token key attr-name">log.flush.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">null # long,在任何topic中的消息刷新到磁盘之前，保存在内存中的最长时间，没有设置则使用log.flush.scheduler.interval.ms的值</span></span>
<span class="line"><span class="token key attr-name">log.flush.offset.checkpoint.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">60000 # 我们更新作为日志恢复点的最后一次刷新的持久记录的频率</span></span>
<span class="line"><span class="token key attr-name">log.flush.scheduler.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">9223372036854775807 # 日志刷新程序检查是否需要将日志刷新到磁盘的频率</span></span>
<span class="line"><span class="token key attr-name">log.flush.start.offset.checkpoint.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">60000 # 更新日志开始偏移量的持久记录的频率</span></span>
<span class="line"><span class="token comment"># 日志保留相关</span></span>
<span class="line"><span class="token key attr-name">log.retention.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">-1 # 日志删除前的最大容量</span></span>
<span class="line"><span class="token key attr-name">log.retention.hours</span><span class="token punctuation">=</span><span class="token value attr-value">168 # 删除日志文件之前保留它的小时数,优先级:3</span></span>
<span class="line"><span class="token key attr-name">log.retention.minutes</span><span class="token punctuation">=</span><span class="token value attr-value">null # int 优先级:2</span></span>
<span class="line"><span class="token key attr-name">log.retention.ms</span><span class="token punctuation">=</span><span class="token value attr-value">null # int 优先级:1,-1表示没有时间限制</span></span>
<span class="line"><span class="token key attr-name">log.roll.hours</span><span class="token punctuation">=</span><span class="token value attr-value">168 # default 日志压缩(新日志出来之前的时间)</span></span>
<span class="line"><span class="token key attr-name">log.roll.ms</span><span class="token punctuation">=</span><span class="token value attr-value">null # </span></span>
<span class="line"><span class="token key attr-name">log.roll.jitter.hours</span><span class="token punctuation">=</span><span class="token value attr-value">0 #</span></span>
<span class="line"><span class="token key attr-name">log.roll.jitter.ms</span><span class="token punctuation">=</span><span class="token value attr-value">null #</span></span>
<span class="line"><span class="token key attr-name">log.segment.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1073741824 # 1GB 单个最大的日志文件大小</span></span>
<span class="line"><span class="token key attr-name">log.segment.delete.delay.ms</span><span class="token punctuation">=</span><span class="token value attr-value">60000 # 从文件系统中删除文件之前等待的时间</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Kafka允许的最大记录批大小(如果启用压缩，则在压缩后)</span></span>
<span class="line"><span class="token key attr-name">message.max.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1048588 </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">metadata.log.dir</span><span class="token punctuation">=</span><span class="token value attr-value">null # Kraft模式下的元数据日志，没有则在log.dirs的第一个目录中</span></span>
<span class="line"><span class="token key attr-name">metadata.log.max.record.bytes.between.snapshots</span><span class="token punctuation">=</span><span class="token value attr-value">20971520 # 大小控制快照生成</span></span>
<span class="line"><span class="token key attr-name">metadata.log.max.snapshot.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">3600000 #时间控制快照生成</span></span>
<span class="line"><span class="token key attr-name">metadata.log.segment.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1073741824 #1GB</span></span>
<span class="line"><span class="token key attr-name">metadata.log.segment.ms</span><span class="token punctuation">=</span><span class="token value attr-value">604800000  # 7天 滚出新的元数据日志文件之前的最长时间</span></span>
<span class="line"><span class="token key attr-name">metadata.max.retention.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">104857600 # 在删除旧快照和日志文件之前，元数据日志和快照的最大组合大小</span></span>
<span class="line"><span class="token key attr-name">metadata.max.retention.ms</span><span class="token punctuation">=</span><span class="token value attr-value">604800000 # 元数据日志文件或快照在删除之前保留的毫秒数</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">min.insync.replicas</span><span class="token punctuation">=</span><span class="token value attr-value">1 #</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">node.id</span><span class="token punctuation">=</span><span class="token value attr-value">-1 # Kraft需要</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">num.io.threads</span><span class="token punctuation">=</span><span class="token value attr-value">8 # 服务器用于处理请求的线程数，其中可能包括磁盘I/O</span></span>
<span class="line"><span class="token key attr-name">num.network.threads</span><span class="token punctuation">=</span><span class="token value attr-value">3 # 服务器用于从网络接收请求并向网络发送响应的线程数。注意:每个侦听器(控制器侦听器除外)都创建自己的线程池</span></span>
<span class="line"><span class="token key attr-name">num.recovery.threads.per.data.dir</span><span class="token punctuation">=</span><span class="token value attr-value">1 # 启动时用于日志恢复和关闭时用于刷新的每个数据目录的线程数</span></span>
<span class="line"><span class="token key attr-name">num.replica.alter.log.dirs.threads</span><span class="token punctuation">=</span><span class="token value attr-value">null # 可以在日志目录之间移动副本的线程数，其中可能包括磁盘I/O</span></span>
<span class="line"><span class="token key attr-name">num.replica.fetchers</span><span class="token punctuation">=</span><span class="token value attr-value">1</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">offset.metadata.max.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">4096 # 与偏移量提交相关联的元数据条目的最大大小</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">offsets.commit.required.acks</span><span class="token punctuation">=</span><span class="token value attr-value">-1 # 提交之前需要的ack可以被接受。一般来说，默认值(-1)不应该被重写</span></span>
<span class="line"><span class="token key attr-name">offsets.commit.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">5000 # 偏移量提交将被延迟,直到偏移量主题的所有副本收到提交或达到此超时.这类似于生产者请求超时</span></span>
<span class="line"><span class="token key attr-name">offsets.load.buffer.size</span><span class="token punctuation">=</span><span class="token value attr-value">5242880 # 当将偏移量加载到缓存中时,从偏移量段读取的批处理大小(软限制，如果记录太大则覆盖).</span></span>
<span class="line"><span class="token key attr-name">offsets.retention.check.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">600000 # 检查陈旧偏移量的频率</span></span>
<span class="line"><span class="token key attr-name">offsets.retention.minutes</span><span class="token punctuation">=</span><span class="token value attr-value">10080 #</span></span>
<span class="line"><span class="token key attr-name">offsets.topic.compression.codec</span><span class="token punctuation">=</span><span class="token value attr-value">0 # </span></span>
<span class="line"><span class="token key attr-name">offsets.topic.num.partitions</span><span class="token punctuation">=</span><span class="token value attr-value">50 # 偏移提交主题的分区数(部署后不应更改)</span></span>
<span class="line"><span class="token key attr-name">offsets.topic.replication.factor</span><span class="token punctuation">=</span><span class="token value attr-value">3 # 偏移主题的复制因子(设置更高以确保可用性).在集群大小满足此复制因子要求之前,内部主题创建将失败</span></span>
<span class="line"><span class="token key attr-name">offsets.topic.segment.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">104857600 # 100MB 偏移量主题段字节应该保持相对较小,以促进更快的日志压缩和缓存负载</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">process.roles</span><span class="token punctuation">=</span> <span class="token value attr-value"># list [broker, controller],Kraft集群需要</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">queued.max.requests</span><span class="token punctuation">=</span><span class="token value attr-value">500 # 在阻塞网络线程之前，数据平面允许的排队请求数</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">replica.fetch.min.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1 # 每个获取响应所需的最小字节数.如果没有足够的字节,则等待到replica.fetch.wait.max.ms</span></span>
<span class="line"><span class="token key attr-name">replica.fetch.wait.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">500 # &lt;replica.lag.time.max.ms 后续副本发出的每个获取请求的最大等待时间</span></span>
<span class="line"><span class="token key attr-name">replica.high.watermark.checkpoint.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">500 # 高水位数据保存到磁盘的频率</span></span>
<span class="line"><span class="token key attr-name">replica.lag.time.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">30000 # 如果一个follower没有发送任何fetch请求，或者至少在这段时间内没有消耗到leader的日志结束偏移量,那么leader将从ISR中删除该follower</span></span>
<span class="line"><span class="token key attr-name">replica.socket.receive.buffer.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">65536 # 64Kb </span></span>
<span class="line"><span class="token key attr-name">replica.socket.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">30000 # 网络请求的套接字超时,它的值至少应该是replica.fetch.wait.max.ms</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">request.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">30000 # 配置控制客户端等待请求响应的最大时间,客户端可能会再次发起请求和最大重试次数相关</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">sasl.mechanism.controller.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">GSSAPI # SASL机制用于与控制器通信</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">socket.receive.buffer.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">102400 # 100Kb 套接字服务器套接字的SO_RCVBUF缓冲区.如果取值为-1,则使用操作系统默认值.</span></span>
<span class="line"><span class="token comment"># 100Mb 套接字请求中的最大字节数，要大于message.max.bytes，创建的topic可以覆盖此配置</span></span>
<span class="line"><span class="token key attr-name">socket.request.max.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">104857600 </span></span>
<span class="line"><span class="token key attr-name">socket.send.buffer.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">=102400 # 100Kb 套接字服务器套接字的SO_SNDBUF缓冲区.如果取值为-1,则使用操作系统默认值.</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">transaction.max.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">900000 #15m 事务允许的最大超时.如果客户端请求的事务时间超过此时间，则代理将在InitProducerIdRequest中返回错误.客户端超时时间过大，会使消费者从事物主题中读取数据陷入停顿.</span></span>
<span class="line"><span class="token key attr-name">transaction.state.log.load.buffer.size</span><span class="token punctuation">=</span><span class="token value attr-value">5242880 # 当将生产者id和事务加载到缓存中时，从事务日志段读取的批处理大小</span></span>
<span class="line"><span class="token key attr-name">transaction.state.log.min.isr</span><span class="token punctuation">=</span><span class="token value attr-value">2 # 覆盖事务主题的min.sync.replicas配置</span></span>
<span class="line"><span class="token key attr-name">transaction.state.log.num.partitions</span><span class="token punctuation">=</span><span class="token value attr-value">50 # 事务主题的分区数(部署之后不因该改变)</span></span>
<span class="line"><span class="token key attr-name">transaction.state.log.replication.factor</span><span class="token punctuation">=</span><span class="token value attr-value">3 # 事务主题的复制因子</span></span>
<span class="line"><span class="token key attr-name">transaction.state.log.segment.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">104857600 # 100Mb 事务主题段字节应该保持相对较小,以促进更快的日志压缩和缓存负载</span></span>
<span class="line"><span class="token key attr-name">transactional.id.expiration.ms</span><span class="token punctuation">=</span><span class="token value attr-value">604800000 #7d 在事务id过期之前，事务协调器在不接收当前事务的任何事务状态更新的情况下等待的时间(毫秒)。事务id在事务仍在进行时不会过期。</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">unclean.leader.election.enable</span><span class="token punctuation">=</span><span class="token value attr-value">false # 指示是否使不在ISR集中的副本作为最后手段被选举为leader，即使这样做可能导致数据丢失</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 表示连接zookeeper集群的地址</span></span>
<span class="line"><span class="token key attr-name">zookeeper.connect</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">zookeeper.connection.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">null # int 客户端等待与zookeeper建立连接的最长时间.如果没有设置,则使用zookeeper.session.timeout.ms中的值</span></span>
<span class="line"><span class="token key attr-name">zookeeper.session.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">18000 # Zookeeper会话超时</span></span>
<span class="line"><span class="token key attr-name">zookeeper.max.in.flight.requests</span><span class="token punctuation">=</span><span class="token value attr-value">10 # 在阻塞之前,客户端将发送给Zookeeper的未确认请求的最大数量</span></span>
<span class="line"><span class="token key attr-name">zookeeper.metadata.migration.enable</span><span class="token punctuation">=</span><span class="token value attr-value">false # 启用ZK向KRaft迁移</span></span>
<span class="line"><span class="token key attr-name">zookeeper.set.acl</span><span class="token punctuation">=</span><span class="token value attr-value">false # 设置客户端使用安全ACLs</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">broker.heartbeat.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">2000 # 代理心跳之间的时间长度.在KRaft模式下运行时使用.</span></span>
<span class="line"><span class="token key attr-name">broker.id.generation.enable</span><span class="token punctuation">=</span><span class="token value attr-value">true # 在服务器上启用自动生成代理id.启用后，应该检查为reserved.broker.max.id配置的值.</span></span>
<span class="line"><span class="token key attr-name">reserved.broker.max.id</span><span class="token punctuation">=</span><span class="token value attr-value">1000 # 可用于broker.id的最大号码</span></span>
<span class="line"><span class="token key attr-name">broker.rack</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">broker.session.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">9000 # KRaft </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">connections.max.idle.ms</span><span class="token punctuation">=</span><span class="token value attr-value">600000 # 空闲连接超时:服务器套接字处理器线程关闭空闲超过此时间的连接</span></span>
<span class="line"><span class="token key attr-name">connections.max.reauth.ms</span><span class="token punctuation">=</span><span class="token value attr-value">0 # </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">controlled.shutdown.enable</span><span class="token punctuation">=</span><span class="token value attr-value">true # 启用服务器的受控关闭</span></span>
<span class="line"><span class="token key attr-name">controlled.shutdown.max.retries</span><span class="token punctuation">=</span><span class="token value attr-value">3 # 受控关闭重试次数</span></span>
<span class="line"><span class="token key attr-name">controlled.shutdown.retry.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">5000 # 重试等待时间</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">controller.quorum.append.linger.ms</span><span class="token punctuation">=</span><span class="token value attr-value">25 # 在将写数据刷新到磁盘之前,leader等待写数据累积的持续时间</span></span>
<span class="line"><span class="token key attr-name">controller.quorum.request.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">2000 # 配置控制客户端等待请求响应的最大时间</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">controller.socket.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">30000 # 控制器到代理通道的套接字超时</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">default.replication.factor</span><span class="token punctuation">=</span><span class="token value attr-value">1 # 自动创建主题的默认复制因子</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">delegation.token.expiry.time.ms</span><span class="token punctuation">=</span><span class="token value attr-value">86400000 # 令牌在需要更新之前的有效时间</span></span>
<span class="line"><span class="token key attr-name">delegation.token.master.key</span><span class="token punctuation">=</span><span class="token value attr-value">null # password 弃用 使用delegation.token.secret.key</span></span>
<span class="line"><span class="token key attr-name">delegation.token.secret.key</span><span class="token punctuation">=</span><span class="token value attr-value">null # password 生成和验证委托令牌的密钥,密钥未设置或设置为空字符串,delegation token禁用</span></span>
<span class="line"><span class="token key attr-name">delegation.token.max.lifetime.ms</span><span class="token punctuation">=</span><span class="token value attr-value">604800000 # 7d 令牌有一个最大生存期，超过这个生存期就不能更新了</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">delete.records.purgatory.purge.interval.requests</span><span class="token punctuation">=</span><span class="token value attr-value">1 # 删除记录请求炼狱的清除间隔</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">fetch.max.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">57671680 # 55MB 我们将为获取请求返回的最大字节数.必须至少为1024.</span></span>
<span class="line"><span class="token key attr-name">fetch.purgatory.purge.interval.requests</span><span class="token punctuation">=</span><span class="token value attr-value">1 #获取请求炼狱的清除间隔(以请求数为单位)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 和消费者加入消费组有关</span></span>
<span class="line"><span class="token key attr-name">group.initial.rebalance.delay.ms</span><span class="token punctuation">=</span><span class="token value attr-value">3000 # ms在执行第一次再平衡之前,组协调器等待更多使用者加入新组所需的时间 </span></span>
<span class="line"><span class="token key attr-name">group.max.session.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">1800000 # 注册消费者允许的最大会话超时</span></span>
<span class="line"><span class="token key attr-name">group.max.size</span><span class="token punctuation">=</span><span class="token value attr-value">2147483647 # 单个消费者组可以容纳的最大消费者数量</span></span>
<span class="line"><span class="token key attr-name">group.min.session.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">6000 # 注册消费者允许的最小会话超时</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">initial.broker.registration.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">60000 # 最初向控制器仲裁注册时,在声明失败和退出代理进程之前等待的毫秒数</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">inter.broker.listener.name</span><span class="token punctuation">=</span><span class="token value attr-value">null #string 用于代理之间通信的侦听器名称</span></span>
<span class="line"><span class="token key attr-name">inter.broker.protocol.version</span><span class="token punctuation">=</span><span class="token value attr-value">3.5-IV2</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">log.cleaner.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">15000 # 当没有日志需要清理时的睡眠时间</span></span>
<span class="line"><span class="token key attr-name">log.cleaner.dedupe.buffer.size</span><span class="token punctuation">=</span><span class="token value attr-value">134217728 # 跨所有清理器线程用于日志重复删除的总内存</span></span>
<span class="line"><span class="token key attr-name">log.cleaner.delete.retention.ms</span><span class="token punctuation">=</span><span class="token value attr-value">86400000 # 为日志压缩主题保留删除墓碑标记的时间</span></span>
<span class="line"><span class="token key attr-name">log.cleaner.enable</span><span class="token punctuation">=</span><span class="token value attr-value">true # 启用日志清理器进程在服务器上运行</span></span>
<span class="line"><span class="token key attr-name">log.cleaner.io.buffer.load.factor</span><span class="token punctuation">=</span><span class="token value attr-value">0.9 # 日志清理器删除缓冲区负载因子</span></span>
<span class="line"><span class="token key attr-name">log.cleaner.io.buffer.size</span><span class="token punctuation">=</span><span class="token value attr-value">524288 # 所有清理器线程中用于日志清理器I/O缓冲区的总内存</span></span>
<span class="line"><span class="token key attr-name">log.cleaner.io.max.bytes.per.second</span><span class="token punctuation">=</span><span class="token value attr-value">1.7976931348623157E308 #将对日志清理器进行节流,使其读i/o和写i/o的总和平均小于此值</span></span>
<span class="line"><span class="token key attr-name">log.cleaner.max.compaction.lag.ms</span><span class="token punctuation">=</span><span class="token value attr-value">9223372036854775807 # 消息在日志中不适合进行压缩的最长时间</span></span>
<span class="line"><span class="token key attr-name">log.cleaner.min.cleanable.ratio</span><span class="token punctuation">=</span><span class="token value attr-value">0.5 # 符合清洗条件的日志的脏日志与总日志的最小比率</span></span>
<span class="line"><span class="token comment"># 消息在日志中保持未压缩状态的最短时间</span></span>
<span class="line"><span class="token key attr-name">log.cleaner.min.compaction.lag.ms</span><span class="token punctuation">=</span><span class="token value attr-value">0</span></span>
<span class="line"><span class="token key attr-name">log.cleaner.threads</span><span class="token punctuation">=</span><span class="token value attr-value">1 # 用于日志清理的后台线程数</span></span>
<span class="line"><span class="token key attr-name">log.cleanup.policy</span><span class="token punctuation">=</span><span class="token value attr-value">delete # 保留窗口以外的段的默认清理策略</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">log.index.interval.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">4096 # 4Kb 向偏移索引添加一个表项的时间间隔</span></span>
<span class="line"><span class="token key attr-name">log.index.size.max.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">10485760 # 10Mb 偏移索引的最大字节数</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">log.message.format.version</span><span class="token punctuation">=</span><span class="token value attr-value">3.0-IV1</span></span>
<span class="line"><span class="token key attr-name">log.message.timestamp.difference.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">9223372036854775807 #代理接收消息时允许的时间戳与消息中指定的时间戳的最大差异</span></span>
<span class="line"><span class="token key attr-name">log.message.timestamp.type</span><span class="token punctuation">=</span><span class="token value attr-value">CreateTime # [CreateTime, LogAppendTime]</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">log.preallocate</span><span class="token punctuation">=</span><span class="token value attr-value">false # 创建新段时是否需要预先分配文件,windows需要设置为true</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">log.retention.check.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">300000 # 日志清除程序检查是否有日志符合删除条件的频率</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">max.connection.creation.rate</span><span class="token punctuation">=</span><span class="token value attr-value">2147483647 # 在任何时候，我们在代理中允许的最大连接创建速率</span></span>
<span class="line"><span class="token key attr-name">max.connections</span><span class="token punctuation">=</span><span class="token value attr-value">2147483647 # 任何时候代理中允许的最大连接数</span></span>
<span class="line"><span class="token key attr-name">max.connections.per.ip</span><span class="token punctuation">=</span><span class="token value attr-value">2147483647 # 我们允许每个ip地址的最大连接数</span></span>
<span class="line"><span class="token key attr-name">max.connections.per.ip.overrides</span><span class="token punctuation">=</span><span class="token value attr-value">null # string 每个ip或主机名的逗号分隔列表覆盖到默认的最大连接数 hostName:100,</span></span>
<span class="line"><span class="token key attr-name">max.incremental.fetch.session.cache.slots</span><span class="token punctuation">=</span><span class="token value attr-value">1000 # 我们将维护的增量获取会话的最大数量</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 每个主题的默认日志分区数</span></span>
<span class="line"><span class="token key attr-name">num.partitions</span><span class="token punctuation">=</span><span class="token value attr-value">1 </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">password.encoder.old.secret</span><span class="token punctuation">=</span><span class="token value attr-value">null # password 用于编码动态配置的密码的旧密钥</span></span>
<span class="line"><span class="token key attr-name">password.encoder.secret</span><span class="token punctuation">=</span><span class="token value attr-value">null # password 用于为此代理对动态配置的密码进行编码的密钥</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">principal.builder.class</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuild</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">producer.purgatory.purge.interval.requests</span><span class="token punctuation">=</span><span class="token value attr-value">1000 # 生产者请求炼狱的清除间隔</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">queued.max.request.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">-1 # 在不再读取请求之前允许的队列字节数</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">replica.fetch.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">1000 # 读取分区错误发生时的睡眠时间</span></span>
<span class="line"><span class="token key attr-name">replica.fetch.max.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1048576 # 1Mb 试图为每个分区获取的消息字节数</span></span>
<span class="line"><span class="token key attr-name">replica.fetch.response.max.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">10485760  # 10Mb 整个读取响应的最大字节数</span></span>
<span class="line"><span class="token key attr-name">replica.selector.class</span><span class="token punctuation">=</span><span class="token value attr-value">null # string 实现ReplicaSelector类的全路径名称</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">sasl.client.callback.handler.class</span><span class="token punctuation">=</span><span class="token value attr-value">null # class </span></span>
<span class="line"><span class="token key attr-name">sasl.enabled.mechanisms</span><span class="token punctuation">=</span><span class="token value attr-value">GSSAPI #list</span></span>
<span class="line"><span class="token key attr-name">sasl.jaas.config</span><span class="token punctuation">=</span><span class="token value attr-value">null #password</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.kinit.cmd</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/bin/kinit</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.min.time.before.relogin</span><span class="token punctuation">=</span><span class="token value attr-value">60000</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.principal.to.local.rules</span><span class="token punctuation">=</span><span class="token value attr-value">DEFAULT # list</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.service.name</span><span class="token punctuation">=</span><span class="token value attr-value">null #string</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.ticket.renew.jitter</span><span class="token punctuation">=</span><span class="token value attr-value">0.05</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.ticket.renew.window.factor</span><span class="token punctuation">=</span><span class="token value attr-value">0.8</span></span>
<span class="line"><span class="token key attr-name">sasl.login.callback.handler.class</span><span class="token punctuation">=</span><span class="token value attr-value">null #class</span></span>
<span class="line"><span class="token key attr-name">sasl.login.class</span><span class="token punctuation">=</span><span class="token value attr-value">null #class</span></span>
<span class="line"><span class="token key attr-name">sasl.login.refresh.buffer.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">300</span></span>
<span class="line"><span class="token key attr-name">sasl.login.refresh.min.period.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">60</span></span>
<span class="line"><span class="token key attr-name">sasl.login.refresh.window.factor</span><span class="token punctuation">=</span><span class="token value attr-value">0.8</span></span>
<span class="line"><span class="token key attr-name">sasl.login.refresh.window.jitter</span><span class="token punctuation">=</span><span class="token value attr-value">0.05</span></span>
<span class="line"><span class="token key attr-name">sasl.mechanism.inter.broker.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">GSSAPI</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.jwks.endpoint.url</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.token.endpoint.url</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">sasl.server.callback.handler.class</span><span class="token punctuation">=</span><span class="token value attr-value">null #class</span></span>
<span class="line"><span class="token key attr-name">sasl.server.max.receive.size</span><span class="token punctuation">=</span><span class="token value attr-value">524288</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">security.inter.broker.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT #用于在代理之间通信的安全协议 [PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL]</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">socket.connection.setup.timeout.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">30000 # 客户端等待套接字连接建立的最长时间</span></span>
<span class="line"><span class="token key attr-name">socket.connection.setup.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">10000 #10s</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">socket.listen.backlog.size</span><span class="token punctuation">=</span><span class="token value attr-value">50 # 套接字上挂起连接的最大数目</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">ssl.cipher.suites</span><span class="token punctuation">=</span> <span class="token value attr-value"># list</span></span>
<span class="line"><span class="token key attr-name">ssl.client.auth</span><span class="token punctuation">=</span><span class="token value attr-value">none # [required, requested, none]</span></span>
<span class="line"><span class="token key attr-name">ssl.enabled.protocols</span><span class="token punctuation">=</span><span class="token value attr-value">TLSv1.2</span></span>
<span class="line"><span class="token key attr-name">ssl.key.password</span><span class="token punctuation">=</span><span class="token value attr-value">null #password</span></span>
<span class="line"><span class="token key attr-name">ssl.keymanager.algorithm</span><span class="token punctuation">=</span><span class="token value attr-value">SunX509</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.certificate.chain</span><span class="token punctuation">=</span><span class="token value attr-value">null #password</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.key</span><span class="token punctuation">=</span><span class="token value attr-value">null #password</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.location</span><span class="token punctuation">=</span><span class="token value attr-value">null #string</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.password</span><span class="token punctuation">=</span><span class="token value attr-value">null #password</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.type</span><span class="token punctuation">=</span><span class="token value attr-value">JKS</span></span>
<span class="line"><span class="token key attr-name">ssl.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">TLSv1.2</span></span>
<span class="line"><span class="token key attr-name">ssl.provider</span><span class="token punctuation">=</span><span class="token value attr-value">null #string</span></span>
<span class="line"><span class="token key attr-name">ssl.trustmanager.algorithm</span><span class="token punctuation">=</span><span class="token value attr-value">PKIX</span></span>
<span class="line"><span class="token key attr-name">ssl.truststore.certificates</span><span class="token punctuation">=</span><span class="token value attr-value">null #password</span></span>
<span class="line"><span class="token key attr-name">ssl.truststore.location</span><span class="token punctuation">=</span><span class="token value attr-value">null #string</span></span>
<span class="line"><span class="token key attr-name">ssl.truststore.password</span><span class="token punctuation">=</span><span class="token value attr-value">null #password</span></span>
<span class="line"><span class="token key attr-name">ssl.truststore.type</span><span class="token punctuation">=</span><span class="token value attr-value">JKS</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">sasl.login.connect.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">null #int</span></span>
<span class="line"><span class="token key attr-name">sasl.login.read.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">null #int</span></span>
<span class="line"><span class="token key attr-name">sasl.login.retry.backoff.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">10000 </span></span>
<span class="line"><span class="token key attr-name">sasl.login.retry.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">100</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.clock.skew.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">30</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.expected.audience</span><span class="token punctuation">=</span><span class="token value attr-value">null #list</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.expected.issuer</span><span class="token punctuation">=</span><span class="token value attr-value">null #string</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.jwks.endpoint.refresh.ms</span><span class="token punctuation">=</span><span class="token value attr-value">3600000 </span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">10000 </span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.jwks.endpoint.retry.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">100</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.scope.claim.name</span><span class="token punctuation">=</span><span class="token value attr-value">scope</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.sub.claim.name</span><span class="token punctuation">=</span><span class="token value attr-value">sub</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">zookeeper.clientCnxnSocket</span><span class="token punctuation">=</span><span class="token value attr-value">null #string</span></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.client.enable</span><span class="token punctuation">=</span><span class="token value attr-value">false # </span></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.keystore.location</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.keystore.password</span><span class="token punctuation">=</span><span class="token value attr-value">null #password</span></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.keystore.type</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.truststore.location</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.truststore.password</span><span class="token punctuation">=</span><span class="token value attr-value">null #password</span></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.truststore.type</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">alter.config.policy.class.name</span><span class="token punctuation">=</span><span class="token value attr-value">null # class org.apache.kafka.server.policy.AlterConfigPolicy</span></span>
<span class="line"><span class="token key attr-name">alter.log.dirs.replication.quota.window.num</span><span class="token punctuation">=</span><span class="token value attr-value">11 # 为alter log dirs复制配额保留在内存中的样本数量</span></span>
<span class="line"><span class="token key attr-name">alter.log.dirs.replication.quota.window.size.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">1 # alter log dirs复制配额的每个样本的时间跨度</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">authorizer.class.name</span><span class="token punctuation">=</span> <span class="token value attr-value">#string 实现org.apache.kafka.server.authorizer.Authorize接口</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">auto.include.jmx.reporter</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">client.quota.callback.class</span><span class="token punctuation">=</span><span class="token value attr-value">null #class</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">connection.failed.authentication.delay.ms</span><span class="token punctuation">=</span><span class="token value attr-value">100</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">controller.quorum.retry.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">20</span></span>
<span class="line"><span class="token key attr-name">controller.quota.window.num</span><span class="token punctuation">=</span><span class="token value attr-value">11</span></span>
<span class="line"><span class="token key attr-name">controller.quota.window.size.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">1</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">create.topic.policy.class.name</span><span class="token punctuation">=</span><span class="token value attr-value">null # class 创建topic的策略类 org.apache.kafka.server.policy.CreateTopicPolicy</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">delegation.token.expiry.check.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">3600000 # 1h 删除过期委托令牌的扫描间隔</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">kafka.metrics.polling.interval.secs</span><span class="token punctuation">=</span><span class="token value attr-value">10 # 度量轮询间隔</span></span>
<span class="line"><span class="token key attr-name">kafka.metrics.reporters</span><span class="token punctuation">=</span> <span class="token value attr-value">#list</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">listener.security.protocol.map</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL #监听器名称和安全协议之间的映射</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">log.message.downconversion.enable</span><span class="token punctuation">=</span><span class="token value attr-value">true # 此配置控制是否启用消息格式的向下转换以满足消费者请求</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">metadata.max.idle.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">500 # 该配置控制活动控制器向元数据分区写入无操作记录的频率,0, no-op records 不追加</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">metric.reporters</span><span class="token punctuation">=</span> <span class="token value attr-value">#list </span></span>
<span class="line"><span class="token key attr-name">metrics.num.samples</span><span class="token punctuation">=</span><span class="token value attr-value">2 # </span></span>
<span class="line"><span class="token key attr-name">metrics.recording.level</span><span class="token punctuation">=</span><span class="token value attr-value">INFO</span></span>
<span class="line"><span class="token key attr-name">metrics.sample.window.ms</span><span class="token punctuation">=</span><span class="token value attr-value">30000 </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">password.encoder.cipher.algorithm</span><span class="token punctuation">=</span><span class="token value attr-value">AES/CBC/PKCS5Padding # 用于编码动态配置的密码的Cipher算法</span></span>
<span class="line"><span class="token key attr-name">password.encoder.iterations</span><span class="token punctuation">=</span><span class="token value attr-value">4096 # 用于编码动态配置的密码的迭代计数</span></span>
<span class="line"><span class="token key attr-name">password.encoder.key.length</span><span class="token punctuation">=</span><span class="token value attr-value">128 # 用于对动态配置的密码进行编码的密钥长度</span></span>
<span class="line"><span class="token key attr-name">password.encoder.keyfactory.algorithm</span><span class="token punctuation">=</span><span class="token value attr-value">null #string 用于编码动态配置的密码的SecretKeyFactory算法</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">producer.id.expiration.ms</span><span class="token punctuation">=</span><span class="token value attr-value">86400000 # 主题分区leader在生产者id过期之前等待的时间</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">quota.window.num</span><span class="token punctuation">=</span><span class="token value attr-value">11 #为客户端配额保留在内存中的样本数量</span></span>
<span class="line"><span class="token key attr-name">quota.window.size.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">1 # 客户端配额的每个样本的时间跨度</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">replication.quota.window.num</span><span class="token punctuation">=</span><span class="token value attr-value">11</span></span>
<span class="line"><span class="token key attr-name">replication.quota.window.size.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">1</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">security.providers</span><span class="token punctuation">=</span><span class="token value attr-value">null # string org.apache.kafka.common.security.auth.SecurityProviderCreator</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">ssl.endpoint.identification.algorithm</span><span class="token punctuation">=</span><span class="token value attr-value">https # </span></span>
<span class="line"><span class="token key attr-name">ssl.engine.factory.class</span><span class="token punctuation">=</span><span class="token value attr-value">null # class</span></span>
<span class="line"><span class="token key attr-name">ssl.principal.mapping.rules</span><span class="token punctuation">=</span><span class="token value attr-value">DEFAULT</span></span>
<span class="line"><span class="token key attr-name">ssl.secure.random.implementation</span><span class="token punctuation">=</span><span class="token value attr-value">null #string</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">transaction.abort.timed.out.transaction.cleanup.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">10000 # 回滚已超时事务的时间间隔</span></span>
<span class="line"><span class="token key attr-name">transaction.remove.expired.transaction.cleanup.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">3600000 # 删除由于传递transaction.id.expire.ms而过期的事务的时间间隔</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.cipher.suites</span><span class="token punctuation">=</span><span class="token value attr-value">null #list</span></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.crl.enable</span><span class="token punctuation">=</span><span class="token value attr-value">false</span></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.enabled.protocols</span><span class="token punctuation">=</span><span class="token value attr-value">null #list</span></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.endpoint.identification.algorithm</span><span class="token punctuation">=</span><span class="token value attr-value">HTTPS</span></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.ocsp.enable</span><span class="token punctuation">=</span><span class="token value attr-value">false</span></span>
<span class="line"><span class="token key attr-name">zookeeper.ssl.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">TLSv1.2</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关注点配置</p></blockquote><div class="language-properties" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line">replica.fetch.min.bytes</span>
<span class="line">fetch.max.bytes</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><blockquote><p>在线更新配置</p></blockquote><p>read-only：需要重启更新配置</p><p>per-broker：支持动态更新</p><p>cluster-wide：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 更改代理id为0的当前代理配置</span></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 --entity-type brokers --entity-name <span class="token number">0</span> <span class="token parameter variable">--alter</span> --add-config <span class="token assign-left variable">log.cleaner.threads</span><span class="token operator">=</span><span class="token number">2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 描述代理id为0的动态配置</span></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 --entity-type brokers --entity-name <span class="token number">0</span> <span class="token parameter variable">--describe</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 删除代理id为0的动态配置，修改为默认值</span></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 --entity-type brokers --entity-name <span class="token number">0</span> <span class="token parameter variable">--alter</span> --delete-config log.cleaner.threads</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 修改集群的所有broker的log.cleaner.threads</span></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 --entity-type brokers --entity-default <span class="token parameter variable">--alter</span> --add-config <span class="token assign-left variable">log.cleaner.threads</span><span class="token operator">=</span><span class="token number">2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 描述当前配置的动态集群范围默认配置</span></span>
<span class="line">bin/kafka-configs.sh --bootstrap-server localhost:9092 --entity-type brokers --entity-default <span class="token parameter variable">--describe</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20230730183759057.png" alt="image-20230730183759057" tabindex="0" loading="lazy"><figcaption>image-20230730183759057</figcaption></figure><figure><img src="http://47.101.155.205/image-20230730183959271.png" alt="image-20230730183959271" tabindex="0" loading="lazy"><figcaption>image-20230730183959271</figcaption></figure><p>从Kafka 2.0.0版本开始，当配置unclean.leader.election.enable被动态更新时，控制器会自动启用不洁领袖选举。在Kafka 1.1版本中。因此，对unclean.leader.election.enable的更改只有在选出新的控制器时才生效。执行以下命令可以强制控制器重新选举:</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">bin/zookeeper-shell.sh localhost</span>
<span class="line">  rmr /controller</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20230730184246735.png" alt="Updating Log Cleaner Configs" tabindex="0" loading="lazy"><figcaption>Updating Log Cleaner Configs</figcaption></figure><figure><img src="http://47.101.155.205/image-20230730184307697.png" alt="Updating Thread Configs" tabindex="0" loading="lazy"><figcaption>Updating Thread Configs</figcaption></figure><figure><img src="http://47.101.155.205/image-20230730184320874.png" alt="Updating ConnectionQuota Configs" tabindex="0" loading="lazy"><figcaption>Updating ConnectionQuota Configs</figcaption></figure><figure><img src="http://47.101.155.205/image-20230730184339422.png" alt="Adding and Removing Listeners" tabindex="0" loading="lazy"><figcaption>Adding and Removing Listeners</figcaption></figure><figure><img src="http://47.101.155.205/image-20230807213000843.png" alt="image-20230807213000843" tabindex="0" loading="lazy"><figcaption>image-20230807213000843</figcaption></figure><div class="language-markdown" data-highlighter="prismjs" data-ext="md" data-title="md"><pre><code><span class="line">这样配置,bin/kafka-server-start.sh config/server.properties启动的服务器主机名需要改为oycm</span>
<span class="line">sudo hostnamectl set-hostname <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>newhostname</span><span class="token punctuation">&gt;</span></span>可以修改主机名</span>
<span class="line">下面的那一行配置是可以让其他服务器监听到kafka</span>
<span class="line">同时bin/kafka-console-consumer.sh --topic org.test1 --from-beginning --bootstrap-server oycm:9092命令也需要改为oycm才能连接到</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20230807213250301.png" alt="image-20230807213250301" tabindex="0" loading="lazy"><figcaption>image-20230807213250301</figcaption></figure><figure><img src="http://47.101.155.205/image-20230807213759927.png" alt="image-20230807213759927" tabindex="0" loading="lazy"><figcaption>image-20230807213759927</figcaption></figure><h4 id="_2-4-2、topic配置" tabindex="-1"><a class="header-anchor" href="#_2-4-2、topic配置"><span>2.4.2、Topic配置</span></a></h4><p>服务器对topic有默认的配置，也可以单独给topic怎加配置。可以通过在创建topic时通过--config覆盖配置。</p><div class="language-properties" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 创建my-topic时修改配置</span></span>
<span class="line"><span class="token key attr-name">bin/kafka-topics.sh</span> <span class="token value attr-value">--bootstrap-server localhost:9092 --create --topic my-topic --partitions 1 \\</span>
<span class="line">  --replication-factor 1 --config max.message.bytes=64000 --config flush.messages=1</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-properties" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 可以使用命令修改已有topic配置</span></span>
<span class="line"><span class="token key attr-name">bin/kafka-configs.sh</span> <span class="token value attr-value">--bootstrap-server localhost:9092 --entity-type topics --entity-name my-topic</span></span>
<span class="line"><span class="token key attr-name">  --alter</span> <span class="token value attr-value">--add-config max.message.bytes=128000</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-properties" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 命令查看能修改这个topic的哪些配置</span></span>
<span class="line"><span class="token key attr-name">bin/kafka-configs.sh</span> <span class="token value attr-value">--bootstrap-server localhost:9092 --entity-type topics --entity-name my-topic --describe</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-properties" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 移除覆盖的配置</span></span>
<span class="line"><span class="token key attr-name">bin/kafka-configs.sh</span> <span class="token value attr-value">--bootstrap-server localhost:9092  --entity-type topics --entity-name my-topic</span></span>
<span class="line"><span class="token key attr-name">  --alter</span> <span class="token value attr-value">--delete-config max.message.bytes</span></span>
<span class="line">  </span>
<span class="line"></span></code></pre></div><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">cleanup.policy</span><span class="token punctuation">=</span><span class="token value attr-value">delete # list [compact, delete] Server Default Property log.cleanup.policy</span></span>
<span class="line"><span class="token comment"># delelte 当日志的保留时间或者超过大小限制，删除旧的日志段</span></span>
<span class="line"><span class="token comment"># compact 启用日志压缩,它保留每个键的最新值</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">compression.type</span><span class="token punctuation">=</span><span class="token value attr-value">producer # [uncompressed, zstd, lz4, snappy, gzip, producer]</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">delete.retention.ms</span><span class="token punctuation">=</span><span class="token value attr-value">86400000 # 1d log.cleaner.delete.retention.ms</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">file.delete.delay.ms</span><span class="token punctuation">=</span><span class="token value attr-value">60000 # 从文件系统中删除文件之前等待的时间 log.segment.delete.delay.ms</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">flush.messages</span><span class="token punctuation">=</span><span class="token value attr-value">9223372036854775807 # 对写入日志的数据进行fsync log.flush.interval.messages</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">flush.ms</span><span class="token punctuation">=</span><span class="token value attr-value">9223372036854775807 # force an fsync of data written to the log的时间 log.flush.interval.ms</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">follower.replication.throttled.replicas</span><span class="token punctuation">=</span> <span class="token value attr-value"># list [partitionId]:[brokerId],[partitionId]:[brokerId],...</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">index.interval.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">4096 # 4kb 控制Kafka向偏移索引添加索引条目的频率</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">leader.replication.throttled.replicas</span><span class="token punctuation">=</span> <span class="token value attr-value"># list [partitionId]:[brokerId],[partitionId]:[brokerId],...</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">max.compaction.lag.ms</span><span class="token punctuation">=</span><span class="token value attr-value">9223372036854775807 # 日志压缩相关</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">max.message.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1048588 # Kafka允许的最大记录批大小</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">message.format.version</span><span class="token punctuation">=</span><span class="token value attr-value">3.0-IV1 # [0.8.0, 0.8.1, 0.8.2, 0.9.0, 0.10.0-IV0, 0.10.0-IV1, 0.10.1-IV0, 0.10.1-IV1, 0.10.1-IV2, 0.10.2-IV0, 0.11.0-IV0, 0.11.0-IV1, 0.11.0-IV2, 1.0-IV0, 1.1-IV0, 2.0-IV0, 2.0-IV1, 2.1-IV0, 2.1-IV1, 2.1-IV2, 2.2-IV0, 2.2-IV1, 2.3-IV0, 2.3-IV1, 2.4-IV0, 2.4-IV1, 2.5-IV0, 2.6-IV0, 2.7-IV0, 2.7-IV1, 2.7-IV2, 2.8-IV0, 2.8-IV1, 3.0-IV0, 3.0-IV1, 3.1-IV0, 3.2-IV0, 3.3-IV0, 3.3-IV1, 3.3-IV2, 3.3-IV3, 3.4-IV0, 3.5-IV0, 3.5-IV1, 3.5-IV2]</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">message.timestamp.difference.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">9223372036854775807 # </span></span>
<span class="line"><span class="token key attr-name">message.timestamp.type</span><span class="token punctuation">=</span><span class="token value attr-value">CreateTime # [CreateTime, LogAppendTime] 定义消息中的时间戳是消息创建时间还是日志追加时间</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">min.cleanable.dirty.ratio</span><span class="token punctuation">=</span><span class="token value attr-value">0.5 # [0,...,1] </span></span>
<span class="line"><span class="token comment"># 日志中保持未压缩状态的最短时间</span></span>
<span class="line"><span class="token key attr-name">min.compaction.lag.ms</span><span class="token punctuation">=</span><span class="token value attr-value">0 </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">min.insync.replicas</span><span class="token punctuation">=</span><span class="token value attr-value">1 # 和生产者acks相关</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">preallocate</span><span class="token punctuation">=</span><span class="token value attr-value">false # true 在创建新的日志段时应该在磁盘上预分配文件</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">retention.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">-1 # </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">retention.ms</span><span class="token punctuation">=</span><span class="token value attr-value">604800000 # -1 数据保留时间?</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">segment.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1073741824 # 1GB 14 日志的段文件大小</span></span>
<span class="line"><span class="token key attr-name">segment.index.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">10485760 # 4 10MB 控制将偏移量映射到文件位置的索引的大小</span></span>
<span class="line"><span class="token key attr-name">segment.jitter.ms</span><span class="token punctuation">=</span><span class="token value attr-value">0</span></span>
<span class="line"><span class="token key attr-name">segment.ms</span><span class="token punctuation">=</span><span class="token value attr-value">604800000 # Kafka强制日志滚动的时间,即使段文件没有满,以确保保留可以删除或压缩旧数据</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">unclean.leader.election.enable</span><span class="token punctuation">=</span><span class="token value attr-value">false # 数据丢失相关</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">message.downconversion.enable</span><span class="token punctuation">=</span><span class="token value attr-value">true # 消息向下转换,不太懂?</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-3、producer配置" tabindex="-1"><a class="header-anchor" href="#_2-4-3、producer配置"><span>2.4.3、Producer配置</span></a></h4><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment">#acks=0 生产者将根本不等待来自服务器的任何确认,retries配置失效,为每条记录返回的偏移量将始终设置为-1</span></span>
<span class="line"><span class="token comment">#acks=1 leader副本将记录写入其本地日志，但无需等待所有follower副本的完全确认即可响应,如果在 leader 响应之后，follower 没有复制完成之前失败,则出现数据丢失</span></span>
<span class="line"><span class="token comment">#acks=all leader将等待同步副本的完整集合来确认记录.这保证只要至少有一个同步副本保持活动状态,记录就不会丢失.效果等同-1配置</span></span>
<span class="line"><span class="token comment">#启用幂等性需要这个配置值为“all”。如果设置了冲突的配置，并且幂等性没有显式启用，则幂等性被禁用</span></span>
<span class="line"><span class="token key attr-name">acks</span><span class="token punctuation">=</span><span class="token value attr-value">all # [all, -1, 0, 1]</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">key.serializer</span><span class="token punctuation">=</span><span class="token value attr-value">className # 实现org.apache.kafka.common.serializ.Serializer 接口的class</span></span>
<span class="line"><span class="token key attr-name">value.serializer</span><span class="token punctuation">=</span><span class="token value attr-value">className # 实现org.apache.kafka.common.serializ.Serializer 接口的class</span></span>
<span class="line"><span class="token comment"># Kafka服务端地址</span></span>
<span class="line"><span class="token key attr-name">bootstrap.servers</span><span class="token punctuation">=</span><span class="token value attr-value">list </span></span>
<span class="line"><span class="token comment"># 生产者用于缓存等待发送到服务器的内存字节数。如果记录发送速度大于记录被提交到服务器的速度，缓存将耗尽，</span></span>
<span class="line"><span class="token comment"># 阻塞 max.block.ms 之后，则发生异常: RecordTooLargeException</span></span>
<span class="line"><span class="token key attr-name">buffer.memory</span><span class="token punctuation">=</span><span class="token value attr-value">33554432</span></span>
<span class="line"><span class="token comment"># 阻塞最大时间</span></span>
<span class="line"><span class="token key attr-name">max.block.ms</span><span class="token punctuation">=</span><span class="token value attr-value">60000 </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Kafka 压缩消息机制</span></span>
<span class="line"><span class="token key attr-name">compression.type</span><span class="token punctuation">=</span><span class="token value attr-value">none # none,gzip,snappy,lz4,zstd</span></span>
<span class="line"><span class="token comment"># 启用幂等性，此值必须大于0。生产者发送消息失败的重试次数</span></span>
<span class="line"><span class="token key attr-name">retries</span><span class="token punctuation">=</span><span class="token value attr-value">2147483647 </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">ssl.key.password</span><span class="token punctuation">=</span><span class="token value attr-value">null #password</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.certificate.chain</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.key</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.location</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.password</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">ssl.truststore.certificates</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">ssl.truststore.location</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">ssl.truststore.password</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 当将多条记录发送到一个分区时，生产者将一批消息发送，生产者批量发送消息的大小（单位byte）。为0则禁用批处理</span></span>
<span class="line"><span class="token key attr-name">batch.size</span><span class="token punctuation">=</span><span class="token value attr-value">16384 </span></span>
<span class="line"><span class="token comment">#延迟发送消息，结合batch.size使用可以批处理发送消息（默认为0，意味着即使积累的消息小于batch.size也会立即发送）</span></span>
<span class="line"><span class="token key attr-name">linger.ms</span><span class="token punctuation">=</span><span class="token value attr-value">0</span></span>
<span class="line"><span class="token comment"># 每个请求的最大上限，如果大于Broker的message.max.bytes，生产者可能出现报错</span></span>
<span class="line"><span class="token key attr-name">max.request.size</span><span class="token punctuation">=</span><span class="token value attr-value">1048576 </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">client.dns.lookup</span><span class="token punctuation">=</span><span class="token value attr-value">use_all_dns_ips # resolve_canonical_bootstrap_servers_only</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 发出请求时传递给服务器的id字符串，生产者的唯一标识，方便日志记录、监控、配额管理和问题排查</span></span>
<span class="line"><span class="token key attr-name">client.id</span><span class="token punctuation">=</span><span class="token value attr-value">null </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">connections.max.idle.ms</span><span class="token punctuation">=</span><span class="token value attr-value">540000  #9m 在此配置指定的毫秒数之后关闭空闲连接</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 调用send后，返回成功或失败的时间上线。发送消息的时间上限,大于request.timeout.ms+linger.ms，加上失败处置时间</span></span>
<span class="line"><span class="token key attr-name">delivery.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">120000 </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 配置控制客户端等待请求响应的最大时间。如果在超时之前未收到响应，则客户端将在必要时重新发送请求.要大于Braker的replica.lag.time.max.ms配置，避免因为客户端重试导致消息重复的概率。为什么重复？</span></span>
<span class="line"><span class="token key attr-name">request.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">30000 </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 没有设置这个,使用默认的分区策略,或者根据存在的key选择一个分区;org.apache.kafka.clients.producer.RoundRobinPartitioner,这种分区策略是将一系列连续记录中的每条记录发送到不同的分区(无论是否提供了“键”)，直到我们用完分区并重新开始。注意:有一个已知的问题会导致新批创建时分布不均匀。详情请查看KAFKA-9965。实现org.apache.kafka.clients.producer.Partitioner接口可以自定义分区器。通过指定class自定义分区策略</span></span>
<span class="line"><span class="token key attr-name">partitioner.class</span><span class="token punctuation">=</span><span class="token value attr-value">class </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 当设置为“true”时，生产者将不会使用记录键来选择分区。如果为“false”，当存在密钥时，生产者将根据密钥的散列选择分区。注意:如果使用自定义分区器，此设置不起作用。</span></span>
<span class="line"><span class="token key attr-name">partitioner.ignore.keys</span><span class="token punctuation">=</span><span class="token value attr-value">false </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 读取数据时使用的TCP接收缓冲区(SO_RCVBUF)的大小。如果取值为-1，则使用操作系统默认值</span></span>
<span class="line"><span class="token key attr-name">receive.buffer.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">32768</span></span>
<span class="line"><span class="token comment"># 发送数据时要使用的TCP发送缓冲区(SO_SNDBUF)的大小。如果取值为-1，则使用操作系统默认值</span></span>
<span class="line"><span class="token key attr-name">send.buffer.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">131072</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">sasl.client.callback.handler.class</span><span class="token punctuation">=</span><span class="token value attr-value">null #class 实现AuthenticateCallbackHandler接口的SASL客户机回调处理程序类的完全限定名称</span></span>
<span class="line"><span class="token key attr-name">sasl.jaas.config</span><span class="token punctuation">=</span><span class="token value attr-value">null # password</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.service.name</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">sasl.login.callback.handler.class</span><span class="token punctuation">=</span><span class="token value attr-value">null #class</span></span>
<span class="line"><span class="token key attr-name">sasl.login.class</span><span class="token punctuation">=</span><span class="token value attr-value">null #class</span></span>
<span class="line"><span class="token key attr-name">sasl.mechanism</span><span class="token punctuation">=</span><span class="token value attr-value">GSSAPI # </span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.jwks.endpoint.url</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.token.endpoint.url</span><span class="token punctuation">=</span><span class="token value attr-value">null # </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">security.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT # PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL和broker沟通的协议</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">socket.connection.setup.timeout.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">30000 # </span></span>
<span class="line"><span class="token key attr-name">socket.connection.setup.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">10000 # </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">ssl.enabled.protocols</span><span class="token punctuation">=</span><span class="token value attr-value">TLSv1.2 #</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.type</span><span class="token punctuation">=</span><span class="token value attr-value">JKS # JKS, PKCS12, PEM</span></span>
<span class="line"><span class="token key attr-name">ssl.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">TLSv1.2</span></span>
<span class="line"><span class="token key attr-name">ssl.provider</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">ssl.truststore.type</span><span class="token punctuation">=</span><span class="token value attr-value">JKS # JKS, PKCS12, PEM</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">auto.include.jmx.reporter</span><span class="token punctuation">=</span><span class="token value attr-value">true # 	</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">enable.idempotence</span><span class="token punctuation">=</span><span class="token value attr-value">true # true生产者将确保在流中只写入每个消息的一个副本,幂等性要求max.in.flight.requests.per.connection&lt;=5,retries &gt;0,acks=all</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 客户端将在单个连接上发送的未确认请求的最大数量。如果此配置设置为大于1且enable.idempotence设置为 false，则存在由于重试而导致发送失败后消息重新排序的风险；如果禁用重试或 enable.idempotence 设置为 true，则将保留顺序。</span></span>
<span class="line"><span class="token key attr-name">max.in.flight.requests.per.connection</span><span class="token punctuation">=</span><span class="token value attr-value">5</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">interceptor.classes</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;&#39; #  By default, there are no interceptors.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 超过这个时间间隔，系统自动更新元数据。包含Topic、副本、分区、Broker信息。</span></span>
<span class="line"><span class="token key attr-name">metadata.max.age.ms</span><span class="token punctuation">=</span><span class="token value attr-value">300000</span></span>
<span class="line"><span class="token comment"># 生产者缓存Topic元数据，上次访问Topic至现在超过空闲时间，则Topic的元数据被抛弃，下次访问Topic强制获取元数据</span></span>
<span class="line"><span class="token key attr-name">metadata.max.idle.ms</span><span class="token punctuation">=</span><span class="token value attr-value">300000</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">metric.reporters</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;&#39; # list</span></span>
<span class="line"><span class="token key attr-name">metrics.num.samples</span><span class="token punctuation">=</span><span class="token value attr-value">2 # </span></span>
<span class="line"><span class="token key attr-name">metrics.recording.level</span><span class="token punctuation">=</span><span class="token value attr-value">INFO # [INFO, DEBUG, TRACE]</span></span>
<span class="line"><span class="token key attr-name">metrics.sample.window.ms</span><span class="token punctuation">=</span><span class="token value attr-value">30000 # </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">partitioner.adaptive.partitioning.enable</span><span class="token punctuation">=</span><span class="token value attr-value">true # </span></span>
<span class="line"><span class="token key attr-name">partitioner.availability.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">0 # </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 客户端重连的最大时间，每次重连失败，会增加这个时间</span></span>
<span class="line"><span class="token key attr-name">reconnect.backoff.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">1000 </span></span>
<span class="line"><span class="token comment"># 客户端重连的间隔时间</span></span>
<span class="line"><span class="token key attr-name">reconnect.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">50 # </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">retry.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">100 # 在尝试重试对给定主题分区的失败请求之前等待的时间。这避免了在某些故障场景下在紧密循环中重复发送请求</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.kinit.cmd</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/bin/kinit # </span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.min.time.before.relogin</span><span class="token punctuation">=</span><span class="token value attr-value">60000 # </span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.ticket.renew.jitter</span><span class="token punctuation">=</span><span class="token value attr-value">0.05</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.ticket.renew.window.factor</span><span class="token punctuation">=</span><span class="token value attr-value">0.8</span></span>
<span class="line"><span class="token key attr-name">sasl.login.connect.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">sasl.login.read.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">sasl.login.refresh.buffer.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">300</span></span>
<span class="line"><span class="token key attr-name">sasl.login.refresh.min.period.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">60</span></span>
<span class="line"><span class="token key attr-name">sasl.login.refresh.window.factor</span><span class="token punctuation">=</span><span class="token value attr-value">0.8</span></span>
<span class="line"><span class="token key attr-name">sasl.login.refresh.window.jitter</span><span class="token punctuation">=</span><span class="token value attr-value">0.05</span></span>
<span class="line"><span class="token key attr-name">sasl.login.retry.backoff.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">10000 </span></span>
<span class="line"><span class="token key attr-name">sasl.login.retry.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">100</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.clock.skew.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">30</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.expected.audience</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.expected.issuer</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.jwks.endpoint.refresh.ms</span><span class="token punctuation">=</span><span class="token value attr-value">3600000 </span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">10000 </span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.jwks.endpoint.retry.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">100</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.scope.claim.name</span><span class="token punctuation">=</span><span class="token value attr-value">scope</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.sub.claim.name</span><span class="token punctuation">=</span><span class="token value attr-value">sub</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">security.providers</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">ssl.cipher.suites</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">ssl.endpoint.identification.algorithm</span><span class="token punctuation">=</span><span class="token value attr-value">https</span></span>
<span class="line"><span class="token key attr-name">ssl.engine.factory.class</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">ssl.keymanager.algorithm</span><span class="token punctuation">=</span><span class="token value attr-value">SunX509</span></span>
<span class="line"><span class="token key attr-name">ssl.secure.random.implementation</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"><span class="token key attr-name">ssl.trustmanager.algorithm</span><span class="token punctuation">=</span><span class="token value attr-value">PKIX</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 生产者主动终结当前操作的最大时间，不能&gt;transaction.max.timeout.ms，大于则请求失败且报错InvalidTxnTimeoutException</span></span>
<span class="line"><span class="token key attr-name">transaction.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">60000</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 用于事务性传输的 TransactionalId。这将启用跨多个生产者会话的可靠性语义，因为它允许客户端保证在开始任何新事务之前已经完成了使用相同 TransactionalId 的事务。如果未提供 TransactionalId，则生产者仅限于幂等传输。如果配置了 TransactionalId，则隐含 enable.idempotence。默认情况下，未配置 TransactionId，这意味着无法使用事务。请注意，默认情况下，事务需要至少三个代理的集群，这是 production 的推荐设置;对于 Development，您可以通过调整 Broker Setup transaction.state.log.replication.factor 来更改此设置。</span></span>
<span class="line"><span class="token key attr-name">transactional.id</span><span class="token punctuation">=</span><span class="token value attr-value">null # 事务消息</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-4、consumer配置" tabindex="-1"><a class="header-anchor" href="#_2-4-4、consumer配置"><span>2.4.4、Consumer配置</span></a></h4><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 实现了org.apache.kafka.common.serialization.Deserializer 接口的class</span></span>
<span class="line"><span class="token key attr-name">key.deserializer</span><span class="token punctuation">=</span><span class="token value attr-value">class </span></span>
<span class="line"><span class="token comment"># # 实现了org.apache.kafka.common.serialization.Deserializer 接口的class</span></span>
<span class="line"><span class="token key attr-name">value.deserializer</span><span class="token punctuation">=</span><span class="token value attr-value">class </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># kafka服务器的ip+port,host1:port1,host2:port2,... </span></span>
<span class="line"><span class="token key attr-name">bootstrap.servers</span><span class="token punctuation">=</span><span class="token value attr-value">list </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 消费者请求一次最小的响应数据单位字节,如果服务端没有足够的数据返回，则会等待至超时返回</span></span>
<span class="line"><span class="token key attr-name">fetch.min.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1 </span></span>
<span class="line"><span class="token comment"># 默认50MB 消费者在一次请求中返回最大的字节数。消费者消费消息的最大值不由这个决定，而是Broker配置决定</span></span>
<span class="line"><span class="token key attr-name">fetch.max.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">52428800 </span></span>
<span class="line"><span class="token comment"># 消费一次fetch.min.bytes没达到这个标准的阻塞时间</span></span>
<span class="line"><span class="token key attr-name">fetch.max.wait.ms</span><span class="token punctuation">=</span><span class="token value attr-value">500 </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 表示消费者组的唯一字符串</span></span>
<span class="line"><span class="token key attr-name">group.id</span><span class="token punctuation">=</span><span class="token value attr-value">null </span></span>
<span class="line"><span class="token comment"># The expected time between heartbeats to the consumer coordinator when using Kafka&#39;s group management facilities.The value must be set lower than session.timeout.ms, but typically should be set no higher than 1/3 of that value.</span></span>
<span class="line"><span class="token comment"># 当使用Kafka的组管理设施时，心跳到消费者协调器之间的预期时间。该值必须小于session.timeout.ms，但通常应设置不高于该值的1/3</span></span>
<span class="line"><span class="token key attr-name">heartbeat.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">3000</span></span>
<span class="line"><span class="token comment">#45s kafka消费者与broker的超时时间,group.min.session.timeout.ms group.max.session.timeout.ms</span></span>
<span class="line"><span class="token key attr-name">session.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">45000 </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 每个分区返回给消费者的最大消息，设置比消息小，不会影响消费message.max.bytes (broker/topic config)</span></span>
<span class="line"><span class="token key attr-name">max.partition.fetch.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1048576</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">ssl.key.password</span><span class="token punctuation">=</span><span class="token value attr-value">null # password</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.certificate.chain</span><span class="token punctuation">=</span><span class="token value attr-value">null # password</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.location</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.password</span><span class="token punctuation">=</span><span class="token value attr-value">null # password</span></span>
<span class="line"><span class="token key attr-name">ssl.truststore.certificates</span><span class="token punctuation">=</span><span class="token value attr-value">null # password</span></span>
<span class="line"><span class="token key attr-name">ssl.truststore.location</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">ssl.truststore.password</span><span class="token punctuation">=</span><span class="token value attr-value">null # password</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 在订阅或分配主题时，允许在代理上自动创建主题。当使用高于0.11.0的代理时，此配置必须设置为“false”</span></span>
<span class="line"><span class="token comment"># # Allow automatic topic creation on the broker when subscribing to or assigning a topic.This configuration must be set to \`false\` when using brokers older than 0.11.0</span></span>
<span class="line"><span class="token key attr-name">allow.auto.create.topics</span><span class="token punctuation">=</span><span class="token value attr-value">true </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">auto.offset.reset</span><span class="token punctuation">=</span><span class="token value attr-value">latest # [latest, earliest, none] 当Kafka中没有初始偏移量或者当前偏移量在服务器上不存在时该怎么办</span></span>
<span class="line"><span class="token comment"># earliest 自动将偏移量重置为最早的偏移量,加入开始处理</span></span>
<span class="line"><span class="token comment"># latest 自动将偏移量重置为最新偏移量,分区最早开始处理</span></span>
<span class="line"><span class="token comment"># none 如果没有为消费者组找到先前的偏移量，则向消费者抛出异常</span></span>
<span class="line"><span class="token comment"># anything else 其他值，向消费者抛出异常</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">client.dns.lookup</span><span class="token punctuation">=</span><span class="token value attr-value">use_all_dns_ips # [use_all_dns_ips, resolve_canonical_bootstrap_servers_only]</span></span>
<span class="line"><span class="token comment"># 在此配置指定的毫秒数之后关闭空闲连接</span></span>
<span class="line"><span class="token key attr-name">connections.max.idle.ms</span><span class="token punctuation">=</span><span class="token value attr-value">540000  </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">default.api.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">60000 # 1m Specifies the timeout for client APIs</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 消费组是否自动提交消费的进度，默认true</span></span>
<span class="line"><span class="token key attr-name">enable.auto.commit</span><span class="token punctuation">=</span><span class="token value attr-value">true # If true the consumer&#39;s offset will be periodically committed in the background.</span></span>
<span class="line"><span class="token comment"># enable.auto.commit设置为true，自动提交偏移量的频率（提交消费进度的时间）</span></span>
<span class="line"><span class="token key attr-name">auto.commit.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">5000 </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 是否公开kafka的默认主题，默认开启</span></span>
<span class="line"><span class="token key attr-name">exclude.internal.topics</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">group.instance.id</span><span class="token punctuation">=</span><span class="token value attr-value">null # string 和消费组相关（静态相关）</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">isolation.level</span><span class="token punctuation">=</span><span class="token value attr-value">read_uncommitted # [read_committed, read_uncommitted] 读取事务性消息设置,非事物消息不受控制</span></span>
<span class="line"><span class="token comment"># The maximum delay between invocations of poll() when using consumer group management.</span></span>
<span class="line"><span class="token comment"># 这为消费者在获取更多记录之前可以空闲的时间设置了上限。如果在此超时到期之前未调用poll()，则认为消费者失败，组将重新平衡，以便将分区重新分配给另一个成员</span></span>
<span class="line"><span class="token comment"># 消费者是什么时候poll(),是否是消费完成一次消息调用？还是自动调用？</span></span>
<span class="line"><span class="token key attr-name">max.poll.interval.ms</span><span class="token punctuation">=</span><span class="token value attr-value">300000  </span></span>
<span class="line"><span class="token comment"># 消费者一次拉取请求的最大消息数</span></span>
<span class="line"><span class="token key attr-name">max.poll.records</span><span class="token punctuation">=</span><span class="token value attr-value">500 # 并不影响底层的抓取行为。消费者将缓存来自每个获取请求的记录，并从每个轮询中增量地返回它们。</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 消费者的分区分配策略</span></span>
<span class="line"><span class="token key attr-name">partition.assignment.strategy</span><span class="token punctuation">=</span><span class="token value attr-value">class org.apache.kafka.clients.consumer.RangeAssignor,class org.apache.kafka.clients.consumer.CooperativeStickyAssignor 客户端将使用这些策略在消费者实例之间分配分区所有权</span></span>
<span class="line"><span class="token comment"># RangeAssignor 基于每个主题分配分区</span></span>
<span class="line"><span class="token comment"># RoundRobinAssignor 以循环方式将分区分配给消费者。</span></span>
<span class="line"><span class="token comment"># StickyAssignor 保证分配达到最大平衡，同时保留尽可能多的现有分区分配</span></span>
<span class="line"><span class="token comment"># CooperativeStickyAssignor 遵循相同的StickyAssignor逻辑，但允许协作再平衡</span></span>
<span class="line"><span class="token comment"># org.apache.kafka.clients.consumer.ConsumerPartitionAssignor自定义接口实现</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 配置控制客户端等待请求响应的最大时间</span></span>
<span class="line"><span class="token key attr-name">request.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">30000</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">sasl.client.callback.handler.class</span><span class="token punctuation">=</span><span class="token value attr-value">null #class</span></span>
<span class="line"><span class="token key attr-name">sasl.jaas.config</span><span class="token punctuation">=</span><span class="token value attr-value">null # password</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.service.name</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">sasl.login.callback.handler.class</span><span class="token punctuation">=</span><span class="token value attr-value">null #class</span></span>
<span class="line"><span class="token key attr-name">sasl.login.class</span><span class="token punctuation">=</span><span class="token value attr-value">null #class</span></span>
<span class="line"><span class="token key attr-name">sasl.mechanism</span><span class="token punctuation">=</span><span class="token value attr-value">GSSAPI </span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.jwks.endpoint.url</span><span class="token punctuation">=</span><span class="token value attr-value">null #class</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.token.endpoint.url</span><span class="token punctuation">=</span><span class="token value attr-value">null #class</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.kinit.cmd</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/bin/kinit #</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.min.time.before.relogin</span><span class="token punctuation">=</span><span class="token value attr-value">60000</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.ticket.renew.jitter</span><span class="token punctuation">=</span><span class="token value attr-value">0.05</span></span>
<span class="line"><span class="token key attr-name">sasl.kerberos.ticket.renew.window.factor</span><span class="token punctuation">=</span><span class="token value attr-value">0.8</span></span>
<span class="line"><span class="token key attr-name">sasl.login.connect.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">null # int</span></span>
<span class="line"><span class="token key attr-name">sasl.login.read.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">null # int</span></span>
<span class="line"><span class="token key attr-name">sasl.login.refresh.buffer.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">300 #[0,...,3600]</span></span>
<span class="line"><span class="token key attr-name">sasl.login.refresh.min.period.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">60 # [0,...,900]</span></span>
<span class="line"><span class="token key attr-name">sasl.login.refresh.window.factor</span><span class="token punctuation">=</span><span class="token value attr-value">0.8 # [0.5,...,1.0]</span></span>
<span class="line"><span class="token key attr-name">sasl.login.refresh.window.jitter</span><span class="token punctuation">=</span><span class="token value attr-value">0.05 # [0.0,...,0.25]</span></span>
<span class="line"><span class="token key attr-name">sasl.login.retry.backoff.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">10000 </span></span>
<span class="line"><span class="token key attr-name">sasl.login.retry.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">100</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.clock.skew.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">30</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.expected.audience</span><span class="token punctuation">=</span><span class="token value attr-value">null #list</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.expected.issuer</span><span class="token punctuation">=</span><span class="token value attr-value">null #list</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.jwks.endpoint.refresh.ms</span><span class="token punctuation">=</span><span class="token value attr-value">3600000 #1h</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">10000 </span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.jwks.endpoint.retry.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">100</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.scope.claim.name</span><span class="token punctuation">=</span><span class="token value attr-value">scope</span></span>
<span class="line"><span class="token key attr-name">sasl.oauthbearer.sub.claim.name</span><span class="token punctuation">=</span><span class="token value attr-value">sub</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">security.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT # 用于与代理通信的协议,[PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL]</span></span>
<span class="line"><span class="token comment"># 发送数据时要使用的TCP发送缓冲区,-1 default OS</span></span>
<span class="line"><span class="token key attr-name">send.buffer.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">131072 </span></span>
<span class="line"><span class="token comment"># 读取数据时使用的TCP接收缓冲区(SO_RCVBUF)的大小。如果取值为-1，则使用操作系统默认值</span></span>
<span class="line"><span class="token key attr-name">receive.buffer.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">65536</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">socket.connection.setup.timeout.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">30000 # 客户端等待套接字连接建立的最长时间</span></span>
<span class="line"><span class="token key attr-name">socket.connection.setup.timeout.ms</span><span class="token punctuation">=</span><span class="token value attr-value">10000 # 客户端等待套接字连接建立所需的时间</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">ssl.enabled.protocols</span><span class="token punctuation">=</span><span class="token value attr-value">TLSv1.2</span></span>
<span class="line"><span class="token key attr-name">ssl.keystore.type</span><span class="token punctuation">=</span><span class="token value attr-value">JKS</span></span>
<span class="line"><span class="token key attr-name">ssl.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">TLSv1.2</span></span>
<span class="line"><span class="token key attr-name">ssl.provider</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">ssl.truststore.type</span><span class="token punctuation">=</span><span class="token value attr-value">JKS</span></span>
<span class="line"><span class="token key attr-name">ssl.cipher.suites</span><span class="token punctuation">=</span><span class="token value attr-value">null # list</span></span>
<span class="line"><span class="token key attr-name">ssl.endpoint.identification.algorithm</span><span class="token punctuation">=</span><span class="token value attr-value">https # string</span></span>
<span class="line"><span class="token key attr-name">ssl.engine.factory.class</span><span class="token punctuation">=</span><span class="token value attr-value">null # class</span></span>
<span class="line"><span class="token key attr-name">ssl.keymanager.algorithm</span><span class="token punctuation">=</span><span class="token value attr-value">SunX509</span></span>
<span class="line"><span class="token key attr-name">ssl.secure.random.implementation</span><span class="token punctuation">=</span><span class="token value attr-value">null # string</span></span>
<span class="line"><span class="token key attr-name">ssl.trustmanager.algorithm</span><span class="token punctuation">=</span><span class="token value attr-value">PKIX</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">auto.include.jmx.reporter</span><span class="token punctuation">=</span><span class="token value attr-value">true # </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">check.crcs</span><span class="token punctuation">=</span><span class="token value attr-value">true # </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">client.id</span><span class="token punctuation">=</span> <span class="token value attr-value"># string 发出请求时传递给服务器的id字符串</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">client.rack</span><span class="token punctuation">=</span> <span class="token value attr-value"># string </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 拦截器org.apache.kafca.clients.consumer.Consumerinterceptor</span></span>
<span class="line"><span class="token key attr-name">interceptor.classes</span><span class="token punctuation">=</span> <span class="token value attr-value">string</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">metric.reporters</span><span class="token punctuation">=</span> <span class="token value attr-value"># org.apache.kafka.common.metrics.MetricsReporter 实现系统监控通过JMX</span></span>
<span class="line"><span class="token key attr-name">metrics.num.samples</span><span class="token punctuation">=</span><span class="token value attr-value">2 # The number of samples maintained to compute metrics.</span></span>
<span class="line"><span class="token key attr-name">metrics.recording.level</span><span class="token punctuation">=</span><span class="token value attr-value">INFO # [INFO, DEBUG, TRACE]</span></span>
<span class="line"><span class="token key attr-name">metrics.sample.window.ms</span><span class="token punctuation">=</span><span class="token value attr-value">30000 # </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token key attr-name">reconnect.backoff.max.ms</span><span class="token punctuation">=</span><span class="token value attr-value">1000 # </span></span>
<span class="line"><span class="token comment"># 重连间隔时间</span></span>
<span class="line"><span class="token key attr-name">reconnect.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">50 </span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">retry.backoff.ms</span><span class="token punctuation">=</span><span class="token value attr-value">100 # 在尝试重试对给定主题分区的失败请求之前等待的时间</span></span>
<span class="line"></span>
<span class="line"><span class="token key attr-name">security.providers</span><span class="token punctuation">=</span><span class="token value attr-value">null # string org.apache.kafka.common.security.auth.SecurityProviderCreator</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 以毫秒为单位，元数据过期时间，在此之后，即使我们没有看到任何分区领导更改以主动发现任何新的代理或分区，我们也会强制刷新元数据。</span></span>
<span class="line"><span class="token key attr-name">metadata.max.age.ms</span><span class="token punctuation">=</span><span class="token value attr-value">300000 </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拉取消息相关配置：</p><div class="language-properties" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line">fetch.min.bytes</span>
<span class="line">fetch.max.bytes</span>
<span class="line">max.poll.records</span>
<span class="line">max.poll.interval.ms</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_4-高级特性和性能优化" tabindex="-1"><a class="header-anchor" href="#_4-高级特性和性能优化"><span>4.高级特性和性能优化</span></a></h2><h3 id="_3-1、高级配置" tabindex="-1"><a class="header-anchor" href="#_3-1、高级配置"><span>3.1、高级配置</span></a></h3><ul><li>副本配置</li><li>日志清理策略</li><li>消息压缩</li><li>...</li></ul><h3 id="_3-2、kafka复制机制" tabindex="-1"><a class="header-anchor" href="#_3-2、kafka复制机制"><span>3.2、Kafka复制机制</span></a></h3><ul><li>ISR(In-Sync Replicas)和副本管理</li><li>...</li></ul><h3 id="_3-3、容错性" tabindex="-1"><a class="header-anchor" href="#_3-3、容错性"><span>3.3、容错性</span></a></h3><ul><li>处理代理崩溃、网络中断</li><li>容错处理和故障恢复</li><li>...</li></ul><h3 id="_3-4、性能优化" tabindex="-1"><a class="header-anchor" href="#_3-4、性能优化"><span>3.4、性能优化</span></a></h3><ul><li>批量处理、并行性和吞吐量优化</li><li>...</li></ul><h2 id="_5-实际应用" tabindex="-1"><a class="header-anchor" href="#_5-实际应用"><span>5.实际应用</span></a></h2><ul><li>数据流处理和Kafka Streams、数据流优化</li><li>数据集成和Kafka Connect</li><li>主题和分区设计</li><li>重复消息处理</li><li>与其他系统的集成</li><li>...</li></ul><h2 id="_6-监控和运维" tabindex="-1"><a class="header-anchor" href="#_6-监控和运维"><span>6.监控和运维</span></a></h2><ul><li>Kafka集群监控</li><li>日志管理、备份和恢复</li><li>...</li></ul><p><strong>Kafka Broker指标：</strong></p><table><thead><tr><th>指标</th><th>作用</th></tr></thead><tbody><tr><td>UnderReplicationPartitions</td><td>处于同步状态的副本数(Isr)应该和总副本数(Ar)完全相等</td></tr><tr><td>IsrShrinkPerSec<br>IsrExpandsPerSec</td><td></td></tr><tr><td>ActiveControllerCount</td><td>维护分区Leader列表</td></tr><tr><td>OfflinePartitionsCount</td><td>没有活跃Leader的分区数</td></tr><tr><td>LeaderElectionRateAndTimeMs</td><td>Leader选举频率和集群无Leader状态的时长</td></tr><tr><td>UncleanLeaderElectionsPerSec</td><td>寻找分区Leader节点出现问题</td></tr><tr><td>TotalTimesMs</td><td>queue：处于请求队列中的等待时间<br>local：Leader节点处理的事件<br>remote：等待Fellower节点响应时间<br>response：发送响应的时间</td></tr><tr><td>BytesInPerSec<br>BytesOutPerSec</td><td>Kafka的吞吐量</td></tr></tbody></table><p><strong>生产者指标：</strong></p><table><thead><tr><th>指标</th><th>作用</th></tr></thead><tbody><tr><td>Response rate</td><td>生产者发送到Broker的速率</td></tr><tr><td>Request rate</td><td>生产者发送到Broker的速率</td></tr><tr><td>Requeset latency avg</td><td>平均请求延迟</td></tr><tr><td>Outgoing byte rate</td><td>生产者的网络吞吐量</td></tr><tr><td>IO wait time ns avg</td><td>生产者的I/O等待时间</td></tr></tbody></table><p><strong>消费者指标：</strong></p><table><thead><tr><th>指标</th><th>作用</th></tr></thead><tbody><tr><td>ConsumerLag MaxLag</td><td>消费者当前的日志偏移量相对生产者的日志偏移量</td></tr><tr><td>BytesPerSec</td><td>消费者的网络吞吐量</td></tr><tr><td>MessagePerSec</td><td>消息的消费速度</td></tr></tbody></table><h3 id="efak" tabindex="-1"><a class="header-anchor" href="#efak"><span>EFAK</span></a></h3><p>EFAK (Eagle For Apache Kafka, previously known as Kafka Eagle)</p><p>http://download.kafka-eagle.org/</p><p>https://github.com/smartloli/EFAK?tab=readme-ov-file</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># git 拉取项目，执行打包命令</span></span>
<span class="line">mvn clean package <span class="token parameter variable">-DskipTests</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 压缩包文件位置</span></span>
<span class="line">EFAK<span class="token punctuation">\\</span>efak-web<span class="token punctuation">\\</span>target<span class="token punctuation">\\</span>efak-web-3.0.2-bin.tar.gz</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>安装启动：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> efak-web-3.0.2-bin.tar.gz</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 配置环境变量</span></span>
<span class="line"><span class="token function">vim</span> /etc/profile</span>
<span class="line"></span>
<span class="line">/usr/local/efak-web-3.0.2</span>
<span class="line"><span class="token comment"># 添加配置</span></span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">KE_HOME</span><span class="token operator">=</span>/usr/local/efak-web-3.0.2</span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$KE_HOME</span>/bin</span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">source</span> /etc/profile</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 添加配置文件</span></span>
<span class="line"><span class="token function">vim</span> system-config.properties</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 启动命令，没有权限则授权 chmod +x ke.sh </span></span>
<span class="line">ke.sh start</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 执行提示 /bin/bash^M: bad interpreter: No such file or directory</span></span>
<span class="line"><span class="token comment"># 使用命令替换字符</span></span>
<span class="line"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/\\r$//&#39;</span> ke.sh</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>system-config.properties配置：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">spring.messages.basename</span><span class="token punctuation">=</span><span class="token value attr-value">i18n/messages</span></span>
<span class="line"><span class="token key attr-name">spring.messages.encoding</span><span class="token punctuation">=</span><span class="token value attr-value">UTF-8</span></span>
<span class="line"><span class="token key attr-name">spring.web.locale</span><span class="token punctuation">=</span><span class="token value attr-value">zh_CN</span></span>
<span class="line"><span class="token key attr-name">spring.web.locale-resolver</span><span class="token punctuation">=</span><span class="token value attr-value">fixed</span></span>
<span class="line"><span class="token comment"># zookeeper 配置</span></span>
<span class="line"><span class="token key attr-name">efak.zk.cluster.alias</span><span class="token punctuation">=</span><span class="token value attr-value">cluster1</span></span>
<span class="line"><span class="token key attr-name">cluster1.zk.list</span><span class="token punctuation">=</span><span class="token value attr-value">localhost:2181</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Add zookeeper acl</span></span>
<span class="line"><span class="token key attr-name">cluster1.zk.acl.enable</span><span class="token punctuation">=</span><span class="token value attr-value">false</span></span>
<span class="line"><span class="token key attr-name">cluster1.zk.acl.schema</span><span class="token punctuation">=</span><span class="token value attr-value">digest</span></span>
<span class="line"><span class="token comment">#cluster1.zk.acl.username=test</span></span>
<span class="line"><span class="token comment">#cluster1.zk.acl.password=test123</span></span>
<span class="line"><span class="token comment"># Kafka代理节点在线列表</span></span>
<span class="line"><span class="token key attr-name">cluster1.efak.broker.size</span><span class="token punctuation">=</span><span class="token value attr-value">10</span></span>
<span class="line"><span class="token comment">#cluster2.efak.broker.size=20</span></span>
<span class="line"><span class="token comment"># Zkcli limit -- Zookeeper集群允许连接的客户端数量</span></span>
<span class="line"><span class="token comment"># 如果启用分布式模式，取值可设置为4或8</span></span>
<span class="line"><span class="token key attr-name">kafka.zk.limit.size</span><span class="token punctuation">=</span><span class="token value attr-value">8</span></span>
<span class="line"><span class="token comment"># EFAK webui port -- web页面端口</span></span>
<span class="line"><span class="token key attr-name">efak.webui.port</span><span class="token punctuation">=</span><span class="token value attr-value">8048</span></span>
<span class="line"><span class="token comment">######################################</span></span>
<span class="line"><span class="token comment"># EFAK启用分布式</span></span>
<span class="line"><span class="token comment">######################################</span></span>
<span class="line"><span class="token key attr-name">efak.distributed.enable</span><span class="token punctuation">=</span><span class="token value attr-value">false</span></span>
<span class="line"><span class="token comment"># 节点状态</span></span>
<span class="line"><span class="token comment">#efak.cluster.mode.status=slave</span></span>
<span class="line"><span class="token comment"># 部署efak服务器地址</span></span>
<span class="line"><span class="token key attr-name">efak.worknode.master.host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span></span>
<span class="line"><span class="token key attr-name">efak.worknode.port</span><span class="token punctuation">=</span><span class="token value attr-value">8085</span></span>
<span class="line"><span class="token comment"># Kafka offset storage -- 偏移量存储在Kafka集群中，如果存储在zookeeper中，则不能使用此选项</span></span>
<span class="line"><span class="token key attr-name">cluster1.efak.offset.storage</span><span class="token punctuation">=</span><span class="token value attr-value">kafka</span></span>
<span class="line"><span class="token comment">#cluster2.efak.offset.storage=kafka</span></span>
<span class="line"><span class="token comment"># Kafka性能监控图是否开启</span></span>
<span class="line"><span class="token key attr-name">efak.metrics.charts</span><span class="token punctuation">=</span><span class="token value attr-value">false</span></span>
<span class="line"><span class="token comment"># EFAK默认保存数据30天</span></span>
<span class="line"><span class="token key attr-name">efak.metrics.retain</span><span class="token punctuation">=</span><span class="token value attr-value">30</span></span>
<span class="line"><span class="token comment"># 如果偏移量超出范围，启用此属性—仅适用于kafka sql</span></span>
<span class="line"><span class="token key attr-name">efak.sql.fix.error</span><span class="token punctuation">=</span><span class="token value attr-value">false</span></span>
<span class="line"><span class="token key attr-name">efak.sql.topic.records.max</span><span class="token punctuation">=</span><span class="token value attr-value">5000</span></span>
<span class="line"><span class="token comment"># Delete kafka topic token -- 设置删除主题令牌，使管理员具有删除权限</span></span>
<span class="line"><span class="token key attr-name">efak.topic.token</span><span class="token punctuation">=</span><span class="token value attr-value">keadmin</span></span>
<span class="line"><span class="token comment"># Kafka sasl 认证</span></span>
<span class="line"><span class="token key attr-name">cluster1.efak.sasl.enable</span><span class="token punctuation">=</span><span class="token value attr-value">false</span></span>
<span class="line"><span class="token key attr-name">cluster1.efak.sasl.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">SASL_PLAINTEXT</span></span>
<span class="line"><span class="token key attr-name">cluster1.efak.sasl.mechanism</span><span class="token punctuation">=</span><span class="token value attr-value">SCRAM-SHA-256</span></span>
<span class="line"><span class="token key attr-name">cluster1.efak.sasl.jaas.config</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.kafka.common.security.scram.ScramLoginModule required username=&quot;admin&quot; password=&quot;admin-secret&quot;;</span></span>
<span class="line"><span class="token comment"># 如果没有设置，该值可以为空</span></span>
<span class="line"><span class="token key attr-name">cluster1.efak.sasl.client.id</span><span class="token punctuation">=</span></span>
<span class="line"><span class="token comment"># 添加kafka集群cgroups</span></span>
<span class="line"><span class="token key attr-name">cluster1.efak.sasl.cgroup.enable</span><span class="token punctuation">=</span><span class="token value attr-value">false</span></span>
<span class="line"><span class="token key attr-name">cluster1.efak.sasl.cgroup.topics</span><span class="token punctuation">=</span><span class="token value attr-value">kafka_ads01,kafka_ads02</span></span>
<span class="line"><span class="token key attr-name">cluster2.efak.sasl.enable</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line"><span class="token key attr-name">cluster2.efak.sasl.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">SASL_PLAINTEXT</span></span>
<span class="line"><span class="token key attr-name">cluster2.efak.sasl.mechanism</span><span class="token punctuation">=</span><span class="token value attr-value">PLAIN</span></span>
<span class="line"><span class="token key attr-name">cluster2.efak.sasl.jaas.config</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.kafka.common.security.plain.PlainLoginModule required username=&quot;admin&quot; password=&quot;admin-secret&quot;;</span></span>
<span class="line"><span class="token key attr-name">cluster2.efak.sasl.client.id</span><span class="token punctuation">=</span></span>
<span class="line"><span class="token key attr-name">cluster2.efak.sasl.cgroup.enable</span><span class="token punctuation">=</span><span class="token value attr-value">false</span></span>
<span class="line"><span class="token key attr-name">cluster2.efak.sasl.cgroup.topics</span><span class="token punctuation">=</span><span class="token value attr-value">kafka_ads03,kafka_ads04</span></span>
<span class="line"><span class="token comment"># 默认使用sqlite存储数据</span></span>
<span class="line"><span class="token comment"># /hadoop/kafka-eagle/db 路径必须存在</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:sqlite:/hadoop/kafka-eagle/db/ke.db</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">org.sqlite.JDBC</span></span>
<span class="line"><span class="token comment"># (Optional) set mysql address</span></span>
<span class="line"><span class="token comment">#efak.driver=com.mysql.jdbc.Driver</span></span>
<span class="line"><span class="token comment">#efak.url=jdbc:mysql://127.0.0.1:3306/ke?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span></span>
<span class="line"><span class="token comment">#efak.username=root</span></span>
<span class="line"><span class="token comment">#efak.password=smartloli</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jconsole" tabindex="-1"><a class="header-anchor" href="#jconsole"><span>Jconsole</span></a></h3>`,396)]))}const o=a(p,[["render",l],["__file","kafka.html.vue"]]),r=JSON.parse('{"path":"/mq/kafka.html","title":"Kafka","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1.设计理论","slug":"_1-设计理论","link":"#_1-设计理论","children":[{"level":3,"title":"1.磁盘存储消息","slug":"_1-磁盘存储消息","link":"#_1-磁盘存储消息","children":[]},{"level":3,"title":"2.生产者和消费者","slug":"_2-生产者和消费者","link":"#_2-生产者和消费者","children":[]},{"level":3,"title":"3.消息分发机制","slug":"_3-消息分发机制","link":"#_3-消息分发机制","children":[]},{"level":3,"title":"4.副本机制(Replication)","slug":"_4-副本机制-replication","link":"#_4-副本机制-replication","children":[]},{"level":3,"title":"5.Log Compaction(日志压缩)","slug":"_5-log-compaction-日志压缩","link":"#_5-log-compaction-日志压缩","children":[]},{"level":3,"title":"6.Quotas（配额）","slug":"_6-quotas-配额","link":"#_6-quotas-配额","children":[]},{"level":3,"title":"7.Zookeeper","slug":"_7-zookeeper","link":"#_7-zookeeper","children":[]}]},{"level":2,"title":"2.初级入门","slug":"_2-初级入门","link":"#_2-初级入门","children":[{"level":3,"title":"1.基本概念和架构","slug":"_1-基本概念和架构","link":"#_1-基本概念和架构","children":[]},{"level":3,"title":"2.安装和配置Kafka","slug":"_2-安装和配置kafka","link":"#_2-安装和配置kafka","children":[]},{"level":3,"title":"Windows启动zookeeper命令","slug":"windows启动zookeeper命令","link":"#windows启动zookeeper命令","children":[]}]},{"level":2,"title":"3.API","slug":"_3-api","link":"#_3-api","children":[{"level":3,"title":"1.Kafka基本操作","slug":"_1-kafka基本操作","link":"#_1-kafka基本操作","children":[]},{"level":3,"title":"2.Kafka生产者API","slug":"_2-kafka生产者api","link":"#_2-kafka生产者api","children":[]},{"level":3,"title":"2.Kafka消费者API","slug":"_2-kafka消费者api","link":"#_2-kafka消费者api","children":[]},{"level":3,"title":"3.Kafka StreamAPI","slug":"_3-kafka-streamapi","link":"#_3-kafka-streamapi","children":[]},{"level":3,"title":"4.Connect API","slug":"_4-connect-api","link":"#_4-connect-api","children":[]},{"level":3,"title":"5.Admin API","slug":"_5-admin-api","link":"#_5-admin-api","children":[]},{"level":3,"title":"6.Spring for Kafka","slug":"_6-spring-for-kafka","link":"#_6-spring-for-kafka","children":[]},{"level":3,"title":"7.Kafka可视化插件","slug":"_7-kafka可视化插件","link":"#_7-kafka可视化插件","children":[]}]},{"level":2,"title":"4.核心概念","slug":"_4-核心概念","link":"#_4-核心概念","children":[{"level":3,"title":"1.Kafka主题和分区","slug":"_1-kafka主题和分区","link":"#_1-kafka主题和分区","children":[]},{"level":3,"title":"2.消息的持久性","slug":"_2-消息的持久性","link":"#_2-消息的持久性","children":[]},{"level":3,"title":"3.消息的传输保障","slug":"_3-消息的传输保障","link":"#_3-消息的传输保障","children":[]},{"level":3,"title":"2.3、消息传递模式","slug":"_2-3、消息传递模式","link":"#_2-3、消息传递模式","children":[]},{"level":3,"title":"2.4、Kafka配置","slug":"_2-4、kafka配置","link":"#_2-4、kafka配置","children":[]}]},{"level":2,"title":"4.高级特性和性能优化","slug":"_4-高级特性和性能优化","link":"#_4-高级特性和性能优化","children":[{"level":3,"title":"3.1、高级配置","slug":"_3-1、高级配置","link":"#_3-1、高级配置","children":[]},{"level":3,"title":"3.2、Kafka复制机制","slug":"_3-2、kafka复制机制","link":"#_3-2、kafka复制机制","children":[]},{"level":3,"title":"3.3、容错性","slug":"_3-3、容错性","link":"#_3-3、容错性","children":[]},{"level":3,"title":"3.4、性能优化","slug":"_3-4、性能优化","link":"#_3-4、性能优化","children":[]}]},{"level":2,"title":"5.实际应用","slug":"_5-实际应用","link":"#_5-实际应用","children":[]},{"level":2,"title":"6.监控和运维","slug":"_6-监控和运维","link":"#_6-监控和运维","children":[{"level":3,"title":"EFAK","slug":"efak","link":"#efak","children":[]},{"level":3,"title":"Jconsole","slug":"jconsole","link":"#jconsole","children":[]}]}],"git":{"updatedTime":1760063112000,"contributors":[{"name":"ouyangcm","username":"ouyangcm","email":"mingorg@163.com","commits":4,"url":"https://github.com/ouyangcm"},{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":6,"url":"https://github.com/oycm"}]},"filePathRelative":"mq/kafka.md"}');export{o as comp,r as data};
