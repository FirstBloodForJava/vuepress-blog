import{_ as s,c as a,e as p,o as t}from"./app-DO9Fsueg.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="zuul" tabindex="-1"><a class="header-anchor" href="#zuul"><span>zuul</span></a></h1><p>特点：</p><ul><li>通过自定义过滤器，可以将所有请求的状态码都设为200；</li><li>转发请求失败时，例如未在 ribbon 要求时间内响应，zuul 默认会发起重试请求。可能由于 zuul 的原因，下游服务读取请求数据出现 <code>UT000128: Remote peer closed connection before all data could be read</code> 异常。<strong>原因：由于超时请求中断，触发了 zuul 的 error 类型过滤器 SendErrorFilter，该过滤器逻辑是将请求又转发到 /error 上下文，请求又进入了 HttpServlet 上下文，当前线程又在过滤器中执行了一次，导致重复发送到下游。重发的过程中，可能失败（ConnectTimeout 连接时间太短），再次触发 error 由于上一次已经标记执行过，所以不会再进来，到这里，请求就已经结束了，但是 debug 发现 error 还会再进来然后报错。需要自定义错误过滤器才能解决问题。</strong></li></ul><figure><img src="http://47.101.155.205/image-20250709220516919.png" alt="image-20250709220516919" tabindex="0" loading="lazy"><figcaption>image-20250709220516919</figcaption></figure><figure><img src="http://47.101.155.205/image-20250709220840366.png" alt="image-20250709220840366" tabindex="0" loading="lazy"><figcaption>image-20250709220840366</figcaption></figure><figure><img src="http://47.101.155.205/image-20250709220957870.png" alt="image-20250709220957870" tabindex="0" loading="lazy"><figcaption>image-20250709220957870</figcaption></figure><figure><img src="http://47.101.155.205/image-20250709221227763.png" alt="image-20250709221227763" tabindex="0" loading="lazy"><figcaption>image-20250709221227763</figcaption></figure><figure><img src="http://47.101.155.205/image-20250710110744920.png" alt="image-20250710110744920" tabindex="0" loading="lazy"><figcaption>image-20250710110744920</figcaption></figure><h2 id="zuul-1-x介绍" tabindex="-1"><a class="header-anchor" href="#zuul-1-x介绍"><span>zuul-1.x介绍</span></a></h2><p>zuul的git：https://github.com/Netflix/zuul</p><p>官网文档地址：https://github.com/Netflix/zuul/wiki</p><p>Netflix介绍文档：http://techblog.netflix.com/2013/06/announcing-zuul-edge-service-in-cloud.html</p><p>spring关于spring-cloud-starter-netflix-zuul(最后支持的版本)：https://docs.spring.io/spring-cloud-netflix/docs/2.2.10.RELEASE/reference/html/#router-and-filter-zuul</p><figure><img src="http://47.101.155.205/image-20240930135955381.png" alt="image-20240930135955381" tabindex="0" loading="lazy"><figcaption>image-20240930135955381</figcaption></figure><figure><img src="http://47.101.155.205/image-20240930135955382.png" alt="image-20240930135955382" tabindex="0" loading="lazy"><figcaption>image-20240930135955382</figcaption></figure><h2 id="使用介绍" tabindex="-1"><a class="header-anchor" href="#使用介绍"><span>使用介绍</span></a></h2><h3 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器"><span>过滤器</span></a></h3><p><strong>过滤器执行原理介绍：</strong></p><p><code>HttpServlet</code> 的实现 <code>ZuulServlet</code>，在 <code>service</code> 处理 Web 请求中，设计了过滤器执行过程：</p><ol><li><code>service(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse)</code> 方法处理所有请求；</li><li>Server 初始化时创建 <code>ZuulRunner</code>；</li><li>ZuulRunner 中的 FilterProcessor，其中存储了注册的过滤器 Bean ZuulFilter 实例；</li><li>处理请求逻辑如下：</li></ol><figure><img src="http://47.101.155.205/image-20250708205931863.png" alt="image-20250708205931863" tabindex="0" loading="lazy"><figcaption>image-20250708205931863</figcaption></figure><p><code>ZuulServletFilter</code> 过滤器执行原理如下：</p><ol><li>Servlet 类型过滤器 <code>ZuulServletFilter</code> 过滤请求；</li><li><code>ZuulServletFilter</code> 创建时初始化 <code>ZuulRunner</code>；</li><li><code>ZuulRunner</code> 中的 <code>FilterProcessor</code>，其中存储了注册的过滤器 Bean <code>ZuulFilter</code> 实例；</li><li><code>ZuulServletFilter</code> 组合以上对象的执行过程如下：</li></ol><figure><img src="http://47.101.155.205/image-20250708204024376.png" alt="image-20250708204024376" tabindex="0" loading="lazy"><figcaption>image-20250708204024376</figcaption></figure><p><strong>在 Server 模式下，启动这个过滤器，没有转发请求，但是 pre 过滤器有执行，没有代理请求。缺乏转发请求的过滤器。</strong></p><h4 id="filterprocessor" tabindex="-1"><a class="header-anchor" href="#filterprocessor"><span>FilterProcessor</span></a></h4><p><code>processZuulFilter() 执行过滤器:</code></p><figure><img src="http://47.101.155.205/image-20250710141435641.png" alt="image-20250710141435641" tabindex="0" loading="lazy"><figcaption>image-20250710141435641</figcaption></figure><h4 id="zuul自定义过滤器" tabindex="-1"><a class="header-anchor" href="#zuul自定义过滤器"><span>zuul自定义过滤器</span></a></h4><ol><li>继承ZuulFilter类，实现其方法filterType()、filterOrder()、shouldFilter()、run() <ol><li>filterType()表示过滤器的类型：pre-前置过滤器，用于请求处理前；route-路由过滤器，用于路由请求(使用Apache或NetflixRibbon发送原始http请求)；post-后置过滤器，用于响应请求；error-错误过滤器，用于处理错误情况(其它任何阶段发生错误)。</li><li>filterOrder()表示过滤器的执行顺序，较小意味着先执行</li><li>shouldFilter()表示是否执行过滤器的逻辑，可以编写逻辑确定是否执行过滤器</li><li>run()，过滤器的实际执行逻辑</li></ol></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>zuul<span class="token punctuation">.</span></span><span class="token class-name">ZuulFilter</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>zuul<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">RequestContext</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ZuulFilter</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">filterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;pre&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 前置过滤器</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">filterOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 执行顺序，数字越小越早执行</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 在该方法中可以定义过滤器是否执行的逻辑</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取请求的信息</span></span>
<span class="line">        <span class="token class-name">RequestContext</span> ctx <span class="token operator">=</span> <span class="token class-name">RequestContext</span><span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 获取请求信息、响应信息等</span></span>
<span class="line">        <span class="token comment">// 对请求或响应进行处理</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">auth</span><span class="token punctuation">(</span>ctd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 是否路由到下游，默认true，false route 过滤器将不执行(要在 route 之前才有效)</span></span>
<span class="line">            <span class="token comment">// 仅对使用 sendZuulResponse 配置的 route 有效 SimpleHostRoutingFilter、RibbonRoutingFilter</span></span>
<span class="line">            <span class="token comment">// sendForwardFilter.ran 控制 SendForwardFilter 过滤器</span></span>
<span class="line">			ctx<span class="token punctuation">.</span><span class="token function">setSendZuulResponse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">            ctx<span class="token punctuation">.</span><span class="token function">setResponseStatusCode</span><span class="token punctuation">(</span><span class="token string">&quot;401&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">            ctx<span class="token punctuation">.</span><span class="token function">setResponseBody</span><span class="token punctuation">(</span><span class="token string">&quot;Access Denied&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置响应内容</span></span>
<span class="line">            ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;responseFiltered&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 标记该请求已被过滤</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20231102150019900.png" alt="image-20231102150019900" tabindex="0" loading="lazy"><figcaption>image-20231102150019900</figcaption></figure><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">PortRetValBeginDto</span> portRetValBeginDto <span class="token operator">=</span> <span class="token function">releasePass</span><span class="token punctuation">(</span>reListModel<span class="token punctuation">,</span> portObjectDto<span class="token punctuation">,</span> currentDate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20231102154425869.png" alt="image-20231102154425869" tabindex="0" loading="lazy"><figcaption>image-20231102154425869</figcaption></figure><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">datasource</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">druid</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">username</span><span class="token punctuation">:</span> root</span>
<span class="line">      <span class="token key atrule">password</span><span class="token punctuation">:</span> password</span>
<span class="line">      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//ip<span class="token punctuation">:</span>port/jpa<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span>
<span class="line">      <span class="token key atrule">initial-size</span><span class="token punctuation">:</span> <span class="token number">4</span></span>
<span class="line">      <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">4</span></span>
<span class="line">      <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">30</span></span>
<span class="line">      <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">60000</span></span>
<span class="line">      <span class="token key atrule">time-between-eviction-runs-millis</span><span class="token punctuation">:</span> <span class="token number">60000</span></span>
<span class="line">      <span class="token key atrule">min-evictable-idle-time-millis</span><span class="token punctuation">:</span> <span class="token number">300000</span></span>
<span class="line">      <span class="token key atrule">validation-query</span><span class="token punctuation">:</span> select 1</span>
<span class="line">      <span class="token key atrule">test-while-idle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">      <span class="token key atrule">test-on-borrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">test-on-return</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">pool-prepared-statements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">      <span class="token key atrule">max-pool-prepared-statement-per-connection-size</span><span class="token punctuation">:</span> <span class="token number">30</span></span>
<span class="line">      <span class="token key atrule">use-global-data-source-stat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">      <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">jpa</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token comment">#org.hibernate.dialect.MySQL8Dialect</span></span>
<span class="line">    <span class="token key atrule">database-platform</span><span class="token punctuation">:</span> org.hibernate.dialect.MySQLDialect</span>
<span class="line">    <span class="token key atrule">open-in-view</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">jackson</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss</span>
<span class="line">    <span class="token key atrule">time-zone</span><span class="token punctuation">:</span> GMT+8</span>
<span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="predecorationfilter" tabindex="-1"><a class="header-anchor" href="#predecorationfilter"><span>PreDecorationFilter</span></a></h4><p><code>pre</code> 类型过滤器。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">RequestContext</span> ctx <span class="token operator">=</span> <span class="token class-name">RequestContext</span><span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">!</span>ctx<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">FORWARD_TO_KEY</span><span class="token punctuation">)</span> <span class="token comment">// 属性 forward.to 有值，表示过滤器已经转发</span></span>
<span class="line">        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ctx<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">SERVICE_ID_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 属性 serviceId 有值，表示过滤器已经确定目标</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250709205232525.png" alt="image-20250709205232525" tabindex="0" loading="lazy"><figcaption>image-20250709205232525</figcaption></figure><figure><img src="http://47.101.155.205/image-20250709205629445.png" alt="image-20250709205629445" tabindex="0" loading="lazy"><figcaption>image-20250709205629445</figcaption></figure><h4 id="ribbonroutingfilter" tabindex="-1"><a class="header-anchor" href="#ribbonroutingfilter"><span>RibbonRoutingFilter</span></a></h4><p><code>route</code> 类型过滤器。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">RequestContext</span> ctx <span class="token operator">=</span> <span class="token class-name">RequestContext</span><span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 默认 serviceId 模式才执行</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getRouteHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">SERVICE_ID_KEY</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span></span>
<span class="line">            <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span><span class="token function">sendZuulResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">RequestContext</span> context <span class="token operator">=</span> <span class="token class-name">RequestContext</span><span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 记录忽略的请求头 key</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">addIgnoredHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">RibbonCommandContext</span> commandContext <span class="token operator">=</span> <span class="token function">buildCommandContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">ClientHttpResponse</span> response <span class="token operator">=</span> <span class="token function">forward</span><span class="token punctuation">(</span>commandContext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">setResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> response<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZuulException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZuulRuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZuulRuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250709212009661.png" alt="image-20250709212009661" tabindex="0" loading="lazy"><figcaption>image-20250709212009661</figcaption></figure><p><strong>默认使用 HttpClientRibbonCommand 作为断路器实现，抽象类 AbstractRibbonCommand 中定义了 run 方法逻辑、getFallback 熔断逻辑。</strong></p><h4 id="sendforwardfilter" tabindex="-1"><a class="header-anchor" href="#sendforwardfilter"><span>SendForwardFilter</span></a></h4><p><code>route</code> 类型过滤器。</p><h4 id="sendresponsefilter" tabindex="-1"><a class="header-anchor" href="#sendresponsefilter"><span>SendResponseFilter</span></a></h4><p><code>post</code> 类型过滤器。</p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">RequestContext</span> context <span class="token operator">=</span> <span class="token class-name">RequestContext</span><span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 当前线程上下文有异常，则不执行</span></span>
<span class="line">    <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span><span class="token function">getZuulResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            	<span class="token operator">||</span> context<span class="token punctuation">.</span><span class="token function">getResponseDataStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span></span>
<span class="line">            	<span class="token operator">||</span> context<span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="senderrorfilter" tabindex="-1"><a class="header-anchor" href="#senderrorfilter"><span>SendErrorFilter</span></a></h4><p><strong>该过滤器没什么太大作用</strong></p><figure><img src="http://47.101.155.205/image-20250708210450129.png" alt="image-20250708210450129" tabindex="0" loading="lazy"><figcaption>image-20250708210450129</figcaption></figure><p><strong>这里出现异常的原因就是 RequestDispatcher forward 的执行，当第一次出现错误，假设这里时转发请求到自己，/error 无法路由，再次抛出异常，错误处理器不会处理。这里后续出现异常时出了 Servlet 才出现的。</strong></p><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">RequestDispatcher</span> dispatcher <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&quot;/error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">dispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>上面这段代码的效果可能如下：由于 zuul 的一些其它特性可能影响了最终效果。</strong></p><figure><img src="http://47.101.155.205/image-20250708212003013.png" alt="image-20250708212003013" tabindex="0" loading="lazy"><figcaption>image-20250708212003013</figcaption></figure><p>sendErrorFilter.ran请求上下为true则不执行这个默认过滤器</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendErrorFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ZuulFilter</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">SendErrorFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SEND_ERROR_FILTER_RAN</span> <span class="token operator">=</span> <span class="token string">&quot;sendErrorFilter.ran&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${error.path:/error}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">String</span> errorPath<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">filterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token constant">ERROR_TYPE</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">filterOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token constant">SEND_ERROR_FILTER_ORDER</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">RequestContext</span> ctx <span class="token operator">=</span> <span class="token class-name">RequestContext</span><span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">// only forward to errorPath if it hasn&#39;t been forwarded to already</span></span>
<span class="line">		<span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span></span>
<span class="line">				<span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ctx<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token constant">SEND_ERROR_FILTER_RAN</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token class-name">RequestContext</span> ctx <span class="token operator">=</span> <span class="token class-name">RequestContext</span><span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 获取异常信息</span></span>
<span class="line">			<span class="token class-name">ExceptionHolder</span> exception <span class="token operator">=</span> <span class="token function">findZuulException</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			</span>
<span class="line">			request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;javax.servlet.error.status_code&quot;</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token comment">// 打印什么原因导致的异常异常的信息</span></span>
<span class="line">			log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Error during filtering&quot;</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;javax.servlet.error.exception&quot;</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">getErrorCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;javax.servlet.error.message&quot;</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getErrorCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">			<span class="token class-name">RequestDispatcher</span> dispatcher <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span></span>
<span class="line">					<span class="token keyword">this</span><span class="token punctuation">.</span>errorPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>dispatcher <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">SEND_ERROR_FILTER_RAN</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCommitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					ctx<span class="token punctuation">.</span><span class="token function">setResponseStatusCode</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">					dispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">rethrowRuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">protected</span> <span class="token class-name">ExceptionHolder</span> <span class="token function">findZuulException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ZuulRuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token class-name">Throwable</span> cause <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				cause <span class="token operator">=</span> throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">ClientException</span> <span class="token operator">&amp;&amp;</span> cause<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span></span>
<span class="line">					<span class="token operator">&amp;&amp;</span> cause<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">SocketTimeoutException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">				<span class="token class-name">ZuulException</span> zuulException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZuulException</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">504</span><span class="token punctuation">,</span></span>
<span class="line">						<span class="token class-name">ZuulException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: Hystrix Readed time out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZuulExceptionHolder</span><span class="token punctuation">(</span>zuulException<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token comment">// this was a failure initiated by one of the local filters</span></span>
<span class="line">			<span class="token keyword">if</span><span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ZuulException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZuulExceptionHolder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ZuulException</span><span class="token punctuation">)</span> throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		</span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ZuulException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token comment">// wrapped zuul exception</span></span>
<span class="line">			<span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">ZuulExceptionHolder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ZuulException</span><span class="token punctuation">)</span> throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token keyword">instanceof</span> <span class="token class-name">ZuulException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token comment">// exception thrown by zuul lifecycle</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZuulExceptionHolder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ZuulException</span><span class="token punctuation">)</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		<span class="token comment">// fallback</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultExceptionHolder</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">protected</span> <span class="token keyword">interface</span> <span class="token class-name">ExceptionHolder</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">Throwable</span> <span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	    	<span class="token keyword">return</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getErrorCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	    	<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultExceptionHolder</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionHolder</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">public</span> <span class="token class-name">DefaultExceptionHolder</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">this</span><span class="token punctuation">.</span>throwable <span class="token operator">=</span> throwable<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		<span class="token annotation punctuation">@Override</span></span>
<span class="line">		<span class="token keyword">public</span> <span class="token class-name">Throwable</span> <span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>throwable<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ZuulExceptionHolder</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionHolder</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ZuulException</span> exception<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">public</span> <span class="token class-name">ZuulExceptionHolder</span><span class="token punctuation">(</span><span class="token class-name">ZuulException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">this</span><span class="token punctuation">.</span>exception <span class="token operator">=</span> exception<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		<span class="token annotation punctuation">@Override</span></span>
<span class="line">		<span class="token keyword">public</span> <span class="token class-name">Throwable</span> <span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exception<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		<span class="token annotation punctuation">@Override</span></span>
<span class="line">		<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exception<span class="token punctuation">.</span>nStatusCode<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		<span class="token annotation punctuation">@Override</span></span>
<span class="line">		<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getErrorCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exception<span class="token punctuation">.</span>errorCause<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setErrorPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorPath<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>errorPath <span class="token operator">=</span> errorPath<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="customerrorfilter" tabindex="-1"><a class="header-anchor" href="#customerrorfilter"><span>CustomErrorFilter</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomErrorFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ZuulFilter</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">CustomErrorFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SEND_ERROR_FILTER_RAN</span> <span class="token operator">=</span> <span class="token string">&quot;sendErrorFilter.ran&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">filterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">ERROR_TYPE</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">filterOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">SEND_ERROR_FILTER_ORDER</span> <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">RequestContext</span> ctx <span class="token operator">=</span> <span class="token class-name">RequestContext</span><span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 和 SendErrorFilter 保持一直</span></span>
<span class="line">        <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span></span>
<span class="line">                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ctx<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token constant">SEND_ERROR_FILTER_RAN</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">RequestContext</span> ctx <span class="token operator">=</span> <span class="token class-name">RequestContext</span><span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">SEND_ERROR_FILTER_RAN</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ctx.getThrowable() ZuulException 异常，要处理的异常</span></span>
<span class="line">        <span class="token class-name">ExceptionHolder</span> exceptionHolder <span class="token operator">=</span> <span class="token function">findZuulException</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;CustomErrorFilter: &quot;</span> <span class="token operator">+</span> exceptionHolder<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exceptionHolder<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">setSendZuulResponse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">setResponseStatusCode</span><span class="token punctuation">(</span>exceptionHolder<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">ReturnInfo</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReturnInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        info<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        info<span class="token punctuation">.</span><span class="token function">setNote</span><span class="token punctuation">(</span>exceptionHolder<span class="token punctuation">.</span><span class="token function">getErrorCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">setResponseBody</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">addZuulResponseHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">CONTENT_TYPE</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_UTF8_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 当前上下文清空异常信息，为了 SendResponseFilter 过滤器写入内容</span></span>
<span class="line">        <span class="token comment">// 不能使用 ctx.setThrowable(null) 会出现异常</span></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;throwable&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 逻辑和 SendErrorFilter 相似，有区分超时和熔断</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">throwable</span></span>
<span class="line">     * <span class="token keyword">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token class-name">ExceptionHolder</span> <span class="token function">findZuulException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ZuulRuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Throwable</span> cause <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                cause <span class="token operator">=</span> throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">ClientException</span> <span class="token operator">&amp;&amp;</span> cause<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span></span>
<span class="line">                    <span class="token operator">&amp;&amp;</span> cause<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">SocketTimeoutException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultExceptionHolder</span><span class="token punctuation">(</span>cause<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">REQUEST_TIMEOUT</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// Hystrix 熔断异常</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">HystrixRuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultExceptionHolder</span><span class="token punctuation">(</span>cause<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">REQUEST_TIMEOUT</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 过滤器执行异常</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ZuulException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultExceptionHolder</span><span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ZuulException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// wrapped zuul exception 被包装的 zuul 异常</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZuulExceptionHolder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ZuulException</span><span class="token punctuation">)</span> throwable<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token keyword">instanceof</span> <span class="token class-name">ZuulException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// exception thrown by zuul lifecycle</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZuulExceptionHolder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ZuulException</span><span class="token punctuation">)</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// fallback</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultExceptionHolder</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 异常封装接口</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">interface</span> <span class="token class-name">ExceptionHolder</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Throwable</span> <span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getErrorCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 其它异常</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultExceptionHolder</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionHolder</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">int</span> statusCode<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">DefaultExceptionHolder</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>throwable <span class="token operator">=</span> throwable<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">DefaultExceptionHolder</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">,</span> <span class="token keyword">int</span> statusCode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>throwable <span class="token operator">=</span> throwable<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>statusCode <span class="token operator">=</span> statusCode<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">Throwable</span> <span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>throwable<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getErrorCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> statusCode<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * zuul 生命周期异常</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ZuulExceptionHolder</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionHolder</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ZuulException</span> exception<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">ZuulExceptionHolder</span><span class="token punctuation">(</span><span class="token class-name">ZuulException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>exception <span class="token operator">=</span> exception<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">Throwable</span> <span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exception<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exception<span class="token punctuation">.</span>nStatusCode<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getErrorCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exception<span class="token punctuation">.</span>errorCause<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hystrix和ribbon时间" tabindex="-1"><a class="header-anchor" href="#hystrix和ribbon时间"><span>hystrix和ribbon时间</span></a></h3><p>Ribbon超时时间</p><figure><img src="http://47.101.155.205/image-20231113141016743.png" alt="image-20231113141016743" tabindex="0" loading="lazy"><figcaption>image-20231113141016743</figcaption></figure><p>默认全局时间：<code>ribbonTimeout = (ribbon.ReadTimeout + ribbon.ConnectTimeout) * (1) * (1+1)</code></p><p><code>ribbon.ReadTimeout + ribbon.ConnectTimeout</code> 表示单次 ribbon请求的最大时间， 默认2000 ms。</p><p><code>ribbon.MaxAutoRetries</code> 表示开启重试机制的次数，默认 0 次。</p><p><code>ribbon.MaxAutoRetriesNextServer</code> 表示最大自动重试下一个服务器，默认一次。<strong>作用是什么？</strong></p><p>Hystrix超时时间</p><figure><img src="http://47.101.155.205/image-20231113141217463.png" alt="image-20231113141217463" tabindex="0" loading="lazy"><figcaption>image-20231113141217463</figcaption></figure><p>配置文件</p><figure><img src="http://47.101.155.205/image-20231113141237886.png" alt="image-20231113141237886" tabindex="0" loading="lazy"><figcaption>image-20231113141237886</figcaption></figure><p>调用过程</p><figure><img src="http://47.101.155.205/image-20231113142602157.png" alt="image-20231113142602157" tabindex="0" loading="lazy"><figcaption>image-20231113142602157</figcaption></figure><h3 id="enablezuulserver作用" tabindex="-1"><a class="header-anchor" href="#enablezuulserver作用"><span>@EnableZuulServer作用</span></a></h3><p>将应用程序设置为没有任何内置反向代理特性的通用Zuul服务器。到Zuul服务器的路由可以通过ZuulProperties配置(默认情况下没有)</p><h3 id="enablezuulproxy作用" tabindex="-1"><a class="header-anchor" href="#enablezuulproxy作用"><span>@EnableZuulProxy作用</span></a></h3><p>设置一个Zuul服务器端点，并在其中安装一些反向代理过滤器，这样它就可以将请求转发到后端服务器。后端可以通过配置手工注册，也可以通过DiscoveryClient注册。</p><ol><li>ServiceRouteMapper</li><li>DiscoveryClientRouteLocator</li><li>HasFeatures</li><li>HttpClientConfiguration(Import) <ol><li>ApacheHttpClientConnectionManagerFactory</li><li>HttpClientBuilder</li><li>ApacheHttpClientFactory</li></ol></li><li>RibbonCommandFactoryConfiguration.HttpClientRibbonConfiguration.class(Import) <ol><li>RibbonCommandFactory</li></ol></li><li>PreDecorationFilter</li><li>RibbonRoutingFilter</li><li>SimpleHostRoutingFilter</li></ol><p><strong>配置 forward:/uri 无法正常处理请求。</strong></p><h3 id="zuul配置" tabindex="-1"><a class="header-anchor" href="#zuul配置"><span>zuul配置</span></a></h3><div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">zuul</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">SendErrorFilter</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">error</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">disable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 禁用 error 类型的 SendErrorFilter 过滤器,默认注册即启用</span></span>
<span class="line">  <span class="token key atrule">ignoredServices</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><figure><img src="http://47.101.155.205/image-20250708200558395.png" alt="image-20250708200558395" tabindex="0" loading="lazy"><figcaption>image-20250708200558395</figcaption></figure><h2 id="zuul通过eureka阻塞问题" tabindex="-1"><a class="header-anchor" href="#zuul通过eureka阻塞问题"><span>zuul通过eureka阻塞问题</span></a></h2><p>route结合eureka发现服务，服务信息是通过域名注册，无法识别域名造成异常。</p><figure><img src="http://47.101.155.205/image-20240930135955380.png" alt="image-20240930135955380" tabindex="0" loading="lazy"><figcaption>image-20240930135955380</figcaption></figure><p>代码逻辑导致线程的condition调用await方法，线程阻塞了。</p><h2 id="zuul-自动配置" tabindex="-1"><a class="header-anchor" href="#zuul-自动配置"><span>zuul-自动配置</span></a></h2><h3 id="ribboncommandfactoryconfiguration" tabindex="-1"><a class="header-anchor" href="#ribboncommandfactoryconfiguration"><span>RibbonCommandFactoryConfiguration</span></a></h3><p>根据配置或加载的类，决定使用哪个 <code>RibbonCommandFactory</code> 工厂实现。</p><p><strong>工厂用于创建 RibbonCommand 对象，extends HystrixExecutable&lt;ClientHttpResponse&gt;。</strong></p><ol><li>RestClientRibbonCommandFactory：<code>ribbon.restclient.enabled=true</code>。</li><li>OkHttpRibbonCommandFactory：<code>ribbon.okhttp.enabled=true</code>，且存在 <code>okhttp3.OkHttpClient</code> 客户端类。</li><li>HttpClientRibbonCommandFactory：默认，<code>ribbon.httpclient.enabled=false</code> 可关闭默认。</li></ol><figure><img src="http://47.101.155.205/image-20250705215445199.png" alt="image-20250705215445199" tabindex="0" loading="lazy"><figcaption>image-20250705215445199</figcaption></figure><p><code>HttpClientRibbonCommandFactory</code> 通过 netflix-ribbon的 <code>SpringClientFactory</code>来创建 <code>RibbonLoadBalancingHttpClient</code>。</p><h2 id="下线服务功能" tabindex="-1"><a class="header-anchor" href="#下线服务功能"><span>下线服务功能</span></a></h2><p>通过重写路由规则</p><p>1、参考默认 <code>ZoneAvoidanceRule</code> 路由逻辑，自定义一个 <code>IRule</code> 实现，来控制服务的下线 <code>CustomZoneAvoidanceRule</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomZoneAvoidanceRule</span> <span class="token keyword">extends</span> <span class="token class-name">ZoneAvoidanceRule</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">CustomZoneAvoidanceRule</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 通过定时任务添加下线的服务器</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token constant">DOWN_SERVER_IPS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> isUseIpAddr <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hostIpMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">CustomZoneAvoidanceRule</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 调用父类构造方法</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">CompositePredicate</span> compositePredicate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> clientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ZoneAvoidancePredicate</span> zonePredicate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZoneAvoidancePredicate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">AvailabilityPredicate</span> availabilityPredicate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AvailabilityPredicate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        compositePredicate <span class="token operator">=</span> <span class="token function">createCompositePredicate</span><span class="token punctuation">(</span>zonePredicate<span class="token punctuation">,</span> availabilityPredicate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        isUseIpAddr <span class="token operator">=</span> clientConfig<span class="token punctuation">.</span><span class="token function">getPropertyAsBoolean</span><span class="token punctuation">(</span><span class="token class-name">CommonClientConfigKey<span class="token punctuation">.</span>UseIPAddrForServer</span><span class="token punctuation">,</span> <span class="token class-name">DefaultClientConfigImpl</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_USEIPADDRESS_FOR_SERVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">CompositePredicate</span> <span class="token function">createCompositePredicate</span><span class="token punctuation">(</span><span class="token class-name">ZoneAvoidancePredicate</span> p1<span class="token punctuation">,</span> <span class="token class-name">AvailabilityPredicate</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">CompositePredicate</span><span class="token punctuation">.</span><span class="token function">withPredicates</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> <span class="token function">filterDownIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">addFallbackPredicate</span><span class="token punctuation">(</span><span class="token function">filterDownIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3个组合后没有可用 Server,优先通过这个过滤可用 Server。发现可用则用这个Server</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">addFallbackPredicate</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">addFallbackPredicate</span><span class="token punctuation">(</span><span class="token class-name">AbstractServerPredicate</span><span class="token punctuation">.</span><span class="token function">alwaysTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/**</span>
<span class="line">     * 重写获取断言的方法</span>
<span class="line">     * <span class="token keyword">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">AbstractServerPredicate</span> <span class="token function">getPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> compositePredicate<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 根据服务器 ip 筛选下线的 Server</span>
<span class="line">     * <span class="token keyword">@return</span> true 匹配</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AbstractServerPredicate</span> <span class="token function">filterDownIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AbstractServerPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">PredicateKey</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DOWN_SERVER_IPS</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">String</span> ip<span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isUseIpAddr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// zuul 未使用ip</span></span>
<span class="line">                        ip <span class="token operator">=</span> hostIpMapping<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                            <span class="token comment">// 解析主机名</span></span>
<span class="line">                            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                                <span class="token class-name">InetAddress</span> address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                                ip <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;unknown host: {}&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                                ip <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">                            <span class="token punctuation">}</span></span>
<span class="line">                            hostIpMapping<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                        ip <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token comment">// ip 匹配</span></span>
<span class="line">                    <span class="token class-name">String</span> currIp <span class="token operator">=</span> ip<span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token constant">DOWN_SERVER_IPS</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>downIp <span class="token operator">-&gt;</span> downIp<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currIp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;downServer: {}&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token keyword">return</span> flag<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、定义一个 server 需要的注解类 <code>RibbonLoadBalancerConfiguration</code>，创建自定义的 IRule Bean：</p><p><strong>注意，可以通过这个类不和启动同包，不让其自动注册。</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">RibbonClientConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonLoadBalancerConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">ribbonRule</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">CustomZoneAvoidanceRule</span> rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomZoneAvoidanceRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        rule<span class="token punctuation">.</span><span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> rule<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、定义 Spring 为所有的服务添加这个自定义的注解类，及定时任务从文件获取下线服务的ip</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonConfig</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">RibbonConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">RibbonClientSpecification</span> <span class="token function">ribbonClientSpecification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RibbonClientSpecification</span><span class="token punctuation">(</span><span class="token string">&quot;default.loadBalancer&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">RibbonLoadBalancerConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">CustomErrorFilter</span> customErrorFilter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomErrorFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 初始化线程开始刷新文件内容</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span><span class="token class-name">ApplicationReadyEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initTaskFlashData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">ScheduledThreadPoolExecutor</span> scheduledThreadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        scheduledThreadPoolExecutor<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token function">loadDownIpRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;thread flash down ip start.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> os <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;os.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;system: {}&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>os <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            isWindow <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;win&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> lastModifyTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DOWN_IP_FILE_PATH</span> <span class="token operator">=</span> <span class="token string">&quot;./configuration/downIp.txt&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">WINDOWS_DOWN_IP_FILE_PATH</span> <span class="token operator">=</span> <span class="token string">&quot;configuration\\\\downIp.txt&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> isWindow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 注意这里不能出现异常，否则这个任务就不执行了</span>
<span class="line">     * <span class="token keyword">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Runnable</span> <span class="token function">loadDownIpRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 超时有效期删除配置</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CustomZoneAvoidanceRule</span><span class="token punctuation">.</span><span class="token constant">DOWN_SERVER_IPS</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastModifyTime<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">CustomZoneAvoidanceRule</span><span class="token punctuation">.</span><span class="token constant">DOWN_SERVER_IPS</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>isWindow <span class="token operator">?</span> <span class="token constant">WINDOWS_DOWN_IP_FILE_PATH</span> <span class="token operator">:</span> <span class="token constant">DOWN_IP_FILE_PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 文件不存在清空</span></span>
<span class="line">                <span class="token class-name">CustomZoneAvoidanceRule</span><span class="token punctuation">.</span><span class="token constant">DOWN_SERVER_IPS</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 这里是一直累加</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> lastModifyTime<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">String</span> line<span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                            temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                        <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token class-name">CustomZoneAvoidanceRule</span><span class="token punctuation">.</span><span class="token constant">DOWN_SERVER_IPS</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>temp<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token class-name">CustomZoneAvoidanceRule</span><span class="token punctuation">.</span><span class="token constant">DOWN_SERVER_IPS</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;downServerIp is flashed. [{}]&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    lastModifyTime <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;FileNotFoundException: &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;IOException: &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="openfeign" tabindex="-1"><a class="header-anchor" href="#openfeign"><span>openfeign</span></a></h2><h3 id="feignautoconfiguration自动配置" tabindex="-1"><a class="header-anchor" href="#feignautoconfiguration自动配置"><span>FeignAutoConfiguration自动配置</span></a></h3><div class="language-java" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">FeignContext</span> <span class="token function">feignContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">FeignContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FeignContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	context<span class="token punctuation">.</span><span class="token function">setConfigurations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> context<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="netflix-ribbon" tabindex="-1"><a class="header-anchor" href="#netflix-ribbon"><span>netflix-ribbon</span></a></h2><p><strong>spring-cloud-netflix-ribbon</strong></p><p>覆盖 Service 默认使用的 Bean 策略方式：</p><ol><li>创建 RibbonClientSpecification Bean，通过 name(确定是哪个 Service 需要)、configuration(激活的注解类集合)；</li><li>@RibbonClients(defaultConfiguration = {EurekaRibbonClientConfiguration.class}) 注解指定需要的注解类。参考 RibbonEurekaAutoConfiguration。</li></ol><h3 id="ribbonautoconfiguration" tabindex="-1"><a class="header-anchor" href="#ribbonautoconfiguration"><span>RibbonAutoConfiguration</span></a></h3><p><code>spring-cloud-netflix-ribbon</code> 的自动配置类。</p><p>在 <code>EurekaClientAutoConfiguration</code> 配置类之后；在 <code>LoadBalancerAutoConfiguration</code>、<code>AsyncLoadBalancerAutoConfiguration</code> 之前。</p><p>激活 <code>RibbonEagerLoadProperties(ribbon.eager-load)</code>、<code>ServerIntrospectorProperties(ribbon)</code> 配置类。</p><p><strong>Bean 的注入：</strong></p><ol><li>HasFeatures：actuator 端点有用到。</li><li>SpringClientFactory：客户端工厂。</li><li>LoadBalancerClient：客户端负载均衡器，默认使用 <code>RibbonLoadBalancerClient</code>。</li><li>LoadBalancedRetryFactory：重试负载均衡工厂。</li><li>PropertiesFactory：配置工厂。</li><li>RibbonApplicationContextInitializer：<code>ribbon.eager-load.enabled=true</code> 配置更早激活 Ribbon 客户端。</li></ol><h4 id="ribbonclienthttprequestfactoryconfiguration" tabindex="-1"><a class="header-anchor" href="#ribbonclienthttprequestfactoryconfiguration"><span>RibbonClientHttpRequestFactoryConfiguration</span></a></h4><p><code>RibbonAutoConfiguration</code> 的静态内部类 <code>RibbonClientHttpRequestFactoryConfiguration</code>。</p><p>通过配置 <code>ribbon.http.client.enabled=true</code> 和 <code>ribbon.restclient.enabled</code> 使用特定的 <code>RibbonClientHttpRequestFactory</code> http 请求客户端工厂。</p><p>创建 <code>RestTemplate</code> 默认的 <code>RestTemplateCustomizer</code> 自定义器。</p><h4 id="springclientfactory" tabindex="-1"><a class="header-anchor" href="#springclientfactory"><span>SpringClientFactory</span></a></h4><p>继承 <code>spring-cloud-context</code> 中的 <code>NamedContextFactory</code>。</p><p><strong>API(简化泛型)</strong></p><ol><li>IClient getClient(String name, Class clientClass)：获取与 <code>name</code> 相关联的 <code>clientClass</code> 客户端。</li><li>ILoadBalancer getLoadBalancer(String name)：获取与 <code>name</code> 相关联的 <code>ILoadBalancer</code> 负载均衡器。</li><li>IClientConfig getClientConfig(String name)：获取与 <code>name</code> 相关联的 <code>IClientConfig</code> 客户端配置。</li></ol><p>上面获取对象底层方法一致，逻辑如下：</p><ol><li>每个 <code>service</code> 都有会有一个名为 <code>SpringClientFactory-name</code> 的 <code>AnnotationConfigApplicationContext</code>，context 的 parent 就是当前应用的context；</li><li>context 在创建时，自动添加 <code>PropertyPlaceholderAutoConfiguration</code>、<code>RibbonClientConfiguration</code>这两个注解类；</li><li>可以通过配置 <code>RibbonClientSpecification</code> Bean 为指定的 <code>service</code> 或所有的添加注解类。</li><li>刷新后，通过上下文获取对应的对象。 <ol><li><code>IClient</code>：默认 <code>RibbonLoadBalancingHttpClient</code>，通过 <code>RibbonClientConfiguration</code> Import <code>HttpClientRibbonConfiguration</code> 注解类创建。</li><li><code>ILoadBalancer</code>：默认 <code>ZoneAwareLoadBalancer</code>，通过 <code>RibbonClientConfiguration</code> 注解类创建。可以通过配置 <code>RibbonClientSpecification</code> Bean 中的注解类，引入自定义的 <code>ILoadBalancer</code>。</li><li><code>IClientConfig</code>：默认 <code>DefaultClientConfigImpl</code>，通过 <code>RibbonClientConfiguration</code> 注解类创建。</li></ol></li></ol><figure><img src="http://47.101.155.205/image-20250706153601205.png" alt="image-20250706153601205" tabindex="0" loading="lazy"><figcaption>image-20250706153601205</figcaption></figure><figure><img src="http://47.101.155.205/image-20250706153841597.png" alt="image-20250706153841597" tabindex="0" loading="lazy"><figcaption>image-20250706153841597</figcaption></figure><figure><img src="http://47.101.155.205/image-20250706155138408.png" alt="image-20250706155138408" tabindex="0" loading="lazy"><figcaption>image-20250706155138408</figcaption></figure><h3 id="httpclientribbonconfiguration" tabindex="-1"><a class="header-anchor" href="#httpclientribbonconfiguration"><span>HttpClientRibbonConfiguration</span></a></h3><h3 id="ribbonclientconfiguration" tabindex="-1"><a class="header-anchor" href="#ribbonclientconfiguration"><span>RibbonClientConfiguration</span></a></h3><p>为每个动态的 Service 都会引入这个注解类。该注解类可替换的 Bean ：</p><ol><li>IClientConfig：默认 DefaultClientConfigImpl。为客户端添加默认的配置，连接超时时间和读取超时时间设为1s。</li></ol><p><strong>Import HttpClientRibbonConfiguration 创建的 Bean:</strong></p><ul><li>AbstractLoadBalancerAwareClient：默认 RibbonLoadBalancingHttpClient 。<strong>执行 Http 请求的客户端</strong>。</li></ul><p>通过配置为指定的服务设置特点的实现类，支持的有(详见 <code>PropertiesFactory</code>)：</p><ol><li>ILoadBalancer；</li><li>IPing；</li><li>IRule；</li><li>ServerList；</li><li>ServerListFilter。</li></ol><p><strong>单独配置格式：serviceId.name.typeValue=class。typeValue表示前面类对应的属性值。</strong></p><h3 id="ribbonloadbalancinghttpclient" tabindex="-1"><a class="header-anchor" href="#ribbonloadbalancinghttpclient"><span>RibbonLoadBalancingHttpClient</span></a></h3><p>默认引用 apache CloseableHttpClient 抽象类的实现 <code>InternalHttpClient</code> 作为 Http 客户端。</p><figure><img src="http://47.101.155.205/image-20250707220713167.png" alt="image-20250707220713167" tabindex="0" loading="lazy"><figcaption>image-20250707220713167</figcaption></figure><h2 id="netflix-eureka-client" tabindex="-1"><a class="header-anchor" href="#netflix-eureka-client"><span>netflix-eureka-client</span></a></h2><h3 id="ribboneurekaautoconfiguration" tabindex="-1"><a class="header-anchor" href="#ribboneurekaautoconfiguration"><span>RibbonEurekaAutoConfiguration</span></a></h3><h2 id="ribbon-loadbalancer" tabindex="-1"><a class="header-anchor" href="#ribbon-loadbalancer"><span>ribbon-loadbalancer</span></a></h2><p><strong>com.netflix.ribbon:ribbon-loadbalancer</strong></p><h3 id="iloadbalancer" tabindex="-1"><a class="header-anchor" href="#iloadbalancer"><span>ILoadBalancer</span></a></h3><p>负载均衡接口。</p><h4 id="dynamicserverlistloadbalancer" tabindex="-1"><a class="header-anchor" href="#dynamicserverlistloadbalancer"><span>DynamicServerListLoadBalancer</span></a></h4><h4 id="zoneawareloadbalancer" tabindex="-1"><a class="header-anchor" href="#zoneawareloadbalancer"><span>ZoneAwareLoadBalancer</span></a></h4><p>DynamicServerListLoadBalancer 的子类。</p><h3 id="irule" tabindex="-1"><a class="header-anchor" href="#irule"><span>IRule</span></a></h3><p>定义负载均衡的规则接口。</p><h4 id="zoneavoidancerule" tabindex="-1"><a class="header-anchor" href="#zoneavoidancerule"><span>ZoneAvoidanceRule</span></a></h4><p><code>RibbonClientConfiguration</code> 配置的 IRule。</p><figure><img src="http://47.101.155.205/image-20250708215129999.png" alt="image-20250708215129999" tabindex="0" loading="lazy"><figcaption>image-20250708215129999</figcaption></figure><p><strong>路由服务的大体规则：</strong></p><figure><img src="http://47.101.155.205/image-20250708220154992.png" alt="image-20250708220154992" tabindex="0" loading="lazy"><figcaption>image-20250708220154992</figcaption></figure><h4 id="abstractserverpredicate" tabindex="-1"><a class="header-anchor" href="#abstractserverpredicate"><span>AbstractServerPredicate</span></a></h4><p><strong>使用 AbstractServerPredicate 的两个 ZoneAvoidancePredicate、AvailabilityPredicate 组合断言。</strong></p><figure><img src="http://47.101.155.205/image-20250708221053125.png" alt="image-20250708221053125" tabindex="0" loading="lazy"><figcaption>image-20250708221053125</figcaption></figure><p><strong>CompositePredicate 对象创建说明：</strong></p><figure><img src="http://47.101.155.205/image-20250708221851370.png" alt="image-20250708221851370" tabindex="0" loading="lazy"><figcaption>image-20250708221851370</figcaption></figure><figure><img src="http://47.101.155.205/image-20250708222657952.png" alt="image-20250708222657952" tabindex="0" loading="lazy"><figcaption>image-20250708222657952</figcaption></figure><h4 id="zoneavoidancepredicate" tabindex="-1"><a class="header-anchor" href="#zoneavoidancepredicate"><span>ZoneAvoidancePredicate</span></a></h4><p>ZoneAvoidancePredicate 断言 apply 匹配规则：</p><ol><li><code>niws.loadbalancer.zoneAvoidanceRule.enabled</code> 配置 false 则匹配；</li><li>Server 没有区域信息，则直接匹配；</li><li>断言中没有负载均衡器信息，则直接匹配；</li><li>负载均衡器的分区为1，则直接匹配；</li><li>存在多个分区，则判断分区是否在可用分区中。</li></ol><h4 id="availabilitypredicate" tabindex="-1"><a class="header-anchor" href="#availabilitypredicate"><span>AvailabilityPredicate</span></a></h4><p>AvailabilityPredicate 断言 apply 匹配规则：</p><ol><li>断言中没有负载均衡器信息，则直接匹配；</li><li>根据服务的使用情况，判断是否匹配。</li></ol><h3 id="serverlistupdater" tabindex="-1"><a class="header-anchor" href="#serverlistupdater"><span>ServerListUpdater</span></a></h3><p>有两个实现：<code>EurekaNotificationServerListUpdater</code> 和 <code>PollingServerListUpdater</code>，用于动态拉取可用服务信息Server。<code>spring-cloud-netflix-ribbon</code> 默认使用 <code>PollingServerListUpdater</code>。可以通过指定 Bean 来覆盖默认操作。</p><h4 id="pollingserverlistupdater" tabindex="-1"><a class="header-anchor" href="#pollingserverlistupdater"><span>PollingServerListUpdater</span></a></h4><p><code>DynamicServerListLoadBalancer</code> 使用 <code>PollingServerListUpdater</code> 逻辑：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token class-name">ServerListUpdater</span> serverListUpdater<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ServerListUpdater<span class="token punctuation">.</span>UpdateAction</span> updateAction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerListUpdater<span class="token punctuation">.</span>UpdateAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">updateListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@VisibleForTesting</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> servers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>serverListImpl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ServerList 获取服务器</span></span>
<span class="line">        servers <span class="token operator">=</span> serverListImpl<span class="token punctuation">.</span><span class="token function">getUpdatedListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;List of Servers for {} obtained from Discovery client: {}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> servers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">// ServerListFilter 进行过滤</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>filter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            servers <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">getFilteredListOfServers</span><span class="token punctuation">(</span>servers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Filtered List of Servers for {} obtained from Discovery client: {}&quot;</span><span class="token punctuation">,</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> servers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 更新所有的 Server</span></span>
<span class="line">    <span class="token function">updateAllServerList</span><span class="token punctuation">(</span>servers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 触发逻辑, 线程池异步调用。</span></span>
<span class="line"><span class="token comment">// 虽然每个 Service 都会创建Bean，但是都公用这个线程池</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enableAndInitLearnNewServersFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Using serverListUpdater {}&quot;</span><span class="token punctuation">,</span> serverListUpdater<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 固定延迟线程池启动</span></span>
<span class="line">    <span class="token comment">// 具体调用逻辑为 DynamicServerListLoadBalancer.updateListOfServers()</span></span>
<span class="line">    serverListUpdater<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>updateAction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://47.101.155.205/image-20250707195332784.png" alt="image-20250707195332784" tabindex="0" loading="lazy"><figcaption>image-20250707195332784</figcaption></figure><h3 id="serverlist" tabindex="-1"><a class="header-anchor" href="#serverlist"><span>ServerList</span></a></h3><p>定义发现服务端的接口。</p><p><code>spring-cloud-netflix-ribbon</code> 的 <code>RibbonClientConfiguration</code> 默认使用 <code>ConfigurationBasedServerList</code>。可以通过指定 Bean 来覆盖默认操作。</p><p>由于使用了<code>spring-cloud-netflix-eureka-client</code> 的 <code>EurekaRibbonClientConfiguration</code> ，这里的 Bean 是 <code>DomainExtractingServerList</code>。</p><p><strong>因为 RibbonAutoConfiguration 在创建 SpringClientFactory Bean 时，Spring 上下文中已经有 2个 RibbonClientSpecification Bean。</strong></p><ul><li><code>name=default.org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration</code>，<code>class=[]</code></li><li><code>name=default.org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration</code>，<code>class=org.springframework.cloud.netflix.ribbon.eureka.EurekaRibbonClientConfiguration</code></li></ul><p><strong>通过注解 @RibbonClients(defaultConfiguration = EurekaRibbonClientConfiguration.class) 里面的 Import实现了这个功能。</strong></p><h4 id="domainextractingserverlist" tabindex="-1"><a class="header-anchor" href="#domainextractingserverlist"><span>DomainExtractingServerList</span></a></h4><p><code>getUpdatedListOfServers</code>：将 <code>DiscoveryEnabledNIWSServerList</code> 获取的 <code>DiscoveryEnabledServer</code> 转换成 <code>DomainExtractingServer</code>。</p><figure><img src="http://47.101.155.205/image-20250707210619590.png" alt="image-20250707210619590" tabindex="0" loading="lazy"><figcaption>image-20250707210619590</figcaption></figure><p>封装 Server 过程：</p><figure><img src="http://47.101.155.205/image-20250707211749914.png" alt="image-20250707211749914" tabindex="0" loading="lazy"><figcaption>image-20250707211749914</figcaption></figure><h4 id="configurationbasedserverlist" tabindex="-1"><a class="header-anchor" href="#configurationbasedserverlist"><span>ConfigurationBasedServerList</span></a></h4><h3 id="serverlistfilter" tabindex="-1"><a class="header-anchor" href="#serverlistfilter"><span>ServerListFilter</span></a></h3><p>对已经设置或动态获取到的服务端进行筛选过滤。</p><p><code>spring-cloud-netflix-ribbon</code> 默认使用 <code>ZonePreferenceServerListFilter</code>。可以通过指定 Bean 来覆盖默认操作。</p><h4 id="zonepreferenceserverlistfilter" tabindex="-1"><a class="header-anchor" href="#zonepreferenceserverlistfilter"><span>ZonePreferenceServerListFilter</span></a></h4><figure><img src="http://47.101.155.205/image-20250708213645718.png" alt="image-20250708213645718" tabindex="0" loading="lazy"><figcaption>image-20250708213645718</figcaption></figure>`,194)]))}const i=s(e,[["render",l],["__file","spring-cloud-starter-netflix-zuul.html.vue"]]),u=JSON.parse('{"path":"/springcloud/gateway/spring-cloud-starter-netflix-zuul.html","title":"zuul","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"zuul-1.x介绍","slug":"zuul-1-x介绍","link":"#zuul-1-x介绍","children":[]},{"level":2,"title":"使用介绍","slug":"使用介绍","link":"#使用介绍","children":[{"level":3,"title":"过滤器","slug":"过滤器","link":"#过滤器","children":[]},{"level":3,"title":"hystrix和ribbon时间","slug":"hystrix和ribbon时间","link":"#hystrix和ribbon时间","children":[]},{"level":3,"title":"@EnableZuulServer作用","slug":"enablezuulserver作用","link":"#enablezuulserver作用","children":[]},{"level":3,"title":"@EnableZuulProxy作用","slug":"enablezuulproxy作用","link":"#enablezuulproxy作用","children":[]},{"level":3,"title":"zuul配置","slug":"zuul配置","link":"#zuul配置","children":[]}]},{"level":2,"title":"zuul通过eureka阻塞问题","slug":"zuul通过eureka阻塞问题","link":"#zuul通过eureka阻塞问题","children":[]},{"level":2,"title":"zuul-自动配置","slug":"zuul-自动配置","link":"#zuul-自动配置","children":[{"level":3,"title":"RibbonCommandFactoryConfiguration","slug":"ribboncommandfactoryconfiguration","link":"#ribboncommandfactoryconfiguration","children":[]}]},{"level":2,"title":"下线服务功能","slug":"下线服务功能","link":"#下线服务功能","children":[]},{"level":2,"title":"openfeign","slug":"openfeign","link":"#openfeign","children":[{"level":3,"title":"FeignAutoConfiguration自动配置","slug":"feignautoconfiguration自动配置","link":"#feignautoconfiguration自动配置","children":[]}]},{"level":2,"title":"netflix-ribbon","slug":"netflix-ribbon","link":"#netflix-ribbon","children":[{"level":3,"title":"RibbonAutoConfiguration","slug":"ribbonautoconfiguration","link":"#ribbonautoconfiguration","children":[]},{"level":3,"title":"HttpClientRibbonConfiguration","slug":"httpclientribbonconfiguration","link":"#httpclientribbonconfiguration","children":[]},{"level":3,"title":"RibbonClientConfiguration","slug":"ribbonclientconfiguration","link":"#ribbonclientconfiguration","children":[]},{"level":3,"title":"RibbonLoadBalancingHttpClient","slug":"ribbonloadbalancinghttpclient","link":"#ribbonloadbalancinghttpclient","children":[]}]},{"level":2,"title":"netflix-eureka-client","slug":"netflix-eureka-client","link":"#netflix-eureka-client","children":[{"level":3,"title":"RibbonEurekaAutoConfiguration","slug":"ribboneurekaautoconfiguration","link":"#ribboneurekaautoconfiguration","children":[]}]},{"level":2,"title":"ribbon-loadbalancer","slug":"ribbon-loadbalancer","link":"#ribbon-loadbalancer","children":[{"level":3,"title":"ILoadBalancer","slug":"iloadbalancer","link":"#iloadbalancer","children":[]},{"level":3,"title":"IRule","slug":"irule","link":"#irule","children":[]},{"level":3,"title":"ServerListUpdater","slug":"serverlistupdater","link":"#serverlistupdater","children":[]},{"level":3,"title":"ServerList","slug":"serverlist","link":"#serverlist","children":[]},{"level":3,"title":"ServerListFilter","slug":"serverlistfilter","link":"#serverlistfilter","children":[]}]}],"git":{"updatedTime":1752197900000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":5,"url":"https://github.com/oycm"},{"name":"ouyangcm","username":"ouyangcm","email":"mingorg@163.com","commits":7,"url":"https://github.com/ouyangcm"}]},"filePathRelative":"springcloud/gateway/spring-cloud-starter-netflix-zuul.md"}');export{i as comp,u as data};
