import{_ as s,c as a,e,o as t}from"./app-DO9Fsueg.js";const p={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h1><p>具有函数优先的轻量级，解释型或即时编译型的编程语言。JavaScript基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式、声明式、函数编编程范式。</p><p>ECMAScript是JavaScript的规范，JavaScript是ECMAScript的实现。</p><h2 id="使用javascript" tabindex="-1"><a class="header-anchor" href="#使用javascript"><span>使用JavaScript</span></a></h2><p>JavaScript的执行单位是行，也就是一行一行执行。语句以分号(;)结尾。</p><div class="language-html" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">	<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="引用javascript" tabindex="-1"><a class="header-anchor" href="#引用javascript"><span>引用JavaScript</span></a></h3><ol><li>嵌入到html的中，在html的&lt;body&gt;标签中写&lt;script&gt;标签；</li><li>引入本地独立的js文件，在body中添加script标签，属性为：type=&quot;text/javascript&quot;, src=&quot;js文件的地址&quot;；</li><li>引入网络的js文件，在header标签中添加script标签，属性为：scr=&quot;js网络地址&quot;</li></ol><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h3><p>注释：对代码的作用进行解释说明，不会被解释器执行。</p><p>单行注释：//</p><p>多行注释：/* */</p><h3 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符"><span>标识符</span></a></h3><p>标识符由字母、美元符号、下划线和数字组成，但是数字不能作为开头。</p><p>JavaScript的语法关键字不能作为标识符</p><figure><img src="http://47.101.155.205/image-20240916084907247.png" alt="image-20240916084907247" tabindex="0" loading="lazy"><figcaption>image-20240916084907247</figcaption></figure><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h3><p>变量提升：JavaScript先解析代码，获取所有被声明的变量，然后再一行一行地运行。这样对变量的声明语句会到代码的头部。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">=&gt;</span></span>
<span class="line"><span class="token keyword">var</span> num<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h4><p>JavaScript有6种数据类型：数值、字符串、布尔值、undefined、null、对象。ES6新增Symbol和BigInt类型。</p><h4 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h4><p>数值、字符串、布尔值。</p><h4 id="合成类型-复合类型" tabindex="-1"><a class="header-anchor" href="#合成类型-复合类型"><span>合成类型(复合类型)</span></a></h4><p>类似java的引用类型。</p><p>对象：由其他基本数据类型组合而成。</p><p>对象的内容是由键值对组成的，值可以是任何类型，例如：数字、字符串、对象、数组，也可以是函数，在对象的函数被称为方法；</p><h5 id="math对象" tabindex="-1"><a class="header-anchor" href="#math对象"><span>Math对象</span></a></h5><p>Math是JavaScript的原生对象，进行数学运算。</p><ol><li>Math.abs(int)：取int的绝对值；</li><li>Math.max(...)：多个值中返回最大值；</li><li>Math.min(...)：多个值中返回最小值；</li><li>Math.floor(int)：int值向下取整；</li><li>Math.ceil(int)：int值向上取整；</li><li>Math.random()：生成0-1之间的随机数(包含0，不包含1)；</li></ol><h5 id="date对象" tabindex="-1"><a class="header-anchor" href="#date对象"><span>Date对象</span></a></h5><p>Date对象是JavaScript原生的时间库。以1970年1月一日00:00:00作为时间的零点，可以表示的时间范围是前后各1亿天(单位毫秒)。</p><p>Date = Date.now();获取时间戳。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>Date对象的方法</p><ol><li>Date.getTime()：</li><li>Date.getDate()：返回当前是几号</li><li>Date.getDay()：返回星期几，星期日为0，星期一为1，以此类推；</li><li>Date.getYear()：返回距离1990的年数；</li><li>Date.getFullYear()：返回四位的年份；</li><li>Date.getMonth()：返回月份(0表示1月，11表示12月)；</li><li>Date.getHours()：返回小时(0-23)；</li><li>Date.getMilliseconds()：返回毫秒(0-999)；</li><li>Date.getMinutes()：返回分钟(0-59)；</li><li>Date.getSeconds()：返回秒(0-59)；</li></ol><h4 id="typeof-变量类型" tabindex="-1"><a class="header-anchor" href="#typeof-变量类型"><span>typeof(变量类型)</span></a></h4><ol><li>数值-&gt;number；</li><li>字符串-&gt;string；</li><li>布尔值-&gt;boolean；</li><li>对象-&gt;object：数组也会返回object；</li><li>typeof null：object；</li><li>typeof undefined：undefined。</li></ol><h4 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h4><h5 id="定义和遍历数组" tabindex="-1"><a class="header-anchor" href="#定义和遍历数组"><span>定义和遍历数组</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// for循环遍历数组</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// for in循环</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// while循环</span></span>
<span class="line">int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="数组方法" tabindex="-1"><a class="header-anchor" href="#数组方法"><span>数组方法</span></a></h5><ol><li>Array.isArray(arr)：判断arr是否为数组；</li><li>arr.push(obj)：往arr数组尾部中添加元素obj；</li><li>arr.pop()：删除arr数组最后一个元素；</li><li>arr.shfit()：删除arr数组的第一个元素；</li><li>arr.unshift(obj)：往arr数组的第一个元素添加元素；</li><li>arr.join(...)：默认,分割拼接数组元素；传参则以参数分割拼接数组成字符串；</li><li>arr.concat(...)：合并多个数组，返回一个新的数组；</li><li>arr.reverse()：反转数组，改变原数组；</li><li>arr.indexOf(obj, int)：返回obj在数组arr中第一次出现的下标，没有返回-1；int可选，表示从那开始搜索；</li></ol><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h3><h4 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h4><ol><li>加：+；</li><li>减：-；</li><li>乘：*；</li><li>除：/；</li><li>取余：%；</li><li>自增：++变量/变量++；</li><li>自减：--变量/变量--；</li></ol><h4 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span></span>
<span class="line">x <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></span>
<span class="line">x <span class="token operator">+=</span> y<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h4><ol><li>&gt;</li><li>&lt;</li><li>&gt;=</li><li>&lt;=</li><li>==：相等运算符；</li><li>===：严格相等运算符(比较值和类型)；</li><li>!=：不相等运算符；</li><li>!==：严格不相等运算符；</li></ol><h4 id="布尔运算符" tabindex="-1"><a class="header-anchor" href="#布尔运算符"><span>布尔运算符</span></a></h4><ol><li>!：取反，取反为true(null、undefined、0、空字符串、NaN、false)；</li><li>&amp;&amp;：逻辑与；</li><li>||：逻辑或；</li></ol><h4 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符"><span>三元运算符</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;true表达式结果&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;false表达式结果&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="流程语句" tabindex="-1"><a class="header-anchor" href="#流程语句"><span>流程语句</span></a></h3><h4 id="条件语句-if" tabindex="-1"><a class="header-anchor" href="#条件语句-if"><span>条件语句-if</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>布尔值<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔值<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   </span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔值<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   </span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>布尔值<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="条件语句-switch" tabindex="-1"><a class="header-anchor" href="#条件语句-switch"><span>条件语句-switch</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>变量<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&quot;配置值1&quot;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token operator">...</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&quot;配置值2&quot;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token operator">...</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">        <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="循环语句-for" tabindex="-1"><a class="header-anchor" href="#循环语句-for"><span>循环语句-for</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式<span class="token punctuation">;</span> 循环是否执行判断条件<span class="token punctuation">;</span> 迭代表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 循环代码</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// break; 退出结束循环</span></span>
<span class="line">    <span class="token comment">// continue; 提前结束这一次循环</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="循环语句-while" tabindex="-1"><a class="header-anchor" href="#循环语句-while"><span>循环语句-while</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 循环代码</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="数据类型-1" tabindex="-1"><a class="header-anchor" href="#数据类型-1"><span>数据类型</span></a></h3><h4 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h4><p>可以用&quot;&quot;|&#39;&#39;定义字符串，双引号和单引号在单引号中使用需要转义。</p><ol><li>charAt(int)：截取字符串对应下标索引的值，索引从0开始，为-1或大于等于字符串长度返回空字符串；</li><li>concat(str...)：...(可以支持多个参数)拼接字符串；</li><li>substring(int1, int2)：字符串开始位置索引int1到字符串结束位置int2，不包括int2的位置；int2没有默认长度；int1 &gt; int2会自动转换位置；</li><li>substr(int1, int2)：从索引位置int1的位置截取int2位数字符串，int1为复制代表从后面开始；</li><li>indexOf(str, int)：字符串str在字符串中第一次出现的位置，没有返回-1；int可选，从哪里开始；</li><li>trim()：去除前后空格；trimEnd();trimStart()ES6新增；</li><li>split(str, int)：按照str的规则分割字符串得到字符串数组，空字符串得到单个字符串的数组；int可选，表示返回的数组元素上限；</li></ol><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h3><p>定义函数的语法：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token parameter">形参</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> 	</span>
<span class="line">    <span class="token comment">// 不返回值结束(代码执行到最后一行)</span></span>
<span class="line">    <span class="token comment">// return result;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>函数的提升，script标签中定义在后面的函数，在编译时，函数的行数会被提前；</p><h2 id="dom" tabindex="-1"><a class="header-anchor" href="#dom"><span>Dom</span></a></h2><p>Dom是JavaScript操作网页的接口，称为文档对象模型(Document Object Model)。它的作用是将网页转为一个JavaScript对象，从而可以用脚本进行各种操作(对元素的增删)。</p><p>浏览器会根据Dom模型，将结构化文档html解析成一系列的节点，再由这些节点组成一个树状结构(Dom Tree)。所有的节点和最终的树状结构，都有规范的对外接口。</p><p>Dom只是一个接口规范，可以用各种语言实现。Dom不是JavaScript语法的一部分，当时Dom操作是JavaScript最常见的任务，离开了Dom，JavaScript就无法控制网页。JavaScript也是最常用于Dom操作的语言。</p><h3 id="节点" tabindex="-1"><a class="header-anchor" href="#节点"><span>节点</span></a></h3><p>Dom的最小组成单元叫做节点。Dom树就是由各种不同类型的节点组成，每个节点可以看作是文档树的一片叶子。</p><p>7种节点类型：</p><ol><li>Document：整个文档树的顶层节点；</li><li>DocementType：doctype标签；</li><li>Element：网页的各种html标签；</li><li>Attribute：网页元素的属性(比如class=&quot;box&quot;)；</li><li>Text：标签之间或标签包含的文本；</li><li>Comment：注释；</li><li>DocumentFragment：文档的片段；</li></ol><h3 id="节点树" tabindex="-1"><a class="header-anchor" href="#节点树"><span>节点树</span></a></h3><p>一个文档的所有节点，按照所在的层级，可以抽象成一种树状结构，这种树状结构就是Dom树。它只有一个顶层节点，下一层都是顶层节点的子节点，然后子节点又有自己的子节点，这样衍生出一个金字塔结构，倒过来就是就像一棵树。</p><p>浏览器原生提供document节点，代表整个文档。</p><p>除了根节点，其他节点都有三种层级关系：</p><ol><li>父节点关系(parentNode)：直接的那个上级节点；</li><li>子节点关系(childNodes)：直接的下级节点；</li><li>同级节点关系(sibling)：拥有同一个父级节点的节点。</li></ol><p>不同节点的nodeType属性值和对应常量关系如下：</p><ol><li>文档节点(document)：9，对应常量Node.DOCUMENT_NODE；</li><li>元素节点(element)：1，对应常量Node.ELEMENT_NODE；</li><li>属性节点(attr)：2，对应常量Node.ATTRIBUTE_NODE；</li><li>文本节点(text)：3，对应常量Node.TEXT_NODE；</li><li>文档片段节点(DocumentFragment)：11，对应常量Node.DOCUMENT_FRAGMENT_NODE；</li></ol><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">document<span class="token punctuation">.</span>nodeType <span class="token operator">==</span> Node<span class="token punctuation">.</span><span class="token constant">DOCUMENT_NODE</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="获取element元素" tabindex="-1"><a class="header-anchor" href="#获取element元素"><span>获取Element元素</span></a></h3><ol><li>document.getElementsByTagName(&quot;标签名&quot;)：获取指定类型的标签元素；</li><li>document.getElementsByClassName(&quot;class对应的名称&quot;)：获取指定class的标签元素；</li><li>document.getElementsByName(&quot;标签属性name对应的值&quot;)：获取标签name值为这个的标签元素；</li><li>document.getElementById(&quot;id&quot;)：获取标签id为这个的标签元素；</li><li>document.querySelector(&quot;css选择器入参&quot;)：获取匹配该参数的标签元素，多个节点满足，返回第一个；</li><li>document.querySelectAll(&quot;css选择器入参&quot;)：获取匹配该参数的所有标签元素；</li></ol><h3 id="创建element元素" tabindex="-1"><a class="header-anchor" href="#创建element元素"><span>创建Element元素</span></a></h3><ol><li>document.createElement(&quot;标签名称&quot;)：创建对应参数的标签元素；</li><li>document.createTextNode(&quot;文本内容&quot;)：生成文本节点；</li><li>document.createElement(&quot;标签名称&quot;).appendChild(document.createTextNode(&quot;文本内容&quot;))：给标签添加文本内容；</li><li>document.createAttribute(&quot;属性名称&quot;)：创建属性；设置标签元素.setAttributeNode(已创建属性)；</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> pText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&quot;p标签内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">p<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>pText<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">id<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;zs&quot;</span><span class="token punctuation">;</span></span>
<span class="line">p<span class="token punctuation">.</span><span class="token function">setAttributeNode</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// document?设置创建的标签元素</span></span>
<span class="line">document<span class="token operator">?.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="element对象属性" tabindex="-1"><a class="header-anchor" href="#element对象属性"><span>Element对象属性</span></a></h3><ol><li>element.id：标签的属性key为id的值，可以获取和修改；</li><li>className：标签的属性key为class的值，可以获取和修改；</li><li>classList.add(&quot;类选择器名称&quot;)：标签元素添加指定类选择器；</li><li>classList.remove(&quot;类选择器名称&quot;)：标签元素删除指定的类选择器；</li><li>classList.toggle(&quot;类选择器名称&quot;)：如果类选择器不存在则加入，否则删除；</li><li>classList.contains(&quot;类选择器名称&quot;)：返回true或false；</li><li>innerHtml：获取或修改标签元素的文本，可以识别html标签；</li><li>innerText：获取或修改标签元素的文本，只能识别字符串；</li></ol><h3 id="element获取元素位置" tabindex="-1"><a class="header-anchor" href="#element获取元素位置"><span>Element获取元素位置</span></a></h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>clientHeight</td><td>获取元素高度，包括padding部分，不包括border、margin</td></tr><tr><td>clientWidth</td><td>获取元素宽度，包括padding部分，不包括border、margin</td></tr><tr><td>scrollHeight</td><td>元素总高度，包括padding，不包括border、margin，包括溢出的不可见部分</td></tr><tr><td>scrollWidth</td><td>元素总宽度，包括padding，不包括border、margin，包括溢出的不可见部分</td></tr><tr><td>scrollLeft</td><td>元素的水平滚动条向右滚动的像素位置</td></tr><tr><td>scrollTop</td><td>元素的垂直滚动条向下滚动的像素位置</td></tr><tr><td>offsetHeight</td><td>元素的css垂直高度，包括本身高度、padding和border</td></tr><tr><td>offsetWidth</td><td>元素的css水平宽度，包括本身宽度、padding和border</td></tr><tr><td>offsetLeft</td><td>到定位父级左边界的间距</td></tr><tr><td>offsetTop</td><td>到定位父级上边界的间距</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 视口高度</span></span>
<span class="line">document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight</span>
<span class="line"><span class="token comment">//页面高度</span></span>
<span class="line">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 视口高度(包含溢出部分)</span></span>
<span class="line">document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight</span>
<span class="line"><span class="token comment">// 页面高度(包含溢出部分)</span></span>
<span class="line">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取滚动高度</span></span>
<span class="line">document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取元素的高度=本地高度+padding+border</span></span>
<span class="line">div<span class="token punctuation">.</span>offsetHeight</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取父级定位</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="css操作" tabindex="-1"><a class="header-anchor" href="#css操作"><span>css操作</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;style&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css样式代码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;style&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;width:200px;height:300px&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&quot;300px&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">&quot;width:200px;height:300px&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="html事件" tabindex="-1"><a class="header-anchor" href="#html事件"><span>html事件</span></a></h2><ol><li>html事件：htmo中写事件绑定JavaScript的函数；</li><li>dom0级事件：获取element元素，.事件设置Javascript函数，只能绑定一个事件；</li><li>dom2级事件：获取element元素，元素.addEventListener(&quot;事件类型&quot;, &quot;函数&quot;)，可以绑定多个事件；</li></ol><h3 id="event事件对象" tabindex="-1"><a class="header-anchor" href="#event事件对象"><span>Event事件对象</span></a></h3><p>事件发生后，回产生一个事件对象，作为参数传递给监听函数。</p><p>Event对象属性：</p><ol><li>event.target：返回事件触发当前所在的节点；</li><li>event.type：获取事件的类型，只读；</li><li>envent.keyCode：唯一标识；</li></ol><p>Event对象方法：</p><ol><li>event.preventDefault()：取消浏览器当前的默认行为，例如阻止a标签调整；</li><li>event.stopPropagation：阻止事件在dom中传播；阻止其他节点在当前节点的事件发生；不影响当前节点的其他事件；</li></ol><h3 id="鼠标事件" tabindex="-1"><a class="header-anchor" href="#鼠标事件"><span>鼠标事件</span></a></h3><ol><li>click：按下鼠标时触发；</li><li>dblclick：双击鼠标事件；</li><li>mousedown：鼠标按下时触发；</li><li>mouseup：按下鼠标弹起时触发；</li><li>mousemove：鼠标再节点内部移动触发；在节点中继续移动，还会触发；</li><li>mouseenter：进入一个节点触发，进入子节点不会触发；</li><li>mouseleave：离开节点触发，离开父节点不会触发；</li><li>mouseover：进入一个节点触发，进入子节点不会触发；</li><li>mouseout：鼠标离开一个节点触发，离开父节点也会触发；</li><li>wheel：滚动鼠标滚轮时触发；</li></ol><h3 id="键盘事件" tabindex="-1"><a class="header-anchor" href="#键盘事件"><span>键盘事件</span></a></h3><ol><li>keydown：按下键盘时触发；</li><li>keypress：按时有值的键触发；优质的键，先出阿飞keydown事件，再触发这个事件；</li><li>keyup：松开键盘时触发事件；</li></ol><h3 id="表单事件" tabindex="-1"><a class="header-anchor" href="#表单事件"><span>表单事件</span></a></h3><ol><li>input：input、select、textarea标签的值变化时触发；</li><li>select：input、textare标签文本被选中时触发；</li><li>change：input、select、textarea标签的值变化时触发(回车/失去焦点)；</li><li>reset：form标签上，重置表单；</li><li>submit：提交数据；</li></ol><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// input</span></span>
<span class="line"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 获取标签的值</span></span>
<span class="line">    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="事件代理-事件委托" tabindex="-1"><a class="header-anchor" href="#事件代理-事件委托"><span>事件代理(事件委托)</span></a></h3><p>父节点的事件会被子节点触发，可以把子节点的监听函数定义在父节点上，由父节点的监听函数同一处理多个子元素的事件。这种方式就叫做事件代理。</p><h2 id="定时器" tabindex="-1"><a class="header-anchor" href="#定时器"><span>定时器</span></a></h2><p>JavaScript提供了定时执行代码的功能，叫做定时器，主要由setTimeout()和setInterval()这两个函数来王朝。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 延迟执行器</span></span>
<span class="line"><span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>func<span class="token operator">|</span>code<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// setTimeout函数第一个参数将要推迟执行的函数名或一段代码,第二个参数标识推迟执行的毫秒数</span></span>
<span class="line"><span class="token comment">// 定时器执行的函数中的this指向的是全局就环境,而不是定义函数的所在的对象; </span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 取消定时器</span></span>
<span class="line"><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">setInterval</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// delay表示间隔多长时间指向,不断循环</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="防抖" tabindex="-1"><a class="header-anchor" href="#防抖"><span>防抖</span></a></h3><p>对于短时间内多次触发的事件，防抖的含义是让某个时间期限，函数的事件只执行一次。</p><p>可以在搜索处使用防抖。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 在延迟触发之前一直滚动,就无法触发了</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>timerId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        	<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">		timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>scrollHandle<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">scrollHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="节流" tabindex="-1"><a class="header-anchor" href="#节流"><span>节流</span></a></h3><p>页面resize事件，需要做页面适配的时候。需要根据最终的呈现情况进行dom渲染，只需要判断最后一次的变化情况。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 第一次滚动触发定时器，后面继续滚动定时器没有执行valid为false，所有不会执行fn的方法</span></span>
<span class="line">window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>scrollHandle<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">scrollHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> 	<span class="token keyword">var</span> valid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    valid <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        valid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="输出方式" tabindex="-1"><a class="header-anchor" href="#输出方式"><span>输出方式</span></a></h2><ol><li>console.log()：控制台输出；</li><li>alert(弹窗)；</li><li>document.write(&quot;输出到页面&quot;)。</li></ol>`,132)]))}const o=s(p,[["render",l],["__file","JavaScript.html.vue"]]),u=JSON.parse('{"path":"/frontEnd/JavaScript.html","title":"JavaScript","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"使用JavaScript","slug":"使用javascript","link":"#使用javascript","children":[{"level":3,"title":"引用JavaScript","slug":"引用javascript","link":"#引用javascript","children":[]}]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[{"level":3,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":3,"title":"标识符","slug":"标识符","link":"#标识符","children":[]},{"level":3,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":3,"title":"运算符","slug":"运算符","link":"#运算符","children":[]},{"level":3,"title":"流程语句","slug":"流程语句","link":"#流程语句","children":[]},{"level":3,"title":"数据类型","slug":"数据类型-1","link":"#数据类型-1","children":[]},{"level":3,"title":"函数","slug":"函数","link":"#函数","children":[]}]},{"level":2,"title":"Dom","slug":"dom","link":"#dom","children":[{"level":3,"title":"节点","slug":"节点","link":"#节点","children":[]},{"level":3,"title":"节点树","slug":"节点树","link":"#节点树","children":[]},{"level":3,"title":"获取Element元素","slug":"获取element元素","link":"#获取element元素","children":[]},{"level":3,"title":"创建Element元素","slug":"创建element元素","link":"#创建element元素","children":[]},{"level":3,"title":"Element对象属性","slug":"element对象属性","link":"#element对象属性","children":[]},{"level":3,"title":"Element获取元素位置","slug":"element获取元素位置","link":"#element获取元素位置","children":[]},{"level":3,"title":"css操作","slug":"css操作","link":"#css操作","children":[]}]},{"level":2,"title":"html事件","slug":"html事件","link":"#html事件","children":[{"level":3,"title":"Event事件对象","slug":"event事件对象","link":"#event事件对象","children":[]},{"level":3,"title":"鼠标事件","slug":"鼠标事件","link":"#鼠标事件","children":[]},{"level":3,"title":"键盘事件","slug":"键盘事件","link":"#键盘事件","children":[]},{"level":3,"title":"表单事件","slug":"表单事件","link":"#表单事件","children":[]},{"level":3,"title":"事件代理(事件委托)","slug":"事件代理-事件委托","link":"#事件代理-事件委托","children":[]}]},{"level":2,"title":"定时器","slug":"定时器","link":"#定时器","children":[{"level":3,"title":"防抖","slug":"防抖","link":"#防抖","children":[]},{"level":3,"title":"节流","slug":"节流","link":"#节流","children":[]}]},{"level":2,"title":"输出方式","slug":"输出方式","link":"#输出方式","children":[]}],"git":{"updatedTime":1737273535000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":1,"url":"https://github.com/oycm"}]},"filePathRelative":"frontEnd/JavaScript.md"}');export{o as comp,u as data};
