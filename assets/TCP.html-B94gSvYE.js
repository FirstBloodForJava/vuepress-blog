import{_ as s,c as a,e as p,o as e}from"./app-DO9Fsueg.js";const t={};function c(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp"><span>TCP</span></a></h1><h2 id="tcp正常四次挥手" tabindex="-1"><a class="header-anchor" href="#tcp正常四次挥手"><span>TCP正常四次挥手</span></a></h2><p>四次挥手是指TCP连接的断开过程，它是建立再三次握手的基础之上。四次挥手过程用于正常关闭一个已经建立的TCP连接。</p><ol><li>主动关闭方(通常是客户端)发送FIN(Finish)：主动关闭方首先发送一个FIN报文段，表示它已经完成了数据的发送任务，并且希望关闭连接；发送FIN后，主动关闭方进入==FIN-WAIT-1==状态，等待被动关闭方的确认。</li><li>被动关闭方(通常是服务器)发送ACK：被动关闭方接收到主动关闭方的FIN后，会发送一个ACK(Acknowledgment)报文段，表示已经收到了关闭请求，并且进入==CLOSE-WAIT==状态(此时被动关闭方仍然可以发送未发生完毕的数据)。主动关闭方接收到报文进入==FIN-WAIT-2==状态。</li><li>被动关闭方发送FIN：被动关闭方在完成所有数据的发送后，会发送一个FIN报文给主动关闭方；被动关闭方进入==LAST-ACK==状态等待被动关闭方的确认。</li><li>主动关闭方发送ACK：主动关闭方收到被动关闭方的FIN后，会发送一个ACK报文段作为确认，表示已经收到了关闭请求；主动关闭方进入==TIME-WAIT==状态，等待可能出现的延迟的报文段(等待足够长的时间以确保被动关闭方收到了ACK报文段，防止出现任何延迟的报文段引发错误。完成TIME-WAIT状态后，TCP连接彻底关闭。)。</li></ol><p>MSL(Maximum Segment Lifetime，最大报文段生存时间)</p><figure><img src="http://47.101.155.205/0cdeae65a1c940c8bf90cdb25905a60b.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><figure><img src="http://47.101.155.205/image-20240220220747429.png" alt="image-20240220220747429" tabindex="0" loading="lazy"><figcaption>image-20240220220747429</figcaption></figure><figure><img src="http://47.101.155.205/image-20240220221946980.png" alt="image-20240220221946980" tabindex="0" loading="lazy"><figcaption>image-20240220221946980</figcaption></figure><h2 id="tcp三次握手" tabindex="-1"><a class="header-anchor" href="#tcp三次握手"><span>TCP三次握手</span></a></h2><p>TCP三次握手是建立TCP连接的过程，用于确保客户端和服务器之间的通信可以进行。</p><ol><li><p>客户端发送SYN报文段：客户端向服务器发送一个SYN(Synchronize Sequence Numbers同步序列编号)报文段，其中包含一个随机的初始序列号(seq=j)，用于序列号的同步；发送SYN报文之后，客户端进入==SYN-SENT==(同步已发布)状态，等待服务器的确认。</p></li><li><p>服务器发送SYN-ACK报文段：服务器接收到客户端发送的SYN报文段后，向客户端发送一个SYN-ACK(同步-确认)报文段作为响应。SYN-ACK报文段中包含一个确认号，该确认号是客户端发送的序列化+1(ack=j+1)。服务器也会随机选择一个随机的初始序列号(seq=k)。发送SYN-ACK报文段之后，服务器进入==SYN-RECEIVED==(同步-收到)状态，等待客户端确认。</p></li><li><p>客户端发送ACK报文段：客户端收到服务器发送的SYN-ACK报文段后，会向服务器发送一个确认的ACK报文段。ACK报文段中包含一个确认号(ack=k+1)，确认号是服务器发送的SYN报文段的序列号+1，同时客户端会选择一个随机的初始序列号(seq=z)。在发送ACK报文段后，客户端和服务器都进入==ESTABLISHED==状态，TCP连接建立完成。</p><figure><img src="https://img-blog.csdnimg.cn/direct/3ac990694b1d415eb13b51bfd198858a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><figure><img src="https://img-blog.csdnimg.cn/direct/5333dd72cc32400fbef040bb3d751d4a.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><figure><img src="http://47.101.155.205/image-20240220213013778.png" alt="image-20240220213013778" tabindex="0" loading="lazy"><figcaption>image-20240220213013778</figcaption></figure><h2 id="状态" tabindex="-1"><a class="header-anchor" href="#状态"><span>状态</span></a></h2><h3 id="closed" tabindex="-1"><a class="header-anchor" href="#closed"><span>CLOSED</span></a></h3><p>初始状态。</p><h3 id="syn-rcvd" tabindex="-1"><a class="header-anchor" href="#syn-rcvd"><span>SYN_RCVD</span></a></h3><p>这个状态表示接受到了SYN报文，在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂，基本上用netstat你是很难看到这种状态的，除非你特意写了一个客户端测试程序，故意将三次TCP握手过程中最后一个ACK报文不予发送。因此这种状态时，当收到客户端的ACK报文后，它会进入到ESTABLISHED状态。</p><h3 id="syn-sent" tabindex="-1"><a class="header-anchor" href="#syn-sent"><span>SYN_SENT</span></a></h3><p>客户端建立TCP连接发送第一个报文段后的状态。</p><h3 id="established" tabindex="-1"><a class="header-anchor" href="#established"><span>ESTABLISHED</span></a></h3><p>连接建立</p><h3 id="fin-wait-1" tabindex="-1"><a class="header-anchor" href="#fin-wait-1"><span>FIN_WAIT_1</span></a></h3><p>FIN_WAIT_1是SOCKET在ESTABLISHED状态发送FIN报文段之后的状态。 在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态还有时常常可以用netstat看到。</p><h3 id="close-wait" tabindex="-1"><a class="header-anchor" href="#close-wait"><span>CLOSE_WAIT</span></a></h3><p>被关闭的SOCKET连接接收到一个FIN报文段，发送一个ACK报文段之后就进入这个状态。</p><h3 id="fin-wait-2" tabindex="-1"><a class="header-anchor" href="#fin-wait-2"><span>FIN_WAIT_2</span></a></h3><p>表示半连接，即有一方要close连接。 等待被关闭方的ACK报文后的状态，等待被关闭方的FIN报文段。</p><h3 id="last-ack" tabindex="-1"><a class="header-anchor" href="#last-ack"><span>LAST_ACK</span></a></h3><p>被动关闭一方在发送FIN报文后，最后等待对方的ACK报文状态。</p><h3 id="time-wait" tabindex="-1"><a class="header-anchor" href="#time-wait"><span>TIME_WAIT</span></a></h3><p>表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。</p><h3 id="closing" tabindex="-1"><a class="header-anchor" href="#closing"><span>CLOSING</span></a></h3><p>这种状态比较特殊，实际情况中应该是很少见，属于一种比较罕见的例外状态。正常情况下，当你发送FIN报文后，按理来说是应该先收到（或同时收到）对方的ACK报文，再收到对方的FIN报文。但是CLOSING状态表示你发送FIN报文后，并没有收到对方的ACK报文，反而却收到了对方的FIN报文。什么情况下会出现此种情况呢？其实细想一下，也不难得出结论：那就是如果双方几乎在==同时close一个SOCKET==的话，那么就出现了双方同时发送FIN报文的情况，也就会出现CLOSING状态，表示双方都正在关闭SOCKET连接。</p><h2 id="模拟broken-pipe" tabindex="-1"><a class="header-anchor" href="#模拟broken-pipe"><span>模拟Broken Pipe</span></a></h2><p>出现Broken Pipe异常的条件：Http请求在客户端断开(服务端为响应时)；响应的结果要大于16kb</p><h3 id="客户端条件" tabindex="-1"><a class="header-anchor" href="#客户端条件"><span>客户端条件</span></a></h3><p>读取超时时间为5s</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>oycm<span class="token punctuation">.</span>spring_mvc_starter<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span></span><span class="token class-name">Gson</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span></span><span class="token class-name">GsonBuilder</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataOutputStream</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">HttpURLConnection</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> ouyangcm</span>
<span class="line"> * create 2024/2/20 10:12</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpUtils</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Gson</span> gson<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">GsonBuilder</span> gsonBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        gsonBuilder<span class="token punctuation">.</span><span class="token function">serializeNulls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        gson <span class="token operator">=</span> gsonBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">httpPost</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/broken/pipe/2493&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">httpPost</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> body<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> header<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">URL</span> apiUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">HttpURLConnection</span> connection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> apiUrl<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        connection<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 设置请求头</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keySet <span class="token operator">:</span> header<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span>keySet<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keySet<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 设置连接时间</span></span>
<span class="line">        connection<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        connection<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 输出流</span></span>
<span class="line">        connection<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">DataOutputStream</span> outPut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        outPut<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">BufferedReader</span> inReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">StringBuilder</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> tempLine <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tempLine <span class="token operator">=</span> inReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tempLine<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        inReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务端条件" tabindex="-1"><a class="header-anchor" href="#服务端条件"><span>服务端条件</span></a></h3><figure><img src="http://47.101.155.205/image-20240220214351092.png" alt="image-20240220214351092" tabindex="0" loading="lazy"><figcaption>image-20240220214351092</figcaption></figure><h3 id="wireshark抓包情况" tabindex="-1"><a class="header-anchor" href="#wireshark抓包情况"><span>wireshark抓包情况</span></a></h3><figure><img src="http://47.101.155.205/image-20240220215417043.png" alt="image-20240220215417043" tabindex="0" loading="lazy"><figcaption>image-20240220215417043</figcaption></figure><figure><img src="http://47.101.155.205/image-20240220220514668.png" alt="image-20240220220514668" tabindex="0" loading="lazy"><figcaption>image-20240220220514668</figcaption></figure><h3 id="时间足够长" tabindex="-1"><a class="header-anchor" href="#时间足够长"><span>时间足够长</span></a></h3><figure><img src="http://47.101.155.205/image-20240220222545920.png" alt="image-20240220222545920" tabindex="0" loading="lazy"><figcaption>image-20240220222545920</figcaption></figure><h2 id="tcp连接" tabindex="-1"><a class="header-anchor" href="#tcp连接"><span>tcp连接</span></a></h2><p>建立一个tcp连接需要消耗一个文件描述符。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查询linux系统支持的文件描述符的上限</span></span>
<span class="line"><span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-n</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="tcp相关参数" tabindex="-1"><a class="header-anchor" href="#tcp相关参数"><span>tcp相关参数</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查询相关tcp参数</span></span>
<span class="line"><span class="token function">sysctl</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> tcp</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="tcp连接端口" tabindex="-1"><a class="header-anchor" href="#tcp连接端口"><span>tcp连接端口</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看tcp连接端口信息</span></span>
<span class="line"><span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> ESTABLISHED</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看tcp连接端口数量</span></span>
<span class="line"><span class="token function">netstat</span> <span class="token parameter variable">-an</span> <span class="token operator">|</span> <span class="token function">grep</span> ESTABLISHED <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查询支持tcp连接的端口范围</span></span>
<span class="line"><span class="token function">cat</span> /proc/sys/net/ipv4/ip_local_port_range</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 增大tcp连接端口范围</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;1024 65535&quot;</span> <span class="token operator">&gt;</span> /proc/sys/net/ipv4/ip_local_port_range</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53)]))}const o=s(t,[["render",c],["__file","TCP.html.vue"]]),u=JSON.parse('{"path":"/linux/TCP.html","title":"TCP","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"TCP正常四次挥手","slug":"tcp正常四次挥手","link":"#tcp正常四次挥手","children":[]},{"level":2,"title":"TCP三次握手","slug":"tcp三次握手","link":"#tcp三次握手","children":[]},{"level":2,"title":"状态","slug":"状态","link":"#状态","children":[{"level":3,"title":"CLOSED","slug":"closed","link":"#closed","children":[]},{"level":3,"title":"SYN_RCVD","slug":"syn-rcvd","link":"#syn-rcvd","children":[]},{"level":3,"title":"SYN_SENT","slug":"syn-sent","link":"#syn-sent","children":[]},{"level":3,"title":"ESTABLISHED","slug":"established","link":"#established","children":[]},{"level":3,"title":"FIN_WAIT_1","slug":"fin-wait-1","link":"#fin-wait-1","children":[]},{"level":3,"title":"CLOSE_WAIT","slug":"close-wait","link":"#close-wait","children":[]},{"level":3,"title":"FIN_WAIT_2","slug":"fin-wait-2","link":"#fin-wait-2","children":[]},{"level":3,"title":"LAST_ACK","slug":"last-ack","link":"#last-ack","children":[]},{"level":3,"title":"TIME_WAIT","slug":"time-wait","link":"#time-wait","children":[]},{"level":3,"title":"CLOSING","slug":"closing","link":"#closing","children":[]}]},{"level":2,"title":"模拟Broken Pipe","slug":"模拟broken-pipe","link":"#模拟broken-pipe","children":[{"level":3,"title":"客户端条件","slug":"客户端条件","link":"#客户端条件","children":[]},{"level":3,"title":"服务端条件","slug":"服务端条件","link":"#服务端条件","children":[]},{"level":3,"title":"wireshark抓包情况","slug":"wireshark抓包情况","link":"#wireshark抓包情况","children":[]},{"level":3,"title":"时间足够长","slug":"时间足够长","link":"#时间足够长","children":[]}]},{"level":2,"title":"tcp连接","slug":"tcp连接","link":"#tcp连接","children":[{"level":3,"title":"tcp相关参数","slug":"tcp相关参数","link":"#tcp相关参数","children":[]},{"level":3,"title":"tcp连接端口","slug":"tcp连接端口","link":"#tcp连接端口","children":[]}]}],"git":{"updatedTime":1737612661000,"contributors":[{"name":"oycm","username":"oycm","email":"1164864987@qq.com","commits":3,"url":"https://github.com/oycm"},{"name":"ouyangcm","username":"ouyangcm","email":"mingorg@163.com","commits":1,"url":"https://github.com/ouyangcm"}]},"filePathRelative":"linux/TCP.md"}');export{o as comp,u as data};
