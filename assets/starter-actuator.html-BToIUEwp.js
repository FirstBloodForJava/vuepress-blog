import{_ as t,c as r,e as i,o as a}from"./app-DO9Fsueg.js";const o={};function c(n,e){return a(),r("div",null,e[0]||(e[0]=[i('<h1 id="starter-actuator" tabindex="-1"><a class="header-anchor" href="#starter-actuator"><span>starter-actuator</span></a></h1><h2 id="prometheus" tabindex="-1"><a class="header-anchor" href="#prometheus"><span>Prometheus</span></a></h2><p>通过<code>org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessor</code>Bean后置处理器，使用配置器<code>MeterRegistryConfigurer</code>，在创建<code>MeterRegistry</code>时，将<code>MeterBinder</code>注册到<code>MeterRegistry</code>。通过<code>MeterRegistryCustomizer</code>Bean对注册器进行自定义；<code>MeterFilter</code>Bean添加多滤器。</p><figure><img src="http://47.101.155.205/image-20250527153917235.png" alt="image-20250527153917235" tabindex="0" loading="lazy"><figcaption>image-20250527153917235</figcaption></figure><figure><img src="http://47.101.155.205/image-20250527154454544.png" alt="image-20250527154454544" tabindex="0" loading="lazy"><figcaption>image-20250527154454544</figcaption></figure><h3 id="prometheusmeterregistry" tabindex="-1"><a class="header-anchor" href="#prometheusmeterregistry"><span>PrometheusMeterRegistry</span></a></h3><p><code>PrometheusMeterRegistry</code>继承<code>MeterRegistry</code>，通过重写<code>newCounter()</code>、<code>newDistributionSummary()</code>、<code>newTimer()</code>、<code>newGauge()</code>、<code>newLongTaskTimer()</code>、<code>newFunctionTimer()</code>、<code>newFunctionCounter()</code>、<code>newMeter()</code>等方法，在创建对应指标收集时，将收集的标签记录下来。</p><p>调用<code>collectorByName(Meter.Id)</code>方法记录指标，<code>CollectorRegistry</code>中存放需要记录的指标。</p><figure><img src="http://47.101.155.205/image-20250528112951930.png" alt="image-20250528112951930" tabindex="0" loading="lazy"><figcaption>image-20250528112951930</figcaption></figure><figure><img src="http://47.101.155.205/image-20250528134928786.png" alt="image-20250528134928786" tabindex="0" loading="lazy"><figcaption>image-20250528134928786</figcaption></figure><p><strong>JVM自动配置的指标MeterBinder：</strong></p><ol><li>JvmGcMetrics</li><li>JvmMemoryMetrics</li><li>JvmThreadMetrics</li><li>ClassLoaderMetrics</li></ol><p><strong>Micrometer其它未配置的MeterBinder：</strong></p><ol><li>DiskSpaceMetrics：监控指定路径的磁盘情况；</li><li>ExecutorServiceMetrics：监控设置的线程池的情况：已完成的任务、正在执行的线程数、等待队列数、剩余可用队列数、线程池中的线程数等指标。</li></ol><h3 id="prometheusscrapeendpoint" tabindex="-1"><a class="header-anchor" href="#prometheusscrapeendpoint"><span>PrometheusScrapeEndpoint</span></a></h3><p><code>PrometheusScrapeEndpoint</code>暴露接口供prometheus主动抓取数据，<code>MetricFamilySamplesEnumeration</code>对象中存放了收集的信息。</p><figure><img src="http://47.101.155.205/image-20250528140732638.png" alt="image-20250528140732638" tabindex="0" loading="lazy"><figcaption>image-20250528140732638</figcaption></figure><figure><img src="http://47.101.155.205/image-20250528141649212.png" alt="image-20250528141649212" tabindex="0" loading="lazy"><figcaption>image-20250528141649212</figcaption></figure><figure><img src="http://47.101.155.205/image-20250528142253215.png" alt="image-20250528142253215" tabindex="0" loading="lazy"><figcaption>image-20250528142253215</figcaption></figure>',19)]))}const g=t(o,[["render",c],["__file","starter-actuator.html.vue"]]),d=JSON.parse('{"path":"/springboot/starter-actuator.html","title":"starter-actuator","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Prometheus","slug":"prometheus","link":"#prometheus","children":[{"level":3,"title":"PrometheusMeterRegistry","slug":"prometheusmeterregistry","link":"#prometheusmeterregistry","children":[]},{"level":3,"title":"PrometheusScrapeEndpoint","slug":"prometheusscrapeendpoint","link":"#prometheusscrapeendpoint","children":[]}]}],"git":{"updatedTime":1748424903000,"contributors":[{"name":"ouyangcm","username":"ouyangcm","email":"mingorg@163.com","commits":2,"url":"https://github.com/ouyangcm"}]},"filePathRelative":"springboot/starter-actuator.md"}');export{g as comp,d as data};
